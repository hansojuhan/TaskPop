/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ \"./node_modules/css-loader/dist/runtime/getUrl.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Inter-VariableFont_opsz,wght.ttf */ \"./src/fonts/Inter-VariableFont_opsz,wght.ttf\"), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face {\r\n  font-family: \"Inter\";\r\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\r\n}\r\n\r\n:root {\r\n  font-family: \"Inter\";\r\n\r\n  /* Colors */\r\n  --primary: lightblue;\r\n  --secondary: #9022f1; \r\n  --light: #ffffff;\r\n  --medium: #fefefe;\r\n  --dark: #f2f2f2;\r\n  --very-dark: #7a7a7a;\r\n  \r\n  --border-radius: 0.25rem;\r\n\r\n  --task-height: 6rem;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: auto;\r\n  min-height: 100%;\r\n  width: 100%;\r\n\r\n  display: flex;\r\n\r\n  overflow-x: hidden; /* Prevent horizontal scrolling */\r\n}\r\n\r\n/* Aside */\r\naside {\r\n  height: auto;\r\n  width: 25%;\r\n\r\n  background-color: var(--dark);\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  /* justify-content: space-between; */\r\n}\r\n\r\n/* Logo */\r\n#logo-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n\r\n  padding: 0 1rem;\r\n}\r\n\r\n#logo-container > img {\r\n  width: 3rem;\r\n  height: 3rem;\r\n}\r\n\r\n/* Add some gradient to the text */\r\n#logo-container > h1 {\r\n  font-size: 2rem;\r\n  color: var(--very-dark);\r\n  \r\n  /* background: -webkit-linear-gradient(black, var(--secondary));\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent; */\r\n}\r\n\r\n\r\n#categories-menu {\r\n  margin-top: 8rem;\r\n  padding: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0rem;\r\n}\r\n\r\n/* Add bottom border below the main all tasks link */\r\n#categories-menu li:first-child {\r\n  border-bottom: 1px solid lightgray; /* Only apply the bottom border */\r\n\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  \r\n}\r\n\r\n/* Menu list item */\r\n#categories-menu li {\r\n  height: 3rem;\r\n  list-style: none;\r\n\r\n  display: flex;\r\n}\r\n\r\n#categories-menu li button {\r\n  text-decoration: none;\r\n  color: black;\r\n\r\n  border: none;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  text-align: left;\r\n  font-size: 1.125rem;\r\n\r\n  padding: 0 1rem;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Three dots icon */\r\n#categories-menu li img {\r\n  width: 2rem;\r\n  margin: 0 0.5rem;\r\n}\r\n\r\n/* Three dots icon on hover */\r\n#categories-menu li img:hover {\r\n  background-color: var(--dark);\r\n  border-radius: 999px;\r\n  transition: background-color .2s ease;\r\n\r\n  cursor: pointer;\r\n}\r\n\r\n#categories-menu li button:hover {\r\n  background-color: var(--primary);\r\n  transition: background-color .1s ease;\r\n}\r\n\r\n.menu-active {\r\n  background-color: var(--primary); /* You can style this as needed */\r\n  color: white;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Main body */\r\nmain {\r\n  display: flex;\r\n  flex-direction: column;\r\n  \r\n  width: 100%;\r\n\r\n  box-shadow: 1px 1px 5px gray;\r\n}\r\n\r\n#main-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  width: 100%;\r\n\r\n  padding: 0rem 10%;\r\n}\r\n\r\nheader {\r\n  height: 12rem;\r\n  width: 100%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n\r\n  /* Background color */\r\n  background: rgb(2,0,36);\r\n  background: linear-gradient(30deg, rgba(211, 0, 169, 0.513) 0%, rgba(9, 9, 121, 0.464) 35%, rgb(23, 207, 72) 100%);\r\n\r\n  /* Font color */\r\n  color: white;\r\n\r\n  padding: 0;\r\n\r\n  box-shadow: 0px 1px 5px gray;\r\n}\r\n\r\n#header {\r\n  font-size: 3rem;\r\n  padding-left: 1rem;\r\n}\r\n\r\n#content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n\r\n  padding: 0 1rem 1rem 1rem;\r\n  margin: 0;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#task-form {\r\n  background-color: var(--dark);\r\n\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  border-radius: var(--border-radius);\r\n  box-shadow: 0px 1px 5px gray;\r\n\r\n  padding: 1rem 1.5rem 1rem 2rem;\r\n  margin: 1rem;\r\n\r\n  /* height: auto; */\r\n  /* height: var(--task-height); */\r\n}\r\n\r\n#submit-task-note {\r\n  margin: -0.5rem 0rem 1rem 1rem;\r\n  color: gray;\r\n}\r\n\r\n#submit-task-keyboard-shortcut {\r\n  background-color: var(--dark);\r\n  padding: 0.1rem 0.2rem;\r\n  font-weight: 500;\r\n  border-radius: 0.2rem;\r\n}\r\n\r\n#task-form-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  width: 80%;\r\n  height: 100%;\r\n}\r\n\r\n#task-form-section textarea[name=title] {\r\n  font-size: 1.5rem;\r\n  width: 100%;\r\n\r\n  padding: 0.5rem 1rem;\r\n\r\n  /* Remove background */\r\n  background-color: var(--dark);\r\n  border: none;\r\n\r\n  /* Remove radius */\r\n  border-radius: 0px;\r\n\r\n  font-family: inherit;\r\n\r\n  box-sizing: border-box;\r\n  resize: none;\r\n\r\n    /* Prevent scrollbars */\r\n    overflow: hidden;\r\n    white-space: pre-wrap; /* Allow text to wrap */\r\n    word-wrap: break-word; /* Ensure long words wrap properly */\r\n}\r\n\r\n/* Add styling for when textarea content exceeds the height */\r\n#task-form-section textarea:valid {\r\n  height: auto; /* Automatically adjust height based on content */\r\n  min-height: 3rem;\r\n}\r\n\r\n#task-form-section textarea[name=title]:hover {\r\n  background-color: var(--light);\r\n}\r\n\r\n#task-form-section textarea[name=title]:focus {\r\n  outline: none;\r\n}\r\n\r\n\r\n#task-form-date-category {\r\n  display: flex;\r\n  gap: 1rem;\r\n}\r\n\r\n#task-form-date-category input {\r\n  color: gray;\r\n\r\n  min-height: 2rem;\r\n  font-size: 1rem;\r\n\r\n  /* Remove background */\r\n  background-color: var(--dark);\r\n  border: none;\r\n  \r\n  /* Make input and select the same size */\r\n  box-sizing: border-box;\r\n  padding: 0 1rem;\r\n  line-height: 1.2;\r\n  vertical-align: middle;\r\n}\r\n\r\n#task-form-date-category input:hover {\r\n  background-color: var(--light);\r\n}\r\n\r\n/* Remove the border that appears on focus */\r\n#task-form-date-category input:focus {\r\n  outline: none;\r\n}\r\n\r\n/* Date input custom styles */\r\n/* Wrapper for positioning the custom icon */\r\n#date-input-wrapper {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 12rem;\r\n}\r\n\r\n/* Date input styling */\r\n#date-input-wrapper input[type=\"date\"] {\r\n  padding: 0.5rem 1rem;\r\n  padding-left: 3rem; /* Space for the custom icon */\r\n  font-size: 1.125rem;\r\n  border-radius: 4px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Hide the default icon */\r\n#date-input-wrapper input[type=\"date\"]::-webkit-calendar-picker-indicator {\r\n  opacity: 0;\r\n  /* Move the standard symbol right over the custom one */\r\n  position: relative;\r\n  right: 8.5rem; \r\n  cursor: pointer;\r\n\r\n  width: 1rem;\r\n}\r\n\r\n/* Custom icon that can be clicked */\r\n#date-input-wrapper::before {\r\n  /* Unicode for a calendar icon 📅 */\r\n  content: '\\\\1F4C5'; \r\n  position: absolute;\r\n  left: 0.8rem;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  font-size: 1.25rem;\r\n  /* Prevent interference with icon interaction */\r\n  pointer-events: none; \r\n  color: #888;\r\n}\r\n\r\n\r\n/* Category dropdown */\r\n/* Wrapper to position the custom chevron */\r\n#category-dropdown {\r\n  position: relative;\r\n  width: fit-content;\r\n  \r\n  font-size: 1.125rem;\r\n  color: #808080;\r\n\r\n  /* Remove the default chevron */\r\n  appearance: none; \r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n\r\n  background-color: var(--dark);\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 0.5rem;\r\n  box-sizing: border-box;\r\n  cursor: pointer; \r\n}\r\n\r\n#category-dropdown:hover {\r\n  background-color: var(--light);\r\n}\r\n\r\n/* Remove the border that appears on focus */\r\n#category-dropdown:focus {\r\n  outline: none;\r\n}\r\n\r\n#button-container {\r\n  display: flex;\r\n  width: 3rem;\r\n  \r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#new-task-button {\r\n  font-size: 3rem;\r\n  color: gray;\r\n  background-color: var(--light);\r\n  border-radius: var(--border-radius);\r\n\r\n  height: 3rem;\r\n  width: 3rem;\r\n\r\n  border: none;\r\n  user-select: none;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n#new-task-button:hover {\r\n  background-color: var(--primary);\r\n  color: var(--light);\r\n  transition: background-color .2s ease;\r\n}\r\n\r\n#new-task-button:focus {\r\n  background-color: var(--dark);\r\n}\r\n\r\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\r\n/* Task */\r\n.task {\r\n  background-color: var(--dark);\r\n  box-shadow: 0px 1px 5px gray;\r\n\r\n  height: auto;\r\n  overflow: hidden;\r\n\r\n  border-radius: var(--border-radius);\r\n\r\n  padding: 1rem 1rem;\r\n\r\n  display: flex;\r\n  /* justify-content: space-between; */\r\n  align-items: center;\r\n}\r\n\r\n.task:hover {\r\n  box-shadow: 0px 1px 5px black;\r\n  transition: box-shadow .1s ease;\r\n}\r\n\r\n/* Checkbox */\r\n.task .status {\r\n  width: 2rem;\r\n  height: 2rem;\r\n  margin: 0 1rem;\r\n}\r\n\r\n.task-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  padding-bottom: 0.125rem;\r\n}\r\n\r\n/* Task done style */\r\n.done {\r\n  text-decoration: line-through;\r\n  color: gray;\r\n  background-color: rgb(217, 217, 217);\r\n}\r\n\r\n.title {\r\n  margin: 0;\r\n}\r\n\r\n/* Checkbox */\r\n.status {\r\n  width: 4rem;\r\n  height: 4rem;\r\n  /* Use transform scale to increase the checkbox size */\r\n  /* transform: scale(1.5);  */\r\n  /* transform-origin: center; */\r\n\r\n  /* border-radius: 100%; */\r\n  vertical-align: middle;\r\n  border: 1px solid lightgray;\r\n  background-color: white;\r\n  appearance: none;\r\n  -webkit-appearance: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.status:hover {\r\n  background-color: var(--primary);\r\n  color: var(--light);\r\n  transition: background-color .2s ease;\r\n}\r\n\r\n.status:checked {\r\n  /* background-color: var(--secondary); */\r\n  /* color: var(--light); */\r\n  appearance: auto;\r\n  /* clip-path: circle(50% at 50% 50%); */\r\n  border-radius: 100%;\r\n}\r\n\r\n.date-category-container {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  gap: 1rem;\r\n  margin: 0;\r\n  padding: 0;\r\n  color: var(--very-dark);\r\n}\r\n\r\n.date-category-container > p {\r\n  margin: 0.5rem 0;\r\n  height: 1.5rem;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  white-space: pre-wrap; /* Allow text to wrap */\r\n  word-wrap: break-word; /* Ensure long words wrap properly */\r\n}\r\n\r\n/* Add some styles for the category */\r\n.category {\r\n  background-color: #e6e6e6;\r\n  padding: 0.125rem 0.5rem;\r\n  border-radius: var(--border-radius);\r\n\r\n}\r\n\r\n.due-date-container {\r\n  background-color: #e6e6e6;\r\n  padding: 0.125rem 0.5rem;\r\n  border-radius: var(--border-radius);\r\n\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  gap: 0.5rem;\r\n  height: 1.5rem;\r\n}\r\n.due-date-container > img {\r\n  width: 1.125rem;\r\n}\r\n\r\n/* .task-chevron{\r\n  display: flex;\r\n\r\n  width: 3rem;\r\n  height: 3rem;\r\n  stroke: var(--very-dark);\r\n\r\n  border-radius: var(--border-radius);\r\n\r\n  border: none;\r\n  user-select: none;\r\n\r\n  cursor: pointer;\r\n\r\n  margin-right: 1rem;\r\n} */\r\n\r\n/* ******************************************************** */\r\n/* Modal */\r\n/* Dark overlay with modal */\r\n#add-category-modal::backdrop {\r\n  background: rgba(0, 0, 0, 0.2);\r\n  animation: fade-in 0.2s ease-in-out;\r\n}\r\n\r\n@keyframes fade-in {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n#add-category-modal {\r\n  border: none;\r\n  font-size: 1.25rem;\r\n\r\n  padding: 2rem;\r\n\r\n  box-shadow: 0px 1px 5px gray;\r\n  border-radius: var(--border-radius);\r\n}\r\n\r\n#add-category-modal > form {\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2rem;\r\n\r\n  justify-content: space-between;\r\n}\r\n\r\n#category-modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  width: 100%;\r\n}\r\n\r\n#category-modal-header > h2 {\r\n  margin: 0;\r\n}\r\n\r\n#category-modal-fields {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 1rem;\r\n}\r\n\r\n#category-modal-fields > div {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n/* Make emoji input small, category long */\r\n#category-modal-fields > div:first-child {\r\n  width: 25%;\r\n}\r\n\r\n#category-modal-fields > div:last-child {\r\n  width: 75%;\r\n}\r\n\r\n/* Styles for the emoji input */\r\n#category-modal-fields button[name=emoji] {\r\n  font-size: 2rem;\r\n\r\n  border: none;\r\n  background: none;\r\n  padding: none;\r\n\r\n  text-align: center;\r\n  line-height: 2.5rem;\r\n}\r\n\r\n#category-modal-fields button[name=emoji]:hover { \r\n  background-color: var(--dark);\r\n}\r\n\r\n\r\n.category-modal-button {\r\n  border: none;\r\n  width: 4rem;\r\n  height: 2rem;\r\n\r\n  font-size: 1.25rem;\r\n}\r\n\r\n.category-modal-button:hover {\r\n  background-color: var(--very-dark);\r\n  cursor: pointer;\r\n}\r\n\r\n#category-modal-fields input {\r\n  font-size: 1.25rem;\r\n\r\n  padding: 0.5rem;\r\n}\r\n\r\nemoji-picker {\r\n  position: absolute;\r\n}\r\n\r\n\r\n/* Mobile view */\r\n/* Hide aside and show burger icon on mobile screens */\r\n@media (max-width: 768px) {\r\n  aside {\r\n    transform: translateX(-100%); /* Hide the sidebar off-screen */\r\n    transition: transform 0.3s ease;\r\n    position: fixed;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: var(--dark);\r\n    z-index: 1000;\r\n    width: 100%;\r\n\r\n    /* Toggle scrolling of the menu */\r\n    overflow-y: auto; /* Allow scrolling inside the side menu */\r\n  }\r\n\r\n  #burger-icon {\r\n    position: absolute;\r\n    height: 4rem;\r\n    right: 15px;\r\n    top: 10px;\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n\r\n  /* Hide aside when not open */\r\n  .aside-open aside {\r\n    transform: translateX(0);\r\n  }\r\n\r\n  #categories-menu li:first-child {\r\n    padding: 2rem 0 3rem 0;\r\n  }\r\n\r\n  #categories-menu li {\r\n    padding: 2rem 0;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  #categories-menu li img {\r\n    width: 3rem;\r\n    margin: 0 1rem;\r\n  }\r\n\r\n  #categories-menu li button {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  #main-container {\r\n    width: 100%;\r\n    padding: 0;\r\n\r\n  }\r\n\r\n\r\n  /* Task styles */\r\n  .task {\r\n    width: 100%;\r\n  }\r\n\r\n  /* On mobile, hide the keyboard shortcut note */\r\n  #submit-task-note {\r\n    display: none;\r\n  }\r\n  /* In mobile, move date and category down as a column */\r\n  #task-form-date-category { \r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0;\r\n  }\r\n\r\n  /* In mobile, show these under each other for more horizontal space */\r\n  .date-category-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 0rem;\r\n  }\r\n\r\n  /* Move the create button down */\r\n  #task-form {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    padding: 1rem 0;\r\n  }\r\n\r\n  #task-form-section {\r\n    width: 95%;\r\n  }\r\n\r\n  .title {\r\n    font-size: 1rem;\r\n\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .task .status {\r\n    margin-left: 0rem;\r\n    margin-right: 1rem;\r\n\r\n    /* align-self: start; */\r\n  }\r\n\r\n  #add-category-modal {\r\n    width: 100%;\r\n    height: 16rem;\r\n    top: -40%;\r\n  }\r\n\r\n  #category-dropdown {\r\n    padding: 0.5rem 1rem;\r\n  }\r\n}\r\n\r\n/* Desktop view */\r\n@media (min-width: 769px) {\r\n  #burger-icon {\r\n    display: none;\r\n  }\r\n\r\n  aside {\r\n    display: block;\r\n    width: 25%;\r\n  }\r\n}\r\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"@font-face {\\r\\n  font-family: \\\"Inter\\\";\\r\\n  src: url(\\\"./fonts/Inter-VariableFont_opsz,wght.ttf\\\");\\r\\n}\\r\\n\\r\\n:root {\\r\\n  font-family: \\\"Inter\\\";\\r\\n\\r\\n  /* Colors */\\r\\n  --primary: lightblue;\\r\\n  --secondary: #9022f1; \\r\\n  --light: #ffffff;\\r\\n  --medium: #fefefe;\\r\\n  --dark: #f2f2f2;\\r\\n  --very-dark: #7a7a7a;\\r\\n  \\r\\n  --border-radius: 0.25rem;\\r\\n\\r\\n  --task-height: 6rem;\\r\\n}\\r\\n\\r\\n* {\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\nhtml, body {\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n  height: auto;\\r\\n  min-height: 100%;\\r\\n  width: 100%;\\r\\n\\r\\n  display: flex;\\r\\n\\r\\n  overflow-x: hidden; /* Prevent horizontal scrolling */\\r\\n}\\r\\n\\r\\n/* Aside */\\r\\naside {\\r\\n  height: auto;\\r\\n  width: 25%;\\r\\n\\r\\n  background-color: var(--dark);\\r\\n\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  /* justify-content: space-between; */\\r\\n}\\r\\n\\r\\n/* Logo */\\r\\n#logo-container {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  gap: 0.5rem;\\r\\n\\r\\n  padding: 0 1rem;\\r\\n}\\r\\n\\r\\n#logo-container > img {\\r\\n  width: 3rem;\\r\\n  height: 3rem;\\r\\n}\\r\\n\\r\\n/* Add some gradient to the text */\\r\\n#logo-container > h1 {\\r\\n  font-size: 2rem;\\r\\n  color: var(--very-dark);\\r\\n  \\r\\n  /* background: -webkit-linear-gradient(black, var(--secondary));\\r\\n  -webkit-background-clip: text;\\r\\n  -webkit-text-fill-color: transparent; */\\r\\n}\\r\\n\\r\\n\\r\\n#categories-menu {\\r\\n  margin-top: 8rem;\\r\\n  padding: 0;\\r\\n\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  gap: 0rem;\\r\\n}\\r\\n\\r\\n/* Add bottom border below the main all tasks link */\\r\\n#categories-menu li:first-child {\\r\\n  border-bottom: 1px solid lightgray; /* Only apply the bottom border */\\r\\n\\r\\n  margin-bottom: 1rem;\\r\\n  padding-bottom: 1rem;\\r\\n  \\r\\n}\\r\\n\\r\\n/* Menu list item */\\r\\n#categories-menu li {\\r\\n  height: 3rem;\\r\\n  list-style: none;\\r\\n\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n#categories-menu li button {\\r\\n  text-decoration: none;\\r\\n  color: black;\\r\\n\\r\\n  border: none;\\r\\n\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n\\r\\n  text-align: left;\\r\\n  font-size: 1.125rem;\\r\\n\\r\\n  padding: 0 1rem;\\r\\n\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n}\\r\\n\\r\\n/* Three dots icon */\\r\\n#categories-menu li img {\\r\\n  width: 2rem;\\r\\n  margin: 0 0.5rem;\\r\\n}\\r\\n\\r\\n/* Three dots icon on hover */\\r\\n#categories-menu li img:hover {\\r\\n  background-color: var(--dark);\\r\\n  border-radius: 999px;\\r\\n  transition: background-color .2s ease;\\r\\n\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n#categories-menu li button:hover {\\r\\n  background-color: var(--primary);\\r\\n  transition: background-color .1s ease;\\r\\n}\\r\\n\\r\\n.menu-active {\\r\\n  background-color: var(--primary); /* You can style this as needed */\\r\\n  color: white;\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n/* Main body */\\r\\nmain {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  \\r\\n  width: 100%;\\r\\n\\r\\n  box-shadow: 1px 1px 5px gray;\\r\\n}\\r\\n\\r\\n#main-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n\\r\\n  width: 100%;\\r\\n\\r\\n  padding: 0rem 10%;\\r\\n}\\r\\n\\r\\nheader {\\r\\n  height: 12rem;\\r\\n  width: 100%;\\r\\n\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: flex-end;\\r\\n\\r\\n  /* Background color */\\r\\n  background: rgb(2,0,36);\\r\\n  background: linear-gradient(30deg, rgba(211, 0, 169, 0.513) 0%, rgba(9, 9, 121, 0.464) 35%, rgb(23, 207, 72) 100%);\\r\\n\\r\\n  /* Font color */\\r\\n  color: white;\\r\\n\\r\\n  padding: 0;\\r\\n\\r\\n  box-shadow: 0px 1px 5px gray;\\r\\n}\\r\\n\\r\\n#header {\\r\\n  font-size: 3rem;\\r\\n  padding-left: 1rem;\\r\\n}\\r\\n\\r\\n#content {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  gap: 1rem;\\r\\n\\r\\n  padding: 0 1rem 1rem 1rem;\\r\\n  margin: 0;\\r\\n  overflow-x: hidden;\\r\\n}\\r\\n\\r\\n#task-form {\\r\\n  background-color: var(--dark);\\r\\n\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n\\r\\n  border-radius: var(--border-radius);\\r\\n  box-shadow: 0px 1px 5px gray;\\r\\n\\r\\n  padding: 1rem 1.5rem 1rem 2rem;\\r\\n  margin: 1rem;\\r\\n\\r\\n  /* height: auto; */\\r\\n  /* height: var(--task-height); */\\r\\n}\\r\\n\\r\\n#submit-task-note {\\r\\n  margin: -0.5rem 0rem 1rem 1rem;\\r\\n  color: gray;\\r\\n}\\r\\n\\r\\n#submit-task-keyboard-shortcut {\\r\\n  background-color: var(--dark);\\r\\n  padding: 0.1rem 0.2rem;\\r\\n  font-weight: 500;\\r\\n  border-radius: 0.2rem;\\r\\n}\\r\\n\\r\\n#task-form-section {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: space-between;\\r\\n  width: 80%;\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n#task-form-section textarea[name=title] {\\r\\n  font-size: 1.5rem;\\r\\n  width: 100%;\\r\\n\\r\\n  padding: 0.5rem 1rem;\\r\\n\\r\\n  /* Remove background */\\r\\n  background-color: var(--dark);\\r\\n  border: none;\\r\\n\\r\\n  /* Remove radius */\\r\\n  border-radius: 0px;\\r\\n\\r\\n  font-family: inherit;\\r\\n\\r\\n  box-sizing: border-box;\\r\\n  resize: none;\\r\\n\\r\\n    /* Prevent scrollbars */\\r\\n    overflow: hidden;\\r\\n    white-space: pre-wrap; /* Allow text to wrap */\\r\\n    word-wrap: break-word; /* Ensure long words wrap properly */\\r\\n}\\r\\n\\r\\n/* Add styling for when textarea content exceeds the height */\\r\\n#task-form-section textarea:valid {\\r\\n  height: auto; /* Automatically adjust height based on content */\\r\\n  min-height: 3rem;\\r\\n}\\r\\n\\r\\n#task-form-section textarea[name=title]:hover {\\r\\n  background-color: var(--light);\\r\\n}\\r\\n\\r\\n#task-form-section textarea[name=title]:focus {\\r\\n  outline: none;\\r\\n}\\r\\n\\r\\n\\r\\n#task-form-date-category {\\r\\n  display: flex;\\r\\n  gap: 1rem;\\r\\n}\\r\\n\\r\\n#task-form-date-category input {\\r\\n  color: gray;\\r\\n\\r\\n  min-height: 2rem;\\r\\n  font-size: 1rem;\\r\\n\\r\\n  /* Remove background */\\r\\n  background-color: var(--dark);\\r\\n  border: none;\\r\\n  \\r\\n  /* Make input and select the same size */\\r\\n  box-sizing: border-box;\\r\\n  padding: 0 1rem;\\r\\n  line-height: 1.2;\\r\\n  vertical-align: middle;\\r\\n}\\r\\n\\r\\n#task-form-date-category input:hover {\\r\\n  background-color: var(--light);\\r\\n}\\r\\n\\r\\n/* Remove the border that appears on focus */\\r\\n#task-form-date-category input:focus {\\r\\n  outline: none;\\r\\n}\\r\\n\\r\\n/* Date input custom styles */\\r\\n/* Wrapper for positioning the custom icon */\\r\\n#date-input-wrapper {\\r\\n  position: relative;\\r\\n  display: inline-block;\\r\\n  width: 12rem;\\r\\n}\\r\\n\\r\\n/* Date input styling */\\r\\n#date-input-wrapper input[type=\\\"date\\\"] {\\r\\n  padding: 0.5rem 1rem;\\r\\n  padding-left: 3rem; /* Space for the custom icon */\\r\\n  font-size: 1.125rem;\\r\\n  border-radius: 4px;\\r\\n  width: 100%;\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\n/* Hide the default icon */\\r\\n#date-input-wrapper input[type=\\\"date\\\"]::-webkit-calendar-picker-indicator {\\r\\n  opacity: 0;\\r\\n  /* Move the standard symbol right over the custom one */\\r\\n  position: relative;\\r\\n  right: 8.5rem; \\r\\n  cursor: pointer;\\r\\n\\r\\n  width: 1rem;\\r\\n}\\r\\n\\r\\n/* Custom icon that can be clicked */\\r\\n#date-input-wrapper::before {\\r\\n  /* Unicode for a calendar icon 📅 */\\r\\n  content: '\\\\1F4C5'; \\r\\n  position: absolute;\\r\\n  left: 0.8rem;\\r\\n  top: 50%;\\r\\n  transform: translateY(-50%);\\r\\n  font-size: 1.25rem;\\r\\n  /* Prevent interference with icon interaction */\\r\\n  pointer-events: none; \\r\\n  color: #888;\\r\\n}\\r\\n\\r\\n\\r\\n/* Category dropdown */\\r\\n/* Wrapper to position the custom chevron */\\r\\n#category-dropdown {\\r\\n  position: relative;\\r\\n  width: fit-content;\\r\\n  \\r\\n  font-size: 1.125rem;\\r\\n  color: #808080;\\r\\n\\r\\n  /* Remove the default chevron */\\r\\n  appearance: none; \\r\\n  -webkit-appearance: none;\\r\\n  -moz-appearance: none;\\r\\n\\r\\n  background-color: var(--dark);\\r\\n  border: none;\\r\\n  border-radius: 4px;\\r\\n  padding: 0.5rem;\\r\\n  box-sizing: border-box;\\r\\n  cursor: pointer; \\r\\n}\\r\\n\\r\\n#category-dropdown:hover {\\r\\n  background-color: var(--light);\\r\\n}\\r\\n\\r\\n/* Remove the border that appears on focus */\\r\\n#category-dropdown:focus {\\r\\n  outline: none;\\r\\n}\\r\\n\\r\\n#button-container {\\r\\n  display: flex;\\r\\n  width: 3rem;\\r\\n  \\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n#new-task-button {\\r\\n  font-size: 3rem;\\r\\n  color: gray;\\r\\n  background-color: var(--light);\\r\\n  border-radius: var(--border-radius);\\r\\n\\r\\n  height: 3rem;\\r\\n  width: 3rem;\\r\\n\\r\\n  border: none;\\r\\n  user-select: none;\\r\\n\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n#new-task-button:hover {\\r\\n  background-color: var(--primary);\\r\\n  color: var(--light);\\r\\n  transition: background-color .2s ease;\\r\\n}\\r\\n\\r\\n#new-task-button:focus {\\r\\n  background-color: var(--dark);\\r\\n}\\r\\n\\r\\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\r\\n/* Task */\\r\\n.task {\\r\\n  background-color: var(--dark);\\r\\n  box-shadow: 0px 1px 5px gray;\\r\\n\\r\\n  height: auto;\\r\\n  overflow: hidden;\\r\\n\\r\\n  border-radius: var(--border-radius);\\r\\n\\r\\n  padding: 1rem 1rem;\\r\\n\\r\\n  display: flex;\\r\\n  /* justify-content: space-between; */\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.task:hover {\\r\\n  box-shadow: 0px 1px 5px black;\\r\\n  transition: box-shadow .1s ease;\\r\\n}\\r\\n\\r\\n/* Checkbox */\\r\\n.task .status {\\r\\n  width: 2rem;\\r\\n  height: 2rem;\\r\\n  margin: 0 1rem;\\r\\n}\\r\\n\\r\\n.task-content {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  width: 95%;\\r\\n  padding-bottom: 0.125rem;\\r\\n}\\r\\n\\r\\n/* Task done style */\\r\\n.done {\\r\\n  text-decoration: line-through;\\r\\n  color: gray;\\r\\n  background-color: rgb(217, 217, 217);\\r\\n}\\r\\n\\r\\n.title {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n/* Checkbox */\\r\\n.status {\\r\\n  width: 4rem;\\r\\n  height: 4rem;\\r\\n  /* Use transform scale to increase the checkbox size */\\r\\n  /* transform: scale(1.5);  */\\r\\n  /* transform-origin: center; */\\r\\n\\r\\n  /* border-radius: 100%; */\\r\\n  vertical-align: middle;\\r\\n  border: 1px solid lightgray;\\r\\n  background-color: white;\\r\\n  appearance: none;\\r\\n  -webkit-appearance: none;\\r\\n  outline: none;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.status:hover {\\r\\n  background-color: var(--primary);\\r\\n  color: var(--light);\\r\\n  transition: background-color .2s ease;\\r\\n}\\r\\n\\r\\n.status:checked {\\r\\n  /* background-color: var(--secondary); */\\r\\n  /* color: var(--light); */\\r\\n  appearance: auto;\\r\\n  /* clip-path: circle(50% at 50% 50%); */\\r\\n  border-radius: 100%;\\r\\n}\\r\\n\\r\\n.date-category-container {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n\\r\\n  gap: 1rem;\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n  color: var(--very-dark);\\r\\n}\\r\\n\\r\\n.date-category-container > p {\\r\\n  margin: 0.5rem 0;\\r\\n  height: 1.5rem;\\r\\n\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n\\r\\n  white-space: pre-wrap; /* Allow text to wrap */\\r\\n  word-wrap: break-word; /* Ensure long words wrap properly */\\r\\n}\\r\\n\\r\\n/* Add some styles for the category */\\r\\n.category {\\r\\n  background-color: #e6e6e6;\\r\\n  padding: 0.125rem 0.5rem;\\r\\n  border-radius: var(--border-radius);\\r\\n\\r\\n}\\r\\n\\r\\n.due-date-container {\\r\\n  background-color: #e6e6e6;\\r\\n  padding: 0.125rem 0.5rem;\\r\\n  border-radius: var(--border-radius);\\r\\n\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n\\r\\n  gap: 0.5rem;\\r\\n  height: 1.5rem;\\r\\n}\\r\\n.due-date-container > img {\\r\\n  width: 1.125rem;\\r\\n}\\r\\n\\r\\n/* .task-chevron{\\r\\n  display: flex;\\r\\n\\r\\n  width: 3rem;\\r\\n  height: 3rem;\\r\\n  stroke: var(--very-dark);\\r\\n\\r\\n  border-radius: var(--border-radius);\\r\\n\\r\\n  border: none;\\r\\n  user-select: none;\\r\\n\\r\\n  cursor: pointer;\\r\\n\\r\\n  margin-right: 1rem;\\r\\n} */\\r\\n\\r\\n/* ******************************************************** */\\r\\n/* Modal */\\r\\n/* Dark overlay with modal */\\r\\n#add-category-modal::backdrop {\\r\\n  background: rgba(0, 0, 0, 0.2);\\r\\n  animation: fade-in 0.2s ease-in-out;\\r\\n}\\r\\n\\r\\n@keyframes fade-in {\\r\\n  from {\\r\\n    opacity: 0;\\r\\n  }\\r\\n  to {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n\\r\\n#add-category-modal {\\r\\n  border: none;\\r\\n  font-size: 1.25rem;\\r\\n\\r\\n  padding: 2rem;\\r\\n\\r\\n  box-shadow: 0px 1px 5px gray;\\r\\n  border-radius: var(--border-radius);\\r\\n}\\r\\n\\r\\n#add-category-modal > form {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  gap: 2rem;\\r\\n\\r\\n  justify-content: space-between;\\r\\n}\\r\\n\\r\\n#category-modal-header {\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  gap: 1rem;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n#category-modal-header > h2 {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n#category-modal-fields {\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  gap: 1rem;\\r\\n}\\r\\n\\r\\n#category-modal-fields > div {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n}\\r\\n\\r\\n/* Make emoji input small, category long */\\r\\n#category-modal-fields > div:first-child {\\r\\n  width: 25%;\\r\\n}\\r\\n\\r\\n#category-modal-fields > div:last-child {\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\n/* Styles for the emoji input */\\r\\n#category-modal-fields button[name=emoji] {\\r\\n  font-size: 2rem;\\r\\n\\r\\n  border: none;\\r\\n  background: none;\\r\\n  padding: none;\\r\\n\\r\\n  text-align: center;\\r\\n  line-height: 2.5rem;\\r\\n}\\r\\n\\r\\n#category-modal-fields button[name=emoji]:hover { \\r\\n  background-color: var(--dark);\\r\\n}\\r\\n\\r\\n\\r\\n.category-modal-button {\\r\\n  border: none;\\r\\n  width: 4rem;\\r\\n  height: 2rem;\\r\\n\\r\\n  font-size: 1.25rem;\\r\\n}\\r\\n\\r\\n.category-modal-button:hover {\\r\\n  background-color: var(--very-dark);\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n#category-modal-fields input {\\r\\n  font-size: 1.25rem;\\r\\n\\r\\n  padding: 0.5rem;\\r\\n}\\r\\n\\r\\nemoji-picker {\\r\\n  position: absolute;\\r\\n}\\r\\n\\r\\n\\r\\n/* Mobile view */\\r\\n/* Hide aside and show burger icon on mobile screens */\\r\\n@media (max-width: 768px) {\\r\\n  aside {\\r\\n    transform: translateX(-100%); /* Hide the sidebar off-screen */\\r\\n    transition: transform 0.3s ease;\\r\\n    position: fixed;\\r\\n    height: 100%;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    background-color: var(--dark);\\r\\n    z-index: 1000;\\r\\n    width: 100%;\\r\\n\\r\\n    /* Toggle scrolling of the menu */\\r\\n    overflow-y: auto; /* Allow scrolling inside the side menu */\\r\\n  }\\r\\n\\r\\n  #burger-icon {\\r\\n    position: absolute;\\r\\n    height: 4rem;\\r\\n    right: 15px;\\r\\n    top: 10px;\\r\\n    color: white;\\r\\n    cursor: pointer;\\r\\n  }\\r\\n\\r\\n  /* Hide aside when not open */\\r\\n  .aside-open aside {\\r\\n    transform: translateX(0);\\r\\n  }\\r\\n\\r\\n  #categories-menu li:first-child {\\r\\n    padding: 2rem 0 3rem 0;\\r\\n  }\\r\\n\\r\\n  #categories-menu li {\\r\\n    padding: 2rem 0;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  #categories-menu li img {\\r\\n    width: 3rem;\\r\\n    margin: 0 1rem;\\r\\n  }\\r\\n\\r\\n  #categories-menu li button {\\r\\n    font-size: 1.5rem;\\r\\n  }\\r\\n\\r\\n  #main-container {\\r\\n    width: 100%;\\r\\n    padding: 0;\\r\\n\\r\\n  }\\r\\n\\r\\n\\r\\n  /* Task styles */\\r\\n  .task {\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  /* On mobile, hide the keyboard shortcut note */\\r\\n  #submit-task-note {\\r\\n    display: none;\\r\\n  }\\r\\n  /* In mobile, move date and category down as a column */\\r\\n  #task-form-date-category { \\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 0;\\r\\n  }\\r\\n\\r\\n  /* In mobile, show these under each other for more horizontal space */\\r\\n  .date-category-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: flex-start;\\r\\n    gap: 0rem;\\r\\n  }\\r\\n\\r\\n  /* Move the create button down */\\r\\n  #task-form {\\r\\n    flex-direction: column;\\r\\n    gap: 1rem;\\r\\n    padding: 1rem 0;\\r\\n  }\\r\\n\\r\\n  #task-form-section {\\r\\n    width: 95%;\\r\\n  }\\r\\n\\r\\n  .title {\\r\\n    font-size: 1rem;\\r\\n\\r\\n    margin-bottom: 1rem;\\r\\n  }\\r\\n\\r\\n  .task .status {\\r\\n    margin-left: 0rem;\\r\\n    margin-right: 1rem;\\r\\n\\r\\n    /* align-self: start; */\\r\\n  }\\r\\n\\r\\n  #add-category-modal {\\r\\n    width: 100%;\\r\\n    height: 16rem;\\r\\n    top: -40%;\\r\\n  }\\r\\n\\r\\n  #category-dropdown {\\r\\n    padding: 0.5rem 1rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n/* Desktop view */\\r\\n@media (min-width: 769px) {\\r\\n  #burger-icon {\\r\\n    display: none;\\r\\n  }\\r\\n\\r\\n  aside {\\r\\n    display: block;\\r\\n    width: 25%;\\r\\n  }\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./src/styles.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanM/MjRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^['\"].*['\"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/[\"'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return \"\\\"\".concat(url.replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\"), \"\\\"\");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanM/MWRlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/getUrl.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/sourceMaps.js\n");

/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ \"./node_modules/css-loader/dist/cjs.js!./src/styles.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUErRjtBQUMvRixNQUFxRjtBQUNyRixNQUE0RjtBQUM1RixNQUErRztBQUMvRyxNQUF3RztBQUN4RyxNQUF3RztBQUN4RyxNQUFvRztBQUNwRztBQUNBOztBQUVBOztBQUVBLDRCQUE0QixxR0FBbUI7QUFDL0Msd0JBQXdCLGtIQUFhO0FBQ3JDLGlCQUFpQix1R0FBYTtBQUM5QixpQkFBaUIsK0ZBQU07QUFDdkIsNkJBQTZCLHNHQUFrQjs7QUFFL0MsYUFBYSwwR0FBRyxDQUFDLHVGQUFPOzs7O0FBSThDO0FBQ3RFLE9BQU8saUVBQWUsdUZBQU8sSUFBSSx1RkFBTyxVQUFVLHVGQUFPLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanMtdGVtcGxhdGUvLi9zcmMvc3R5bGVzLmNzcz80NGIyIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/styles.css\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcz8yZGJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcz9iMjE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertBySelector.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzP2RlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertStyleElement.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcz9kZGNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleDomAPI.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleTagTransform.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNewCategory: () => (/* binding */ addNewCategory),\n/* harmony export */   editCategory: () => (/* binding */ editCategory),\n/* harmony export */   showAllCategories: () => (/* binding */ showAllCategories),\n/* harmony export */   showCategory: () => (/* binding */ showCategory),\n/* harmony export */   updateTaskStatus: () => (/* binding */ updateTaskStatus)\n/* harmony export */ });\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.css */ \"./src/styles.css\");\n/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page */ \"./src/page.js\");\n/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localStorage */ \"./src/localStorage.js\");\n/* harmony import */ var _img_favicon_ico__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./img/favicon.ico */ \"./src/img/favicon.ico\");\n/* harmony import */ var _img_burger_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./img/burger.svg */ \"./src/img/burger.svg\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet tasks = [];\r\nlet categories = [];\r\n\r\nclass Task {\r\n  constructor(id, title, dueDate, category) {\r\n    this.id = id; // Unique ID\r\n    this.title = title;\r\n    // this.description = description;\r\n    this.dueDate = dueDate;\r\n    this.category = category;\r\n    this.isDone = false;\r\n  }\r\n}\r\n\r\nclass Category {\r\n  constructor(id, name, emoji) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.emoji = emoji;\r\n  }\r\n}\r\n\r\n// Main content div\r\nconst content = document.getElementById('content');\r\n\r\nwindow.onload = function() {\r\n  // Load favicon\r\n  const favicon = document.createElement('link');\r\n  favicon.rel = 'icon';\r\n  favicon.href= _img_favicon_ico__WEBPACK_IMPORTED_MODULE_3__;\r\n  favicon.type = 'image/x-icon'\r\n  const head = document.querySelector('head');\r\n  head.append(favicon);\r\n\r\n  const header = document.querySelector('header');\r\n  const burger = document.createElement('img');\r\n  burger.src = _img_burger_svg__WEBPACK_IMPORTED_MODULE_4__;\r\n  burger.alt = 'Open sidemenu';\r\n  burger.id = 'burger-icon';\r\n  header.append(burger);\r\n\r\n  // Toggling the sidebar on mobile\r\n  const body = document.body;\r\n  burger.addEventListener('click', () => {\r\n    body.classList.toggle('aside-open'); // This will toggle the sidebar visibility\r\n  });\r\n  \r\n\r\n  // Dynamically adjust the height of the form when user types\r\n  const textarea = document.querySelector('textarea[name=\"title\"]');\r\n  textarea.addEventListener('input', () => {\r\n    // Dynamically adjust the height based on content\r\n    textarea.style.height = 'auto';\r\n    textarea.style.height = textarea.scrollHeight + 'px';\r\n  });\r\n\r\n  // When title is clicked, select all in the field\r\n  const titleInput = document.querySelector('textarea[name=title]');\r\n  titleInput.addEventListener('click', () => {\r\n    titleInput.select();\r\n  })\r\n\r\n  // New task button listener\r\n  const newTaskButton = document.getElementById('new-task-button');\r\n  newTaskButton.addEventListener('click', (event) => {\r\n    event.preventDefault();\r\n    createNewTask();\r\n\r\n    // Reset form height\r\n    textarea.style.height = '5rem';\r\n    textarea.value = '';\r\n  });\r\n\r\n  // Listen for keydown events in the textarea\r\n  textarea.addEventListener('keydown', (event) => {\r\n    // Check if Enter key is pressed along with Ctrl (Windows/Linux) or Cmd (Mac)\r\n    if ((event.ctrlKey || event.metaKey) && event.key === 'Enter') {\r\n      event.preventDefault(); // Prevent default behavior (like adding a new line)\r\n      // Trigger task creation\r\n      createNewTask();\r\n\r\n      // Reset form height\r\n      textarea.style.height = '5rem';\r\n      textarea.value = '';\r\n    }\r\n  });\r\n\r\n\r\n\r\n  // Add event listeners to close the sidebar if a category is clicked (optional)\r\n  const categoriesMenu = document.getElementById('categories-menu');\r\n  categoriesMenu.addEventListener('click', () => {\r\n    body.classList.remove('aside-open'); // Close the sidebar after selecting a category\r\n  });\r\n\r\n  // Load tasks from local storage\r\n  tasks = (0,_localStorage__WEBPACK_IMPORTED_MODULE_2__.loadTasksFromLocal)();\r\n  console.log(tasks);\r\n  \r\n  // Show all categories by default\r\n  showAllCategories();\r\n\r\n  // Load categories from local storage\r\n  // generateTestData();\r\n  categories = (0,_localStorage__WEBPACK_IMPORTED_MODULE_2__.loadCategoriesFromLocal)();\r\n  console.log(categories);\r\n\r\n  // Populate categories on page, in dropdowns and in menu\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.generateCategoriesMenu(categories);\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.generateCategoriesDropdownMarkup(categories);\r\n\r\n  // Set the task creation note, based on if user using mac or windows\r\n  const shortcutNote = document.getElementById('submit-task-keyboard-shortcut');\r\n  if (window.navigator.userAgentData.platform == 'macOS') // Check if user on Mac\r\n    shortcutNote.innerText = '⌘ + Enter';\r\n  else { // Else, control key\r\n    shortcutNote.innerText = 'Ctrl + Enter';\r\n  }\r\n}\r\n\r\n// Creates new category, adds it to categories array, closes the modal\r\nfunction addNewCategory() {\r\n  const form = document.getElementById('add-category-modal-form');\r\n\r\n  // Add validations to the form\r\n  if (!form.checkValidity()) {\r\n    form.reportValidity();\r\n    return;\r\n  }\r\n\r\n  // Get values from the form\r\n  const emoji = document.getElementById('category-emoji-button').innerText;\r\n  let name = document.querySelector('input[name=\"name\"]').value;\r\n\r\n  // Capitalize the name\r\n  name = name.charAt(0).toUpperCase() + name.slice(1);\r\n\r\n  const id = Date.now();\r\n\r\n  // Create new category\r\n  const category = new Category (\r\n    id,\r\n    name,\r\n    emoji\r\n  );\r\n\r\n  // Push to array\r\n  categories.push(category);\r\n\r\n  // Update local storage\r\n  (0,_localStorage__WEBPACK_IMPORTED_MODULE_2__.saveCategoriesToLocal)(categories);\r\n\r\n  // Update the sidebar\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.generateCategoriesMenu(categories);\r\n\r\n  // Update the dropdown\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.generateCategoriesDropdownMarkup(categories);\r\n\r\n  // Close this modal\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.closeModal('add-category-modal');\r\n}\r\n\r\nfunction createNewTask() {\r\n  // Get values from the form\r\n  const form = document.getElementById('task-form');\r\n\r\n  // Add validations to the form\r\n  if (!form.checkValidity()) {\r\n    form.reportValidity();\r\n    return;\r\n  }\r\n  \r\n  const id = Date.now(); // Use current time as unique ID\r\n  const titleInput = document.querySelector('textarea[name=title]');\r\n  const dueDate = document.querySelector('input[name=due-date]').value;\r\n  const category = document.querySelector('select[name=category]').value;\r\n\r\n  // Create new object\r\n  let task = new Task(\r\n    id,\r\n    titleInput.value,\r\n    dueDate,\r\n    category\r\n  );\r\n\r\n  // Add to array\r\n  tasks.push(task);\r\n\r\n  // Generate markup\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.generateTaskMarkup(task);\r\n\r\n  // Clear the form\r\n  titleInput.value = '';\r\n  titleInput.focus();\r\n\r\n  // Save tasks to local storage\r\n  (0,_localStorage__WEBPACK_IMPORTED_MODULE_2__.saveTasksToLocal)(tasks);\r\n}\r\n\r\n// Updates task status on click\r\nfunction updateTaskStatus(event) {\r\n  const checkbox = event.target;\r\n  const taskId = checkbox.getAttribute('data-id');\r\n\r\n  // t.id === taskId will give false, since === also checks the type\r\n  // t.id is a number, taskId is a string\r\n  // Solution 1: use ==, which does the conversions by itself\r\n  // Solution 2: use === Number(taskId) to convert to number\r\n  const task = tasks.find(t => t.id == taskId);\r\n  \r\n  if (task) {\r\n    task.isDone = checkbox.checked;\r\n    console.log(`Task \"${task.title}\" updated. Completed: ${task.isDone}`);\r\n\r\n    // Update local storage\r\n    (0,_localStorage__WEBPACK_IMPORTED_MODULE_2__.saveTasksToLocal)(tasks);\r\n\r\n    // Set the done class to the task to mark it as done on screen\r\n    const taskContainer = checkbox.closest('.task'); // Find the parent container of the task\r\n    if (task.isDone) {\r\n      taskContainer.classList.add('done');\r\n      console.log(\"added done\");\r\n      \r\n    } else {\r\n      taskContainer.classList.remove('done');\r\n    }\r\n  }\r\n}\r\n\r\nfunction showCategory(category) {\r\n  // Filter tasks of a project\r\n  const categoryTasks = tasks.filter(t => t.category == category.id);\r\n\r\n  // Populate tasks on the page\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.regenerateAllTasksMarkup(categoryTasks);\r\n\r\n  // Update page header\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.updatePageHeader(`${category.emoji} ${category.name}`);\r\n}\r\n\r\nfunction showAllCategories() {\r\n  // Populate tasks on the page\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.regenerateAllTasksMarkup(tasks);\r\n\r\n  // Update page header\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.updatePageHeader('Todo List');\r\n}\r\n\r\nfunction editCategory(categoryId) {\r\n  const form = document.getElementById('add-category-modal-form');\r\n  \r\n  // Add validations to the form\r\n  if (!form.checkValidity()) {\r\n    form.reportValidity();\r\n    return;\r\n  }\r\n\r\n  // Get values from the form\r\n  const newEmoji = document.getElementById('category-emoji-button').innerText;\r\n  let newName = document.querySelector('input[name=\"name\"]').value;\r\n\r\n  // Capitalize the name\r\n  newName = newName.charAt(0).toUpperCase() + newName.slice(1);\r\n\r\n  // Find category in the array and update it\r\n  const category = categories.find(c => c.id == categoryId);\r\n  category.name = newName;\r\n  category.emoji = newEmoji;\r\n\r\n  // Update local storage\r\n  (0,_localStorage__WEBPACK_IMPORTED_MODULE_2__.saveCategoriesToLocal)(categories);\r\n\r\n  // Update the sidebar\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.generateCategoriesMenu(categories);\r\n\r\n  // Update the dropdown\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.generateCategoriesDropdownMarkup(categories);\r\n\r\n  // Close this modal\r\n  _page__WEBPACK_IMPORTED_MODULE_1__.closeModal('add-category-modal');\r\n}\r\n\r\n// function generateTestData() {\r\n\r\n//   let task1 = new Task(\r\n//     \"finish writing this class\",\r\n//     \"put updatePage in it like title, desc, due date, status\",\r\n//     \"2024-10-15\"\r\n//   );\r\n//   let task2 = new Task(\r\n//     \"Second task\",\r\n//     \"Some other stuff: title, desc, due date, status\",\r\n//     \"2024-10-15\"\r\n//   );\r\n  \r\n//   tasks.push(task1);\r\n//   tasks.push(task2);\r\n\r\n\r\n//   updatePage.generateTaskMarkup(task1);\r\n//   // generateTaskMarkup(task2);\r\n\r\n//   let cat1 = new Category(\r\n//     \"Sport\",\r\n//     \"🤾\"\r\n//   );\r\n//   let cat2 = new Category(\r\n//     \"Programming\",\r\n//     \"💻\"\r\n//   );\r\n//   categories.push(cat1, cat2);\r\n// }\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/localStorage.js":
/*!*****************************!*\
  !*** ./src/localStorage.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCategoryById: () => (/* binding */ getCategoryById),\n/* harmony export */   loadCategoriesFromLocal: () => (/* binding */ loadCategoriesFromLocal),\n/* harmony export */   loadTasksFromLocal: () => (/* binding */ loadTasksFromLocal),\n/* harmony export */   saveCategoriesToLocal: () => (/* binding */ saveCategoriesToLocal),\n/* harmony export */   saveTasksToLocal: () => (/* binding */ saveTasksToLocal)\n/* harmony export */ });\n// Loads tasks from local storage and returns it or empty array, if not found\r\nfunction loadTasksFromLocal() {\r\n  // Retrieve categories\r\n  const savedTasks = localStorage.getItem('tasks');\r\n\r\n  // If result is valid, parse it, otherwise return an empty array\r\n  try {\r\n    return savedTasks ? JSON.parse(savedTasks) : [];\r\n  } catch (error) {\r\n    console.error(\"Error parsing categories from localStorage:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Loads categories from local storage and returns it or empty array, if not found\r\nfunction loadCategoriesFromLocal() {\r\n  // Retrieve categories\r\n  let savedCategories = localStorage.getItem('categories');\r\n\r\n  // If result is valid, parse it, otherwise return an empty array\r\n  try {\r\n    return savedCategories ? JSON.parse(savedCategories) : [];\r\n  } catch (error) {\r\n    console.error(\"Error parsing categories from localStorage:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Updates the tasks saved locally by removing the previous and resaving it\r\nfunction saveTasksToLocal(tasks) {\r\n  // Check if tasks already exists, if yes, remove it\r\n  if (localStorage.getItem('tasks')) {\r\n    localStorage.removeItem('tasks');\r\n  }\r\n\r\n  // Stringify the tasks array and save it\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n\r\n  console.log(\"Categories saved to local:\", localStorage.getItem('tasks'));\r\n}\r\n\r\n// Updates the categories saved locally by removing the previous and resaving it\r\nfunction saveCategoriesToLocal(categories) {\r\n  // Check if categories already exists, if yes, remove it\r\n  if (localStorage.getItem('categories')) {\r\n    localStorage.removeItem('categories');\r\n  }\r\n\r\n  // Stringify the tasks array and save it\r\n  localStorage.setItem(\"categories\", JSON.stringify(categories));\r\n\r\n  console.log(\"Categories saved to local:\", categories);\r\n}\r\n\r\n// Looks for a category in local storage by id and returns it, if found.\r\nfunction getCategoryById(categoryId) {\r\n  // Retrieve\r\n  const storedCategories = localStorage.getItem('categories');\r\n\r\n  // Check if categories exists\r\n  if (!storedCategories) {\r\n    console.log(`Category id:${categoryId} not found in local storage!`);\r\n    return null;\r\n  }\r\n\r\n  // Parse and find\r\n  const categories = JSON.parse(storedCategories)\r\n  const category = categories.find(c => c.id == categoryId);\r\n\r\n  if (category) {\r\n    return category;\r\n  } else {\r\n    console.log(`Category with id: ${categoryId} not found!`);\r\n    return null;\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbG9jYWxTdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFlBQVk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLHFDQUFxQyxZQUFZO0FBQ2pEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLXRlbXBsYXRlLy4vc3JjL2xvY2FsU3RvcmFnZS5qcz9mMmRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvYWRzIHRhc2tzIGZyb20gbG9jYWwgc3RvcmFnZSBhbmQgcmV0dXJucyBpdCBvciBlbXB0eSBhcnJheSwgaWYgbm90IGZvdW5kXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkVGFza3NGcm9tTG9jYWwoKSB7XHJcbiAgLy8gUmV0cmlldmUgY2F0ZWdvcmllc1xyXG4gIGNvbnN0IHNhdmVkVGFza3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGFza3MnKTtcclxuXHJcbiAgLy8gSWYgcmVzdWx0IGlzIHZhbGlkLCBwYXJzZSBpdCwgb3RoZXJ3aXNlIHJldHVybiBhbiBlbXB0eSBhcnJheVxyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gc2F2ZWRUYXNrcyA/IEpTT04ucGFyc2Uoc2F2ZWRUYXNrcykgOiBbXTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHBhcnNpbmcgY2F0ZWdvcmllcyBmcm9tIGxvY2FsU3RvcmFnZTpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuLy8gTG9hZHMgY2F0ZWdvcmllcyBmcm9tIGxvY2FsIHN0b3JhZ2UgYW5kIHJldHVybnMgaXQgb3IgZW1wdHkgYXJyYXksIGlmIG5vdCBmb3VuZFxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZENhdGVnb3JpZXNGcm9tTG9jYWwoKSB7XHJcbiAgLy8gUmV0cmlldmUgY2F0ZWdvcmllc1xyXG4gIGxldCBzYXZlZENhdGVnb3JpZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2F0ZWdvcmllcycpO1xyXG5cclxuICAvLyBJZiByZXN1bHQgaXMgdmFsaWQsIHBhcnNlIGl0LCBvdGhlcndpc2UgcmV0dXJuIGFuIGVtcHR5IGFycmF5XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBzYXZlZENhdGVnb3JpZXMgPyBKU09OLnBhcnNlKHNhdmVkQ2F0ZWdvcmllcykgOiBbXTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHBhcnNpbmcgY2F0ZWdvcmllcyBmcm9tIGxvY2FsU3RvcmFnZTpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuLy8gVXBkYXRlcyB0aGUgdGFza3Mgc2F2ZWQgbG9jYWxseSBieSByZW1vdmluZyB0aGUgcHJldmlvdXMgYW5kIHJlc2F2aW5nIGl0XHJcbmV4cG9ydCBmdW5jdGlvbiBzYXZlVGFza3NUb0xvY2FsKHRhc2tzKSB7XHJcbiAgLy8gQ2hlY2sgaWYgdGFza3MgYWxyZWFkeSBleGlzdHMsIGlmIHllcywgcmVtb3ZlIGl0XHJcbiAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrcycpKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGFza3MnKTtcclxuICB9XHJcblxyXG4gIC8vIFN0cmluZ2lmeSB0aGUgdGFza3MgYXJyYXkgYW5kIHNhdmUgaXRcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRhc2tzXCIsIEpTT04uc3RyaW5naWZ5KHRhc2tzKSk7XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiQ2F0ZWdvcmllcyBzYXZlZCB0byBsb2NhbDpcIiwgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rhc2tzJykpO1xyXG59XHJcblxyXG4vLyBVcGRhdGVzIHRoZSBjYXRlZ29yaWVzIHNhdmVkIGxvY2FsbHkgYnkgcmVtb3ZpbmcgdGhlIHByZXZpb3VzIGFuZCByZXNhdmluZyBpdFxyXG5leHBvcnQgZnVuY3Rpb24gc2F2ZUNhdGVnb3JpZXNUb0xvY2FsKGNhdGVnb3JpZXMpIHtcclxuICAvLyBDaGVjayBpZiBjYXRlZ29yaWVzIGFscmVhZHkgZXhpc3RzLCBpZiB5ZXMsIHJlbW92ZSBpdFxyXG4gIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2F0ZWdvcmllcycpKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnY2F0ZWdvcmllcycpO1xyXG4gIH1cclxuXHJcbiAgLy8gU3RyaW5naWZ5IHRoZSB0YXNrcyBhcnJheSBhbmQgc2F2ZSBpdFxyXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY2F0ZWdvcmllc1wiLCBKU09OLnN0cmluZ2lmeShjYXRlZ29yaWVzKSk7XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiQ2F0ZWdvcmllcyBzYXZlZCB0byBsb2NhbDpcIiwgY2F0ZWdvcmllcyk7XHJcbn1cclxuXHJcbi8vIExvb2tzIGZvciBhIGNhdGVnb3J5IGluIGxvY2FsIHN0b3JhZ2UgYnkgaWQgYW5kIHJldHVybnMgaXQsIGlmIGZvdW5kLlxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2F0ZWdvcnlCeUlkKGNhdGVnb3J5SWQpIHtcclxuICAvLyBSZXRyaWV2ZVxyXG4gIGNvbnN0IHN0b3JlZENhdGVnb3JpZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2F0ZWdvcmllcycpO1xyXG5cclxuICAvLyBDaGVjayBpZiBjYXRlZ29yaWVzIGV4aXN0c1xyXG4gIGlmICghc3RvcmVkQ2F0ZWdvcmllcykge1xyXG4gICAgY29uc29sZS5sb2coYENhdGVnb3J5IGlkOiR7Y2F0ZWdvcnlJZH0gbm90IGZvdW5kIGluIGxvY2FsIHN0b3JhZ2UhYCk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIFBhcnNlIGFuZCBmaW5kXHJcbiAgY29uc3QgY2F0ZWdvcmllcyA9IEpTT04ucGFyc2Uoc3RvcmVkQ2F0ZWdvcmllcylcclxuICBjb25zdCBjYXRlZ29yeSA9IGNhdGVnb3JpZXMuZmluZChjID0+IGMuaWQgPT0gY2F0ZWdvcnlJZCk7XHJcblxyXG4gIGlmIChjYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuIGNhdGVnb3J5O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZyhgQ2F0ZWdvcnkgd2l0aCBpZDogJHtjYXRlZ29yeUlkfSBub3QgZm91bmQhYCk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/localStorage.js\n");

/***/ }),

/***/ "./src/page.js":
/*!*********************!*\
  !*** ./src/page.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeModal: () => (/* binding */ closeModal),\n/* harmony export */   generateCategoriesDropdownMarkup: () => (/* binding */ generateCategoriesDropdownMarkup),\n/* harmony export */   generateCategoriesMenu: () => (/* binding */ generateCategoriesMenu),\n/* harmony export */   generateTaskMarkup: () => (/* binding */ generateTaskMarkup),\n/* harmony export */   regenerateAllTasksMarkup: () => (/* binding */ regenerateAllTasksMarkup),\n/* harmony export */   showEditCategoryModal: () => (/* binding */ showEditCategoryModal),\n/* harmony export */   showNewCategoryModal: () => (/* binding */ showNewCategoryModal),\n/* harmony export */   updatePageHeader: () => (/* binding */ updatePageHeader)\n/* harmony export */ });\n/* harmony import */ var emoji_picker_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! emoji-picker-element */ \"./node_modules/emoji-picker-element/index.js\");\n/* harmony import */ var _img_3dots_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./img/3dots.svg */ \"./src/img/3dots.svg\");\n/* harmony import */ var _img_calendar_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./img/calendar.svg */ \"./src/img/calendar.svg\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index */ \"./src/index.js\");\n/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./localStorage */ \"./src/localStorage.js\");\n\r\n\r\n// Import the 3 dots svg\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Updates the h1 in the header\r\nfunction updatePageHeader(text) {\r\n  const header = document.getElementById('header');\r\n  header.innerText = text;\r\n}\r\n\r\n// Regenerate all tasks\r\nfunction regenerateAllTasksMarkup(tasks) {\r\n  // Clear the previous\r\n  const content = document.getElementById('content');\r\n  content.innerHTML = '';\r\n  \r\n  // Populate tasks on the page\r\n  tasks.forEach(task => {\r\n    generateTaskMarkup(task);\r\n  });\r\n}\r\n\r\n// Load a new task in the DOM\r\nfunction generateTaskMarkup(task) {\r\n  \r\n  // Main container, contains status and content\r\n  const container = document.createElement('div');\r\n  container.classList.add('task');\r\n\r\n  // Status\r\n  const status = document.createElement('input');\r\n  status.classList.add('status');\r\n  status.type = 'checkbox';\r\n  // Set value according to \r\n  status.checked = task.isDone;\r\n  // Add the task ID to the checkbox\r\n  status.setAttribute('data-id', task.id);\r\n  // Add a listener for the checkbox, so task status could be updated if checked\r\n  status.addEventListener('click', _index__WEBPACK_IMPORTED_MODULE_3__.updateTaskStatus);\r\n\r\n  // If task is done, add the done class\r\n  if (task.isDone) {\r\n    container.classList.add('done');\r\n  }\r\n\r\n  // Container for content, contains everything else\r\n  const taskContent = document.createElement('div');\r\n  taskContent.classList.add('task-content');\r\n\r\n  // Header\r\n  const header = document.createElement('h2');\r\n  header.classList.add('title');\r\n  header.innerText = task.title;\r\n\r\n  // Container for category and date\r\n  const dateCategoryContainer = document.createElement('div');\r\n  dateCategoryContainer.classList.add('date-category-container');\r\n\r\n  // Category\r\n  const category = document.createElement('p');\r\n  category.classList.add('category');\r\n\r\n  // Fetch category by the id saved in task object to get the emoji and name\r\n  // Check if the category exists\r\n  const categoryValue = (0,_localStorage__WEBPACK_IMPORTED_MODULE_4__.getCategoryById)(task.category);\r\n  if (categoryValue) {\r\n    category.innerText = `${categoryValue.emoji} ${categoryValue.name}`;\r\n  } else {\r\n    category.innerText = '🗒️ No category'; // Fallback text for missing category\r\n  }\r\n  \r\n  // Add a div for due date to contain the icon and the text\r\n  const dueDateContainer = document.createElement('div');\r\n  dueDateContainer.classList.add(\"due-date-container\");\r\n  const calendar = document.createElement('img');\r\n  calendar.src = _img_calendar_svg__WEBPACK_IMPORTED_MODULE_2__;\r\n\r\n  const dueDate = document.createElement('p');\r\n  dueDate.classList.add('due-date');\r\n\r\n  // Check if due date exists\r\n  if (task.dueDate) {\r\n    // Format the date\r\n    const formattedDate = new Date(task.dueDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });\r\n    dueDate.innerText = formattedDate;\r\n  } else {\r\n    dueDate.innerHTML = 'No due date';\r\n  }\r\n\r\n  dueDateContainer.append(calendar, dueDate);\r\n\r\n  dateCategoryContainer.append(category, dueDateContainer);\r\n  taskContent.append(header, dateCategoryContainer);\r\n  container.append(status, taskContent);\r\n\r\n  // Insert to the top of the list\r\n  content.insertBefore(container, content.firstChild);\r\n}\r\n\r\n// Populate the categories\r\nfunction generateCategoriesDropdownMarkup(categories) {\r\n  const dropdown = document.getElementById('category-dropdown');\r\n\r\n  // Clear existing\r\n  dropdown.innerHTML = '';\r\n\r\n  // Add default option\r\n  const defaultOption = document.createElement('option');\r\n  defaultOption.value = '';\r\n  defaultOption.innerText = '🗒️ Choose category';\r\n\r\n  dropdown.append(defaultOption);\r\n\r\n  // Loop through categories and populate\r\n  categories.forEach(category => {\r\n    const option = document.createElement('option');\r\n    option.value = category.id;\r\n    option.innerText = `${category.emoji} ${category.name}`;\r\n    dropdown.append(option);\r\n  });\r\n}\r\n\r\nfunction generateCategoriesMenu(categories) {\r\n\r\n  // Make sure categories is a valid array before using forEach\r\n  if (!Array.isArray(categories) || categories.length === 0) {\r\n    console.warn(\"No categories available to display.\");\r\n    // return;\r\n  }\r\n\r\n  // Find list\r\n  const menu = document.getElementById('categories-menu');\r\n\r\n  // Clear menu\r\n  menu.innerHTML = '';\r\n\r\n  // Add the all tasks link\r\n  const allTasksItem = document.createElement('li');\r\n  const allTasksButton = document.createElement('button');\r\n  allTasksButton.type = 'button';\r\n  allTasksButton.innerText = '🗒️ All tasks';\r\n\r\n  allTasksButton.addEventListener('click', () => {\r\n    // Remove active from other possibly highlighted menu items\r\n    removeActiveClassFromMenu(menu);\r\n    (0,_index__WEBPACK_IMPORTED_MODULE_3__.showAllCategories)();\r\n  });\r\n\r\n  allTasksItem.append(allTasksButton);\r\n  menu.append(allTasksItem);\r\n\r\n  // For each category, add a li\r\n  categories.forEach(category => {\r\n    const listItem = document.createElement('li');\r\n    const link = document.createElement('button');\r\n    link.type = 'button';\r\n\r\n    // Add listener for button click\r\n    link.addEventListener('click', () => {\r\n      // Remove active from other possibly highlighted menu items\r\n      removeActiveClassFromMenu(menu);\r\n      // Highlight menu\r\n      link.classList.add('menu-active');\r\n      // Call function to show tasks\r\n      (0,_index__WEBPACK_IMPORTED_MODULE_3__.showCategory)(category);\r\n    });\r\n\r\n    // Add inner text\r\n    const linkText = document.createElement('p');\r\n    linkText.innerText = `${category.emoji} ${category.name}`;\r\n\r\n    // Add the 3 dots for editing\r\n    const editButton = document.createElement('img');\r\n    editButton.src = _img_3dots_svg__WEBPACK_IMPORTED_MODULE_1__;\r\n    editButton.alt = 'Edit category';\r\n    // Add listener for it\r\n    editButton.addEventListener('click', () => showEditCategoryModal(category));\r\n\r\n    link.append(linkText);\r\n\r\n    listItem.append(link, editButton);\r\n    menu.append(listItem);\r\n  });\r\n\r\n  // Create the add new category button as well\r\n  const listItem = document.createElement('li');\r\n  const newCategoryButton = document.createElement('button');\r\n  newCategoryButton.type = 'button';\r\n  newCategoryButton.innerText = '➕ Add category';\r\n  listItem.append(newCategoryButton);\r\n  menu.append(listItem);\r\n\r\n  // Add event listener that opens a modal\r\n  newCategoryButton.addEventListener('click', showNewCategoryModal);\r\n}\r\n\r\nfunction showNewCategoryModal() {\r\n  const modal = document.getElementById('add-category-modal');\r\n\r\n  // Add listener for Add category\r\n  const addButton = document.getElementById('add-category-button');\r\n\r\n  // Check that button exists in the DOM\r\n  if (addButton) {\r\n    const addButtonWithoutListeners = addButton.cloneNode(true); // Clone the button to remove existing event listeners\r\n    addButton.replaceWith(addButtonWithoutListeners); //Replace the current button\r\n    addButtonWithoutListeners.addEventListener('click', _index__WEBPACK_IMPORTED_MODULE_3__.addNewCategory); // Add one new listener\r\n  }\r\n\r\n  // Listen for clicks outside the modal\r\n  modal.addEventListener('click', (event) => {\r\n    const dialogDimensions = modal.getBoundingClientRect();\r\n\r\n    // Check if click was outside the modal content\r\n    if (\r\n      event.clientX < dialogDimensions.left || \r\n      event.clientX > dialogDimensions.right || \r\n      event.clientY < dialogDimensions.top || \r\n      event.clientY > dialogDimensions.bottom\r\n    ) {\r\n      modal.close(); // Close the modal\r\n    }\r\n  });\r\n\r\n  // Add listener for the emoji to open emoji picker\r\n  const emojiButton = document.getElementById('category-emoji-button');\r\n  emojiButton.addEventListener('click', showEmojiPicker);\r\n\r\n  // Set modal fields\r\n  const modalTitle = document.querySelector('#category-modal-header h2')\r\n  modalTitle.innerText = 'New category';\r\n\r\n  const emojiField = document.getElementById('category-emoji-button');\r\n  emojiField.innerText = '📃';\r\n\r\n  const nameField = document.getElementById('category-name-button');\r\n  nameField.value = '';\r\n\r\n  modal.showModal();\r\n}\r\n\r\nfunction showEditCategoryModal(category) {\r\n  const modal = document.getElementById('add-category-modal');\r\n\r\n  // Add listener for Edit category\r\n  const addButton = document.getElementById('add-category-button');\r\n\r\n  if (addButton) {\r\n    const addButtonWithoutListeners = addButton.cloneNode(true);\r\n    addButton.replaceWith(addButtonWithoutListeners);\r\n    addButtonWithoutListeners.addEventListener('click', () => (0,_index__WEBPACK_IMPORTED_MODULE_3__.editCategory)(category.id));\r\n  }\r\n\r\n  // Listen for clicks outside the modal\r\n  modal.addEventListener('click', (event) => {\r\n    const dialogDimensions = modal.getBoundingClientRect();\r\n\r\n    // Check if click was outside the modal content\r\n    if (\r\n      event.clientX < dialogDimensions.left || \r\n      event.clientX > dialogDimensions.right || \r\n      event.clientY < dialogDimensions.top || \r\n      event.clientY > dialogDimensions.bottom\r\n    ) {\r\n      modal.close(); // Close the modal\r\n    }\r\n  });\r\n  \r\n  // Add listener for the emoji to open emoji picker\r\n  const emojiButton = document.getElementById('category-emoji-button');\r\n  emojiButton.addEventListener('click', showEmojiPicker);\r\n\r\n  // Prefill fields on the modal\r\n  const modalTitle = document.querySelector('#category-modal-header h2')\r\n  modalTitle.innerText = 'Edit category';\r\n\r\n  const emojiField = document.getElementById('category-emoji-button');\r\n  emojiField.innerText = category.emoji;\r\n\r\n  const nameField = document.getElementById('category-name-button');\r\n  nameField.value = category.name;\r\n  nameField.select();\r\n\r\n  // Show modal\r\n  modal.showModal();\r\n}\r\n\r\n// Takes in an id, finds the modal with that id and closes it\r\nfunction closeModal(modalId) {\r\n  // Close the modal\r\n  const modal = document.getElementById(modalId);\r\n  modal.close();\r\n}\r\n\r\n// Shows the emoji picker and adds a listener for emoji click\r\nfunction showEmojiPicker() {\r\n  const modal = document.getElementById('add-category-modal');\r\n\r\n  const picker = document.createElement('emoji-picker');\r\n\r\n  // Set position and styling for the picker\r\n  picker.style.position = 'fixed'; // or 'absolute' if you want it relative to the button\r\n  picker.style.top = '75%'; // You can adjust this according to where you want it\r\n  picker.style.left = '50%'; // Adjust this too\r\n  picker.style.transform = 'translate(-50%, -50%)'; // Center it\r\n  picker.style.zIndex = '999'; // High z-index to ensure it appears above everything\r\n\r\n  modal.append(picker);\r\n\r\n  // Listen to emoji click events\r\n  document.querySelector('emoji-picker').addEventListener('emoji-click', event => chooseEmojiFromPicker(picker, event));\r\n}\r\n\r\n// Add emoji selection into the button and close the picker\r\nfunction chooseEmojiFromPicker(picker, event) {\r\n  const emojiButton = document.getElementById('category-emoji-button');\r\n  \r\n  // Get the emoji selection\r\n  console.log(event.detail.unicode);\r\n  emojiButton.innerText = event.detail.unicode;\r\n\r\n  // Close the picker\r\n  picker.remove();\r\n}\r\n\r\n// Helper function to remove the active class from all menu items\r\nfunction removeActiveClassFromMenu(menu) {\r\n  // Remove 'menu-active' class from all items in the menu\r\n  const activeItems = menu.querySelectorAll('.menu-active');\r\n  activeItems.forEach(item => {\r\n    item.classList.remove('menu-active');\r\n  });\r\n}\r\n\r\n// function createThreeDotsSvg() {\r\n//   // Finally, a chevron for expanding the task\r\n//   // const chevron = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n//   // chevron.setAttributeNS(null, 'viewBox', \"0 0 24 24\");\r\n//   // chevron.setAttributeNS(null, 'fill', \"none\");\r\n//   // chevron.setAttributeNS(null, 'stroke-width', \"1.5\");\r\n//   // chevron.setAttributeNS(null, 'stroke', \"currentColor\");\r\n//   // chevron.setAttributeNS(null, 'class', \"task-chevron\");\r\n\r\n//   // const chevronPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n//   // chevronPath.setAttributeNS(null, \"stroke-linecap\", \"round\");\r\n//   // chevronPath.setAttributeNS(null, \"stroke-linejoin\", \"round\");\r\n//   // chevronPath.setAttributeNS(null, \"d\", \"m19.5 8.25-7.5 7.5-7.5-7.5\");\r\n\r\n  \r\n// }\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/page.js\n");

/***/ }),

/***/ "./src/fonts/Inter-VariableFont_opsz,wght.ttf":
/*!****************************************************!*\
  !*** ./src/fonts/Inter-VariableFont_opsz,wght.ttf ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "e05c5f3d1fa6a3893d84.ttf";

/***/ }),

/***/ "./src/img/3dots.svg":
/*!***************************!*\
  !*** ./src/img/3dots.svg ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "1428c87c87a70ba391c7.svg";

/***/ }),

/***/ "./src/img/burger.svg":
/*!****************************!*\
  !*** ./src/img/burger.svg ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "5083b089ffcfb28332bb.svg";

/***/ }),

/***/ "./src/img/calendar.svg":
/*!******************************!*\
  !*** ./src/img/calendar.svg ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "c593c7a8eea65d712158.svg";

/***/ }),

/***/ "./src/img/favicon.ico":
/*!*****************************!*\
  !*** ./src/img/favicon.ico ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "df0648b8d319bd3c4b1c.ico";

/***/ }),

/***/ "./node_modules/emoji-picker-element/database.js":
/*!*******************************************************!*\
  !*** ./node_modules/emoji-picker-element/database.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Database)\n/* harmony export */ });\nfunction assertNonEmptyString (str) {\n  if (typeof str !== 'string' || !str) {\n    throw new Error('expected a non-empty string, got: ' + str)\n  }\n}\n\nfunction assertNumber (number) {\n  if (typeof number !== 'number') {\n    throw new Error('expected a number, got: ' + number)\n  }\n}\n\nconst DB_VERSION_CURRENT = 1;\nconst DB_VERSION_INITIAL = 1;\nconst STORE_EMOJI = 'emoji';\nconst STORE_KEYVALUE = 'keyvalue';\nconst STORE_FAVORITES = 'favorites';\nconst FIELD_TOKENS = 'tokens';\nconst INDEX_TOKENS = 'tokens';\nconst FIELD_UNICODE = 'unicode';\nconst INDEX_COUNT = 'count';\nconst FIELD_GROUP = 'group';\nconst FIELD_ORDER = 'order';\nconst INDEX_GROUP_AND_ORDER = 'group-order';\nconst KEY_ETAG = 'eTag';\nconst KEY_URL = 'url';\nconst KEY_PREFERRED_SKINTONE = 'skinTone';\nconst MODE_READONLY = 'readonly';\nconst MODE_READWRITE = 'readwrite';\nconst INDEX_SKIN_UNICODE = 'skinUnicodes';\nconst FIELD_SKIN_UNICODE = 'skinUnicodes';\n\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy (arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res\n}\n\nfunction uniqEmoji (emojis) {\n  return uniqBy(emojis, _ => _.unicode)\n}\n\nfunction initialMigration (db) {\n  function createObjectStore (name, keyPath, indexes) {\n    const store = keyPath\n      ? db.createObjectStore(name, { keyPath })\n      : db.createObjectStore(name);\n    if (indexes) {\n      for (const [indexName, [keyPath, multiEntry]] of Object.entries(indexes)) {\n        store.createIndex(indexName, keyPath, { multiEntry });\n      }\n    }\n    return store\n  }\n\n  createObjectStore(STORE_KEYVALUE);\n  createObjectStore(STORE_EMOJI, /* keyPath */ FIELD_UNICODE, {\n    [INDEX_TOKENS]: [FIELD_TOKENS, /* multiEntry */ true],\n    [INDEX_GROUP_AND_ORDER]: [[FIELD_GROUP, FIELD_ORDER]],\n    [INDEX_SKIN_UNICODE]: [FIELD_SKIN_UNICODE, /* multiEntry */ true]\n  });\n  createObjectStore(STORE_FAVORITES, undefined, {\n    [INDEX_COUNT]: ['']\n  });\n}\n\nconst openIndexedDBRequests = {};\nconst databaseCache = {};\nconst onCloseListeners = {};\n\nfunction handleOpenOrDeleteReq (resolve, reject, req) {\n  // These things are almost impossible to test with fakeIndexedDB sadly\n  /* istanbul ignore next */\n  req.onerror = () => reject(req.error);\n  /* istanbul ignore next */\n  req.onblocked = () => reject(new Error('IDB blocked'));\n  req.onsuccess = () => resolve(req.result);\n}\n\nasync function createDatabase (dbName) {\n  const db = await new Promise((resolve, reject) => {\n    const req = indexedDB.open(dbName, DB_VERSION_CURRENT);\n    openIndexedDBRequests[dbName] = req;\n    req.onupgradeneeded = e => {\n      // Technically there is only one version, so we don't need this `if` check\n      // But if an old version of the JS is in another browser tab\n      // and it gets upgraded in the future and we have a new DB version, well...\n      // better safe than sorry.\n      /* istanbul ignore else */\n      if (e.oldVersion < DB_VERSION_INITIAL) {\n        initialMigration(req.result);\n      }\n    };\n    handleOpenOrDeleteReq(resolve, reject, req);\n  });\n  // Handle abnormal closes, e.g. \"delete database\" in chrome dev tools.\n  // No need for removeEventListener, because once the DB can no longer\n  // fire \"close\" events, it will auto-GC.\n  // Unfortunately cannot test in fakeIndexedDB: https://github.com/dumbmatter/fakeIndexedDB/issues/50\n  /* istanbul ignore next */\n  db.onclose = () => closeDatabase(dbName);\n  return db\n}\n\nfunction openDatabase (dbName) {\n  if (!databaseCache[dbName]) {\n    databaseCache[dbName] = createDatabase(dbName);\n  }\n  return databaseCache[dbName]\n}\n\nfunction dbPromise (db, storeName, readOnlyOrReadWrite, cb) {\n  return new Promise((resolve, reject) => {\n    // Use relaxed durability because neither the emoji data nor the favorites/preferred skin tone\n    // are really irreplaceable data. IndexedDB is just a cache in this case.\n    const txn = db.transaction(storeName, readOnlyOrReadWrite, { durability: 'relaxed' });\n    const store = typeof storeName === 'string'\n      ? txn.objectStore(storeName)\n      : storeName.map(name => txn.objectStore(name));\n    let res;\n    cb(store, txn, (result) => {\n      res = result;\n    });\n\n    txn.oncomplete = () => resolve(res);\n    /* istanbul ignore next */\n    txn.onerror = () => reject(txn.error);\n  })\n}\n\nfunction closeDatabase (dbName) {\n  // close any open requests\n  const req = openIndexedDBRequests[dbName];\n  const db = req && req.result;\n  if (db) {\n    db.close();\n    const listeners = onCloseListeners[dbName];\n    /* istanbul ignore else */\n    if (listeners) {\n      for (const listener of listeners) {\n        listener();\n      }\n    }\n  }\n  delete openIndexedDBRequests[dbName];\n  delete databaseCache[dbName];\n  delete onCloseListeners[dbName];\n}\n\nfunction deleteDatabase (dbName) {\n  return new Promise((resolve, reject) => {\n    // close any open requests\n    closeDatabase(dbName);\n    const req = indexedDB.deleteDatabase(dbName);\n    handleOpenOrDeleteReq(resolve, reject, req);\n  })\n}\n\n// The \"close\" event occurs during an abnormal shutdown, e.g. a user clearing their browser data.\n// However, it doesn't occur with the normal \"close\" event, so we handle that separately.\n// https://www.w3.org/TR/IndexedDB/#close-a-database-connection\nfunction addOnCloseListener (dbName, listener) {\n  let listeners = onCloseListeners[dbName];\n  if (!listeners) {\n    listeners = onCloseListeners[dbName] = [];\n  }\n  listeners.push(listener);\n}\n\n// list of emoticons that don't match a simple \\W+ regex\n// extracted using:\n// require('emoji-picker-element-data/en/emojibase/data.json').map(_ => _.emoticon).filter(Boolean).filter(_ => !/^\\W+$/.test(_))\nconst irregularEmoticons = new Set([\n  ':D', 'XD', \":'D\", 'O:)',\n  ':X', ':P', ';P', 'XP',\n  ':L', ':Z', ':j', '8D',\n  'XO', '8)', ':B', ':O',\n  ':S', \":'o\", 'Dx', 'X(',\n  'D:', ':C', '>0)', ':3',\n  '</3', '<3', '\\\\M/', ':E',\n  '8#'\n]);\n\nfunction extractTokens (str) {\n  return str\n    .split(/[\\s_]+/)\n    .map(word => {\n      if (!word.match(/\\w/) || irregularEmoticons.has(word)) {\n        // for pure emoticons like :) or :-), just leave them as-is\n        return word.toLowerCase()\n      }\n\n      return word\n        .replace(/[)(:,]/g, '')\n        .replace(/’/g, \"'\")\n        .toLowerCase()\n    }).filter(Boolean)\n}\n\nconst MIN_SEARCH_TEXT_LENGTH = 2;\n\n// This is an extra step in addition to extractTokens(). The difference here is that we expect\n// the input to have already been run through extractTokens(). This is useful for cases like\n// emoticons, where we don't want to do any tokenization (because it makes no sense to split up\n// \">:)\" by the colon) but we do want to lowercase it to have consistent search results, so that\n// the user can type ':P' or ':p' and still get the same result.\nfunction normalizeTokens (str) {\n  return str\n    .filter(Boolean)\n    .map(_ => _.toLowerCase())\n    .filter(_ => _.length >= MIN_SEARCH_TEXT_LENGTH)\n}\n\n// Transform emoji data for storage in IDB\nfunction transformEmojiData (emojiData) {\n  const res = emojiData.map(({ annotation, emoticon, group, order, shortcodes, skins, tags, emoji, version }) => {\n    const tokens = [...new Set(\n      normalizeTokens([\n        ...(shortcodes || []).map(extractTokens).flat(),\n        ...(tags || []).map(extractTokens).flat(),\n        ...extractTokens(annotation),\n        emoticon\n      ])\n    )].sort();\n    const res = {\n      annotation,\n      group,\n      order,\n      tags,\n      tokens,\n      unicode: emoji,\n      version\n    };\n    if (emoticon) {\n      res.emoticon = emoticon;\n    }\n    if (shortcodes) {\n      res.shortcodes = shortcodes;\n    }\n    if (skins) {\n      res.skinTones = [];\n      res.skinUnicodes = [];\n      res.skinVersions = [];\n      for (const { tone, emoji, version } of skins) {\n        res.skinTones.push(tone);\n        res.skinUnicodes.push(emoji);\n        res.skinVersions.push(version);\n      }\n    }\n    return res\n  });\n  return res\n}\n\n// helper functions that help compress the code better\n\nfunction callStore (store, method, key, cb) {\n  store[method](key).onsuccess = e => (cb && cb(e.target.result));\n}\n\nfunction getIDB (store, key, cb) {\n  callStore(store, 'get', key, cb);\n}\n\nfunction getAllIDB (store, key, cb) {\n  callStore(store, 'getAll', key, cb);\n}\n\nfunction commit (txn) {\n  /* istanbul ignore else */\n  if (txn.commit) {\n    txn.commit();\n  }\n}\n\n// like lodash's minBy\nfunction minBy (array, func) {\n  let minItem = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const item = array[i];\n    if (func(minItem) > func(item)) {\n      minItem = item;\n    }\n  }\n  return minItem\n}\n\n// return an array of results representing all items that are found in each one of the arrays\n//\n\nfunction findCommonMembers (arrays, uniqByFunc) {\n  const shortestArray = minBy(arrays, _ => _.length);\n  const results = [];\n  for (const item of shortestArray) {\n    // if this item is included in every array in the intermediate results, add it to the final results\n    if (!arrays.some(array => array.findIndex(_ => uniqByFunc(_) === uniqByFunc(item)) === -1)) {\n      results.push(item);\n    }\n  }\n  return results\n}\n\nasync function isEmpty (db) {\n  return !(await get(db, STORE_KEYVALUE, KEY_URL))\n}\n\nasync function hasData (db, url, eTag) {\n  const [oldETag, oldUrl] = await Promise.all([KEY_ETAG, KEY_URL]\n    .map(key => get(db, STORE_KEYVALUE, key)));\n  return (oldETag === eTag && oldUrl === url)\n}\n\nasync function doFullDatabaseScanForSingleResult (db, predicate) {\n  // This batching algorithm is just a perf improvement over a basic\n  // cursor. The BATCH_SIZE is an estimate of what would give the best\n  // perf for doing a full DB scan (worst case).\n  //\n  // Mini-benchmark for determining the best batch size:\n  //\n  // PERF=1 pnpm build:rollup && pnpm test:adhoc\n  //\n  // (async () => {\n  //   performance.mark('start')\n  //   await $('emoji-picker').database.getEmojiByShortcode('doesnotexist')\n  //   performance.measure('total', 'start')\n  //   console.log(performance.getEntriesByName('total').slice(-1)[0].duration)\n  // })()\n  const BATCH_SIZE = 50; // Typically around 150ms for 6x slowdown in Chrome for above benchmark\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    let lastKey;\n\n    const processNextBatch = () => {\n      emojiStore.getAll(lastKey && IDBKeyRange.lowerBound(lastKey, true), BATCH_SIZE).onsuccess = e => {\n        const results = e.target.result;\n        for (const result of results) {\n          lastKey = result.unicode;\n          if (predicate(result)) {\n            return cb(result)\n          }\n        }\n        if (results.length < BATCH_SIZE) {\n          return cb()\n        }\n        processNextBatch();\n      };\n    };\n    processNextBatch();\n  })\n}\n\nasync function loadData (db, emojiData, url, eTag) {\n  try {\n    const transformedData = transformEmojiData(emojiData);\n    await dbPromise(db, [STORE_EMOJI, STORE_KEYVALUE], MODE_READWRITE, ([emojiStore, metaStore], txn) => {\n      let oldETag;\n      let oldUrl;\n      let todo = 0;\n\n      function checkFetched () {\n        if (++todo === 2) { // 2 requests made\n          onFetched();\n        }\n      }\n\n      function onFetched () {\n        if (oldETag === eTag && oldUrl === url) {\n          // check again within the transaction to guard against concurrency, e.g. multiple browser tabs\n          return\n        }\n        // delete old data\n        emojiStore.clear();\n        // insert new data\n        for (const data of transformedData) {\n          emojiStore.put(data);\n        }\n        metaStore.put(eTag, KEY_ETAG);\n        metaStore.put(url, KEY_URL);\n        commit(txn);\n      }\n\n      getIDB(metaStore, KEY_ETAG, result => {\n        oldETag = result;\n        checkFetched();\n      });\n\n      getIDB(metaStore, KEY_URL, result => {\n        oldUrl = result;\n        checkFetched();\n      });\n    });\n  } finally {\n  }\n}\n\nasync function getEmojiByGroup (db, group) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    const range = IDBKeyRange.bound([group, 0], [group + 1, 0], false, true);\n    getAllIDB(emojiStore.index(INDEX_GROUP_AND_ORDER), range, cb);\n  })\n}\n\nasync function getEmojiBySearchQuery (db, query) {\n  const tokens = normalizeTokens(extractTokens(query));\n\n  if (!tokens.length) {\n    return []\n  }\n\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    // get all results that contain all tokens (i.e. an AND query)\n    const intermediateResults = [];\n\n    const checkDone = () => {\n      if (intermediateResults.length === tokens.length) {\n        onDone();\n      }\n    };\n\n    const onDone = () => {\n      const results = findCommonMembers(intermediateResults, _ => _.unicode);\n      cb(results.sort((a, b) => a.order < b.order ? -1 : 1));\n    };\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const range = i === tokens.length - 1\n        ? IDBKeyRange.bound(token, token + '\\uffff', false, true) // treat last token as a prefix search\n        : IDBKeyRange.only(token); // treat all other tokens as an exact match\n      getAllIDB(emojiStore.index(INDEX_TOKENS), range, result => {\n        intermediateResults.push(result);\n        checkDone();\n      });\n    }\n  })\n}\n\n// This could have been implemented as an IDB index on shortcodes, but it seemed wasteful to do that\n// when we can already query by tokens and this will give us what we're looking for 99.9% of the time\nasync function getEmojiByShortcode (db, shortcode) {\n  const emojis = await getEmojiBySearchQuery(db, shortcode);\n\n  // In very rare cases (e.g. the shortcode \"v\" as in \"v for victory\"), we cannot search because\n  // there are no usable tokens (too short in this case). In that case, we have to do an inefficient\n  // full-database scan, which I believe is an acceptable tradeoff for not having to have an extra\n  // index on shortcodes.\n\n  if (!emojis.length) {\n    const predicate = _ => ((_.shortcodes || []).includes(shortcode.toLowerCase()));\n    return (await doFullDatabaseScanForSingleResult(db, predicate)) || null\n  }\n\n  return emojis.filter(_ => {\n    const lowerShortcodes = (_.shortcodes || []).map(_ => _.toLowerCase());\n    return lowerShortcodes.includes(shortcode.toLowerCase())\n  })[0] || null\n}\n\nasync function getEmojiByUnicode (db, unicode) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => (\n    getIDB(emojiStore, unicode, result => {\n      if (result) {\n        return cb(result)\n      }\n      getIDB(emojiStore.index(INDEX_SKIN_UNICODE), unicode, result => cb(result || null));\n    })\n  ))\n}\n\nfunction get (db, storeName, key) {\n  return dbPromise(db, storeName, MODE_READONLY, (store, txn, cb) => (\n    getIDB(store, key, cb)\n  ))\n}\n\nfunction set (db, storeName, key, value) {\n  return dbPromise(db, storeName, MODE_READWRITE, (store, txn) => {\n    store.put(value, key);\n    commit(txn);\n  })\n}\n\nfunction incrementFavoriteEmojiCount (db, unicode) {\n  return dbPromise(db, STORE_FAVORITES, MODE_READWRITE, (store, txn) => (\n    getIDB(store, unicode, result => {\n      store.put((result || 0) + 1, unicode);\n      commit(txn);\n    })\n  ))\n}\n\nfunction getTopFavoriteEmoji (db, customEmojiIndex, limit) {\n  if (limit === 0) {\n    return []\n  }\n  return dbPromise(db, [STORE_FAVORITES, STORE_EMOJI], MODE_READONLY, ([favoritesStore, emojiStore], txn, cb) => {\n    const results = [];\n    favoritesStore.index(INDEX_COUNT).openCursor(undefined, 'prev').onsuccess = e => {\n      const cursor = e.target.result;\n      if (!cursor) { // no more results\n        return cb(results)\n      }\n\n      function addResult (result) {\n        results.push(result);\n        if (results.length === limit) {\n          return cb(results) // done, reached the limit\n        }\n        cursor.continue();\n      }\n\n      const unicodeOrName = cursor.primaryKey;\n      const custom = customEmojiIndex.byName(unicodeOrName);\n      if (custom) {\n        return addResult(custom)\n      }\n      // This could be done in parallel (i.e. make the cursor and the get()s parallelized),\n      // but my testing suggests it's not actually faster.\n      getIDB(emojiStore, unicodeOrName, emoji => {\n        if (emoji) {\n          return addResult(emoji)\n        }\n        // emoji not found somehow, ignore (may happen if custom emoji change)\n        cursor.continue();\n      });\n    };\n  })\n}\n\n// trie data structure for prefix searches\n// loosely based on https://github.com/nolanlawson/substring-trie\n\nconst CODA_MARKER = ''; // marks the end of the string\n\nfunction trie (arr, itemToTokens) {\n  const map = new Map();\n  for (const item of arr) {\n    const tokens = itemToTokens(item);\n    for (const token of tokens) {\n      let currentMap = map;\n      for (let i = 0; i < token.length; i++) {\n        const char = token.charAt(i);\n        let nextMap = currentMap.get(char);\n        if (!nextMap) {\n          nextMap = new Map();\n          currentMap.set(char, nextMap);\n        }\n        currentMap = nextMap;\n      }\n      let valuesAtCoda = currentMap.get(CODA_MARKER);\n      if (!valuesAtCoda) {\n        valuesAtCoda = [];\n        currentMap.set(CODA_MARKER, valuesAtCoda);\n      }\n      valuesAtCoda.push(item);\n    }\n  }\n\n  const search = (query, exact) => {\n    let currentMap = map;\n    for (let i = 0; i < query.length; i++) {\n      const char = query.charAt(i);\n      const nextMap = currentMap.get(char);\n      if (nextMap) {\n        currentMap = nextMap;\n      } else {\n        return []\n      }\n    }\n\n    if (exact) {\n      const results = currentMap.get(CODA_MARKER);\n      return results || []\n    }\n\n    const results = [];\n    // traverse\n    const queue = [currentMap];\n    while (queue.length) {\n      const currentMap = queue.shift();\n      const entriesSortedByKey = [...currentMap.entries()].sort((a, b) => a[0] < b[0] ? -1 : 1);\n      for (const [key, value] of entriesSortedByKey) {\n        if (key === CODA_MARKER) { // CODA_MARKER always comes first; it's the empty string\n          results.push(...value);\n        } else {\n          queue.push(value);\n        }\n      }\n    }\n    return results\n  };\n\n  return search\n}\n\nconst requiredKeys$1 = [\n  'name',\n  'url'\n];\n\nfunction assertCustomEmojis (customEmojis) {\n  const isArray = customEmojis && Array.isArray(customEmojis);\n  const firstItemIsFaulty = isArray &&\n    customEmojis.length &&\n    (!customEmojis[0] || requiredKeys$1.some(key => !(key in customEmojis[0])));\n  if (!isArray || firstItemIsFaulty) {\n    throw new Error('Custom emojis are in the wrong format')\n  }\n}\n\nfunction customEmojiIndex (customEmojis) {\n  assertCustomEmojis(customEmojis);\n\n  const sortByName = (a, b) => a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;\n\n  //\n  // all()\n  //\n  const all = customEmojis.sort(sortByName);\n\n  //\n  // search()\n  //\n  const emojiToTokens = emoji => {\n    const set = new Set();\n    if (emoji.shortcodes) {\n      for (const shortcode of emoji.shortcodes) {\n        for (const token of extractTokens(shortcode)) {\n          set.add(token);\n        }\n      }\n    }\n    return set\n  };\n  const searchTrie = trie(customEmojis, emojiToTokens);\n  const searchByExactMatch = _ => searchTrie(_, true);\n  const searchByPrefix = _ => searchTrie(_, false);\n\n  // Search by query for custom emoji. Similar to how we do this in IDB, the last token\n  // is treated as a prefix search, but every other one is treated as an exact match.\n  // Then we AND the results together\n  const search = query => {\n    const tokens = extractTokens(query);\n    const intermediateResults = tokens.map((token, i) => (\n      (i < tokens.length - 1 ? searchByExactMatch : searchByPrefix)(token)\n    ));\n    return findCommonMembers(intermediateResults, _ => _.name).sort(sortByName)\n  };\n\n  //\n  // byShortcode, byName\n  //\n  const shortcodeToEmoji = new Map();\n  const nameToEmoji = new Map();\n  for (const customEmoji of customEmojis) {\n    nameToEmoji.set(customEmoji.name.toLowerCase(), customEmoji);\n    for (const shortcode of (customEmoji.shortcodes || [])) {\n      shortcodeToEmoji.set(shortcode.toLowerCase(), customEmoji);\n    }\n  }\n\n  const byShortcode = shortcode => shortcodeToEmoji.get(shortcode.toLowerCase());\n  const byName = name => nameToEmoji.get(name.toLowerCase());\n\n  return {\n    all,\n    search,\n    byShortcode,\n    byName\n  }\n}\n\nconst isFirefoxContentScript = typeof wrappedJSObject !== 'undefined';\n\n// remove some internal implementation details, i.e. the \"tokens\" array on the emoji object\n// essentially, convert the emoji from the version stored in IDB to the version used in-memory\nfunction cleanEmoji (emoji) {\n  if (!emoji) {\n    return emoji\n  }\n  // if inside a Firefox content script, need to clone the emoji object to prevent Firefox from complaining about\n  // cross-origin object. See: https://github.com/nolanlawson/emoji-picker-element/issues/356\n  /* istanbul ignore if */\n  if (isFirefoxContentScript) {\n    emoji = structuredClone(emoji);\n  }\n  delete emoji.tokens;\n  if (emoji.skinTones) {\n    const len = emoji.skinTones.length;\n    emoji.skins = Array(len);\n    for (let i = 0; i < len; i++) {\n      emoji.skins[i] = {\n        tone: emoji.skinTones[i],\n        unicode: emoji.skinUnicodes[i],\n        version: emoji.skinVersions[i]\n      };\n    }\n    delete emoji.skinTones;\n    delete emoji.skinUnicodes;\n    delete emoji.skinVersions;\n  }\n  return emoji\n}\n\nfunction warnETag (eTag) {\n  if (!eTag) {\n    console.warn('emoji-picker-element is more efficient if the dataSource server exposes an ETag header.');\n  }\n}\n\nconst requiredKeys = [\n  'annotation',\n  'emoji',\n  'group',\n  'order',\n  'version'\n];\n\nfunction assertEmojiData (emojiData) {\n  if (!emojiData ||\n    !Array.isArray(emojiData) ||\n    !emojiData[0] ||\n    (typeof emojiData[0] !== 'object') ||\n    requiredKeys.some(key => (!(key in emojiData[0])))) {\n    throw new Error('Emoji data is in the wrong format')\n  }\n}\n\nfunction assertStatus (response, dataSource) {\n  if (Math.floor(response.status / 100) !== 2) {\n    throw new Error('Failed to fetch: ' + dataSource + ':  ' + response.status)\n  }\n}\n\nasync function getETag (dataSource) {\n  const response = await fetch(dataSource, { method: 'HEAD' });\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  return eTag\n}\n\nasync function getETagAndData (dataSource) {\n  const response = await fetch(dataSource);\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  const emojiData = await response.json();\n  assertEmojiData(emojiData);\n  return [eTag, emojiData]\n}\n\n// TODO: including these in blob-util.ts causes typedoc to generate docs for them,\n// even with --excludePrivate ¯\\_(ツ)_/¯\n/** @private */\n/**\n * Convert an `ArrayBuffer` to a binary string.\n *\n * Example:\n *\n * ```js\n * var myString = blobUtil.arrayBufferToBinaryString(arrayBuff)\n * ```\n *\n * @param buffer - array buffer\n * @returns binary string\n */\nfunction arrayBufferToBinaryString(buffer) {\n    var binary = '';\n    var bytes = new Uint8Array(buffer);\n    var length = bytes.byteLength;\n    var i = -1;\n    while (++i < length) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return binary;\n}\n/**\n * Convert a binary string to an `ArrayBuffer`.\n *\n * ```js\n * var myBuffer = blobUtil.binaryStringToArrayBuffer(binaryString)\n * ```\n *\n * @param binary - binary string\n * @returns array buffer\n */\nfunction binaryStringToArrayBuffer(binary) {\n    var length = binary.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    var i = -1;\n    while (++i < length) {\n        arr[i] = binary.charCodeAt(i);\n    }\n    return buf;\n}\n\n// generate a checksum based on the stringified JSON\nasync function jsonChecksum (object) {\n  const inString = JSON.stringify(object);\n  let inBuffer = binaryStringToArrayBuffer(inString);\n\n  // this does not need to be cryptographically secure, SHA-1 is fine\n  const outBuffer = await crypto.subtle.digest('SHA-1', inBuffer);\n  const outBinString = arrayBufferToBinaryString(outBuffer);\n  const res = btoa(outBinString);\n  return res\n}\n\nasync function checkForUpdates (db, dataSource) {\n  // just do a simple HEAD request first to see if the eTags match\n  let emojiData;\n  let eTag = await getETag(dataSource);\n  if (!eTag) { // work around lack of ETag/Access-Control-Expose-Headers\n    const eTagAndData = await getETagAndData(dataSource);\n    eTag = eTagAndData[0];\n    emojiData = eTagAndData[1];\n    if (!eTag) {\n      eTag = await jsonChecksum(emojiData);\n    }\n  }\n  if (await hasData(db, dataSource, eTag)) ; else {\n    if (!emojiData) {\n      const eTagAndData = await getETagAndData(dataSource);\n      emojiData = eTagAndData[1];\n    }\n    await loadData(db, emojiData, dataSource, eTag);\n  }\n}\n\nasync function loadDataForFirstTime (db, dataSource) {\n  let [eTag, emojiData] = await getETagAndData(dataSource);\n  if (!eTag) {\n    // Handle lack of support for ETag or Access-Control-Expose-Headers\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers#Browser_compatibility\n    eTag = await jsonChecksum(emojiData);\n  }\n\n  await loadData(db, emojiData, dataSource, eTag);\n}\n\nclass Database {\n  constructor ({ dataSource = DEFAULT_DATA_SOURCE, locale = DEFAULT_LOCALE, customEmoji = [] } = {}) {\n    this.dataSource = dataSource;\n    this.locale = locale;\n    this._dbName = `emoji-picker-element-${this.locale}`;\n    this._db = undefined;\n    this._lazyUpdate = undefined;\n    this._custom = customEmojiIndex(customEmoji);\n\n    this._clear = this._clear.bind(this);\n    this._ready = this._init();\n  }\n\n  async _init () {\n    const db = this._db = await openDatabase(this._dbName);\n\n    addOnCloseListener(this._dbName, this._clear);\n    const dataSource = this.dataSource;\n    const empty = await isEmpty(db);\n\n    if (empty) {\n      await loadDataForFirstTime(db, dataSource);\n    } else { // offline-first - do an update asynchronously\n      this._lazyUpdate = checkForUpdates(db, dataSource);\n    }\n  }\n\n  async ready () {\n    const checkReady = async () => {\n      if (!this._ready) {\n        this._ready = this._init();\n      }\n      return this._ready\n    };\n    await checkReady();\n    // There's a possibility of a race condition where the element gets added, removed, and then added again\n    // with a particular timing, which would set the _db to undefined.\n    // We *could* do a while loop here, but that seems excessive and could lead to an infinite loop.\n    if (!this._db) {\n      await checkReady();\n    }\n  }\n\n  async getEmojiByGroup (group) {\n    assertNumber(group);\n    await this.ready();\n    return uniqEmoji(await getEmojiByGroup(this._db, group)).map(cleanEmoji)\n  }\n\n  async getEmojiBySearchQuery (query) {\n    assertNonEmptyString(query);\n    await this.ready();\n    const customs = this._custom.search(query);\n    const natives = uniqEmoji(await getEmojiBySearchQuery(this._db, query)).map(cleanEmoji);\n    return [\n      ...customs,\n      ...natives\n    ]\n  }\n\n  async getEmojiByShortcode (shortcode) {\n    assertNonEmptyString(shortcode);\n    await this.ready();\n    const custom = this._custom.byShortcode(shortcode);\n    if (custom) {\n      return custom\n    }\n    return cleanEmoji(await getEmojiByShortcode(this._db, shortcode))\n  }\n\n  async getEmojiByUnicodeOrName (unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    const custom = this._custom.byName(unicodeOrName);\n    if (custom) {\n      return custom\n    }\n    return cleanEmoji(await getEmojiByUnicode(this._db, unicodeOrName))\n  }\n\n  async getPreferredSkinTone () {\n    await this.ready();\n    return (await get(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE)) || 0\n  }\n\n  async setPreferredSkinTone (skinTone) {\n    assertNumber(skinTone);\n    await this.ready();\n    return set(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE, skinTone)\n  }\n\n  async incrementFavoriteEmojiCount (unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    return incrementFavoriteEmojiCount(this._db, unicodeOrName)\n  }\n\n  async getTopFavoriteEmoji (limit) {\n    assertNumber(limit);\n    await this.ready();\n    return (await getTopFavoriteEmoji(this._db, this._custom, limit)).map(cleanEmoji)\n  }\n\n  set customEmoji (customEmojis) {\n    this._custom = customEmojiIndex(customEmojis);\n  }\n\n  get customEmoji () {\n    return this._custom.all\n  }\n\n  async _shutdown () {\n    await this.ready(); // reopen if we've already been closed/deleted\n    try {\n      await this._lazyUpdate; // allow any lazy updates to process before closing/deleting\n    } catch (err) { /* ignore network errors (offline-first) */ }\n  }\n\n  // clear references to IDB, e.g. during a close event\n  _clear () {\n    // We don't need to call removeEventListener or remove the manual \"close\" listeners.\n    // The memory leak tests prove this is unnecessary. It's because:\n    // 1) IDBDatabases that can no longer fire \"close\" automatically have listeners GCed\n    // 2) we clear the manual close listeners in databaseLifecycle.js.\n    this._db = this._ready = this._lazyUpdate = undefined;\n  }\n\n  async close () {\n    await this._shutdown();\n    await closeDatabase(this._dbName);\n  }\n\n  async delete () {\n    await this._shutdown();\n    await deleteDatabase(this._dbName);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/emoji-picker-element/database.js\n");

/***/ }),

/***/ "./node_modules/emoji-picker-element/index.js":
/*!****************************************************!*\
  !*** ./node_modules/emoji-picker-element/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Database: () => (/* reexport safe */ _database_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   Picker: () => (/* reexport safe */ _picker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _picker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./picker.js */ \"./node_modules/emoji-picker-element/picker.js\");\n/* harmony import */ var _database_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./database.js */ \"./node_modules/emoji-picker-element/database.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW1vamktcGlja2VyLWVsZW1lbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnQztBQUNJO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9lbW9qaS1waWNrZXItZWxlbWVudC9pbmRleC5qcz8yYzU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQaWNrZXIgZnJvbSAnLi9waWNrZXIuanMnXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSAnLi9kYXRhYmFzZS5qcydcbmV4cG9ydCB7IFBpY2tlciwgRGF0YWJhc2UgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/emoji-picker-element/index.js\n");

/***/ }),

/***/ "./node_modules/emoji-picker-element/picker.js":
/*!*****************************************************!*\
  !*** ./node_modules/emoji-picker-element/picker.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PickerElement)\n/* harmony export */ });\n/* harmony import */ var _database_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database.js */ \"./node_modules/emoji-picker-element/database.js\");\n\n\n// via https://unpkg.com/browse/emojibase-data@6.0.0/meta/groups.json\nconst allGroups = [\n  [-1, '✨', 'custom'],\n  [0, '😀', 'smileys-emotion'],\n  [1, '👋', 'people-body'],\n  [3, '🐱', 'animals-nature'],\n  [4, '🍎', 'food-drink'],\n  [5, '🏠️', 'travel-places'],\n  [6, '⚽', 'activities'],\n  [7, '📝', 'objects'],\n  [8, '⛔️', 'symbols'],\n  [9, '🏁', 'flags']\n].map(([id, emoji, name]) => ({ id, emoji, name }));\n\nconst groups = allGroups.slice(1);\n\nconst MIN_SEARCH_TEXT_LENGTH = 2;\nconst NUM_SKIN_TONES = 6;\n\n/* istanbul ignore next */\nconst rIC = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n\n// check for ZWJ (zero width joiner) character\nfunction hasZwj (emoji) {\n  return emoji.unicode.includes('\\u200d')\n}\n\n// Find one good representative emoji from each version to test by checking its color.\n// Ideally it should have color in the center. For some inspiration, see:\n// https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n//\n// Note that for certain versions (12.1, 13.1), there is no point in testing them explicitly, because\n// all the emoji from this version are compound-emoji from previous versions. So they would pass a color\n// test, even in browsers that display them as double emoji. (E.g. \"face in clouds\" might render as\n// \"face without mouth\" plus \"fog\".) These emoji can only be filtered using the width test,\n// which happens in checkZwjSupport.js.\nconst versionsAndTestEmoji = {\n  '🫨': 15.1, // shaking head, technically from v15 but see note above\n  '🫠': 14,\n  '🥲': 13.1, // smiling face with tear, technically from v13 but see note above\n  '🥻': 12.1, // sari, technically from v12 but see note above\n  '🥰': 11,\n  '🤩': 5,\n  '👱‍♀️': 4,\n  '🤣': 3,\n  '👁️‍🗨️': 2,\n  '😀': 1,\n  '😐️': 0.7,\n  '😃': 0.6\n};\n\nconst TIMEOUT_BEFORE_LOADING_MESSAGE = 1000; // 1 second\nconst DEFAULT_SKIN_TONE_EMOJI = '🖐️';\nconst DEFAULT_NUM_COLUMNS = 8;\n\n// Based on https://fivethirtyeight.com/features/the-100-most-used-emojis/ and\n// https://blog.emojipedia.org/facebook-reveals-most-and-least-used-emojis/ with\n// a bit of my own curation. (E.g. avoid the \"OK\" gesture because of connotations:\n// https://emojipedia.org/ok-hand/)\nconst MOST_COMMONLY_USED_EMOJI = [\n  '😊',\n  '😒',\n  '❤️',\n  '👍️',\n  '😍',\n  '😂',\n  '😭',\n  '☺️',\n  '😔',\n  '😩',\n  '😏',\n  '💕',\n  '🙌',\n  '😘'\n];\n\n// It's important to list Twemoji Mozilla before everything else, because Mozilla bundles their\n// own font on some platforms (notably Windows and Linux as of this writing). Typically, Mozilla\n// updates faster than the underlying OS, and we don't want to render older emoji in one font and\n// newer emoji in another font:\n// https://github.com/nolanlawson/emoji-picker-element/pull/268#issuecomment-1073347283\nconst FONT_FAMILY = '\"Twemoji Mozilla\",\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",' +\n  '\"Noto Color Emoji\",\"EmojiOne Color\",\"Android Emoji\",sans-serif';\n\n/* istanbul ignore next */\nconst DEFAULT_CATEGORY_SORTING = (a, b) => a < b ? -1 : a > b ? 1 : 0;\n\n// Test if an emoji is supported by rendering it to canvas and checking that the color is not black\n// See https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n// and https://www.npmjs.com/package/if-emoji for inspiration\n// This implementation is largely borrowed from if-emoji, adding the font-family\n\n\nconst getTextFeature = (text, color) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n\n  const ctx = canvas.getContext('2d', {\n    // Improves the performance of `getImageData()`\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getContextAttributes#willreadfrequently\n    willReadFrequently: true\n  });\n  ctx.textBaseline = 'top';\n  ctx.font = `100px ${FONT_FAMILY}`;\n  ctx.fillStyle = color;\n  ctx.scale(0.01, 0.01);\n  ctx.fillText(text, 0, 0);\n\n  return ctx.getImageData(0, 0, 1, 1).data\n};\n\nconst compareFeatures = (feature1, feature2) => {\n  const feature1Str = [...feature1].join(',');\n  const feature2Str = [...feature2].join(',');\n  // This is RGBA, so for 0,0,0, we are checking that the first RGB is not all zeroes.\n  // Most of the time when unsupported this is 0,0,0,0, but on Chrome on Mac it is\n  // 0,0,0,61 - there is a transparency here.\n  return feature1Str === feature2Str && !feature1Str.startsWith('0,0,0,')\n};\n\nfunction testColorEmojiSupported (text) {\n  // Render white and black and then compare them to each other and ensure they're the same\n  // color, and neither one is black. This shows that the emoji was rendered in color.\n  const feature1 = getTextFeature(text, '#000');\n  const feature2 = getTextFeature(text, '#fff');\n  return feature1 && feature2 && compareFeatures(feature1, feature2)\n}\n\n// rather than check every emoji ever, which would be expensive, just check some representatives from the\n// different emoji releases to determine what the font supports\n\nfunction determineEmojiSupportLevel () {\n  const entries = Object.entries(versionsAndTestEmoji);\n  try {\n    // start with latest emoji and work backwards\n    for (const [emoji, version] of entries) {\n      if (testColorEmojiSupported(emoji)) {\n        return version\n      }\n    }\n  } catch (e) { // canvas error\n  } finally {\n  }\n  // In case of an error, be generous and just assume all emoji are supported (e.g. for canvas errors\n  // due to anti-fingerprinting add-ons). Better to show some gray boxes than nothing at all.\n  return entries[0][1] // first one in the list is the most recent version\n}\n\n// Check which emojis we know for sure aren't supported, based on Unicode version level\nlet promise;\nconst detectEmojiSupportLevel = () => {\n  if (!promise) {\n    // Delay so it can run while the IDB database is being created by the browser (on another thread).\n    // This helps especially with first load – we want to start pre-populating the database on the main thread,\n    // and then wait for IDB to commit everything, and while waiting we run this check.\n    promise = new Promise(resolve => (\n      rIC(() => (\n        resolve(determineEmojiSupportLevel()) // delay so ideally this can run while IDB is first populating\n      ))\n    ));\n  }\n  return promise\n};\n// determine which emojis containing ZWJ (zero width joiner) characters\n// are supported (rendered as one glyph) rather than unsupported (rendered as two or more glyphs)\nconst supportedZwjEmojis = new Map();\n\nconst VARIATION_SELECTOR = '\\ufe0f';\nconst SKINTONE_MODIFIER = '\\ud83c';\nconst ZWJ = '\\u200d';\nconst LIGHT_SKIN_TONE = 0x1F3FB;\nconst LIGHT_SKIN_TONE_MODIFIER = 0xdffb;\n\n// TODO: this is a naive implementation, we can improve it later\n// It's only used for the skintone picker, so as long as people don't customize with\n// really exotic emoji then it should work fine\nfunction applySkinTone (str, skinTone) {\n  if (skinTone === 0) {\n    return str\n  }\n  const zwjIndex = str.indexOf(ZWJ);\n  if (zwjIndex !== -1) {\n    return str.substring(0, zwjIndex) +\n      String.fromCodePoint(LIGHT_SKIN_TONE + skinTone - 1) +\n      str.substring(zwjIndex)\n  }\n  if (str.endsWith(VARIATION_SELECTOR)) {\n    str = str.substring(0, str.length - 1);\n  }\n  return str + SKINTONE_MODIFIER + String.fromCodePoint(LIGHT_SKIN_TONE_MODIFIER + skinTone - 1)\n}\n\nfunction halt (event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\n// Implementation left/right or up/down navigation, circling back when you\n// reach the start/end of the list\nfunction incrementOrDecrement (decrement, val, arr) {\n  val += (decrement ? -1 : 1);\n  if (val < 0) {\n    val = arr.length - 1;\n  } else if (val >= arr.length) {\n    val = 0;\n  }\n  return val\n}\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy (arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res\n}\n\n// We don't need all the data on every emoji, and there are specific things we need\n// for the UI, so build a \"view model\" from the emoji object we got from the database\n\nfunction summarizeEmojisForUI (emojis, emojiSupportLevel) {\n  const toSimpleSkinsMap = skins => {\n    const res = {};\n    for (const skin of skins) {\n      // ignore arrays like [1, 2] with multiple skin tones\n      // also ignore variants that are in an unsupported emoji version\n      // (these do exist - variants from a different version than their base emoji)\n      if (typeof skin.tone === 'number' && skin.version <= emojiSupportLevel) {\n        res[skin.tone] = skin.unicode;\n      }\n    }\n    return res\n  };\n\n  return emojis.map(({ unicode, skins, shortcodes, url, name, category, annotation }) => ({\n    unicode,\n    name,\n    shortcodes,\n    url,\n    category,\n    annotation,\n    id: unicode || name,\n    skins: skins && toSimpleSkinsMap(skins)\n  }))\n}\n\n// import rAF from one place so that the bundle size is a bit smaller\nconst rAF = requestAnimationFrame;\n\n// \"Svelte action\"-like utility to detect layout changes via ResizeObserver.\n// If ResizeObserver is unsupported, we just use rAF once and don't bother to update.\n\n\nlet resizeObserverSupported = typeof ResizeObserver === 'function';\n\nfunction resizeObserverAction (node, abortSignal, onUpdate) {\n  let resizeObserver;\n  if (resizeObserverSupported) {\n    resizeObserver = new ResizeObserver(onUpdate);\n    resizeObserver.observe(node);\n  } else { // just run once, don't bother trying to track it\n    rAF(onUpdate);\n  }\n\n  // cleanup function (called on destroy)\n  abortSignal.addEventListener('abort', () => {\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n    }\n  });\n}\n\n// get the width of the text inside of a DOM node, via https://stackoverflow.com/a/59525891/680742\nfunction calculateTextWidth (node) {\n  // skip running this in jest/vitest because we don't need to check for emoji support in that environment\n  /* istanbul ignore else */\n  {\n    const range = document.createRange();\n    range.selectNode(node.firstChild);\n    return range.getBoundingClientRect().width\n  }\n}\n\nlet baselineEmojiWidth;\n\n/**\n * Check if the given emojis containing ZWJ characters are supported by the current browser (don't render\n * as double characters) and return true if all are supported.\n * @param zwjEmojisToCheck\n * @param baselineEmoji\n * @param emojiToDomNode\n */\nfunction checkZwjSupport (zwjEmojisToCheck, baselineEmoji, emojiToDomNode) {\n  let allSupported = true;\n  for (const emoji of zwjEmojisToCheck) {\n    const domNode = emojiToDomNode(emoji);\n    const emojiWidth = calculateTextWidth(domNode);\n    if (typeof baselineEmojiWidth === 'undefined') { // calculate the baseline emoji width only once\n      baselineEmojiWidth = calculateTextWidth(baselineEmoji);\n    }\n    // On Windows, some supported emoji are ~50% bigger than the baseline emoji, but what we really want to guard\n    // against are the ones that are 2x the size, because those are truly broken (person with red hair = person with\n    // floating red wig, black cat = cat with black square, polar bear = bear with snowflake, etc.)\n    // So here we set the threshold at 1.8 times the size of the baseline emoji.\n    const supported = emojiWidth / 1.8 < baselineEmojiWidth;\n    supportedZwjEmojis.set(emoji.unicode, supported);\n\n    if (!supported) {\n      allSupported = false;\n    }\n  }\n  return allSupported\n}\n\n// like lodash's uniq\n\nfunction uniq (arr) {\n  return uniqBy(arr, _ => _)\n}\n\n// Note we put this in its own function outside Picker.js to avoid Svelte doing an invalidation on the \"setter\" here.\n// At best the invalidation is useless, at worst it can cause infinite loops:\n// https://github.com/nolanlawson/emoji-picker-element/pull/180\n// https://github.com/sveltejs/svelte/issues/6521\n// Also note tabpanelElement can be null if the element is disconnected immediately after connected\nfunction resetScrollTopIfPossible (element) {\n  /* istanbul ignore else */\n  if (element) { // Makes me nervous not to have this `if` guard\n    element.scrollTop = 0;\n  }\n}\n\nfunction getFromMap (cache, key, func) {\n  let cached = cache.get(key);\n  if (!cached) {\n    cached = func();\n    cache.set(key, cached);\n  }\n  return cached\n}\n\nfunction toString (value) {\n  return '' + value\n}\n\nfunction parseTemplate (htmlString) {\n  const template = document.createElement('template');\n  template.innerHTML = htmlString;\n  return template\n}\n\nconst parseCache = new WeakMap();\nconst domInstancesCache = new WeakMap();\n// This needs to be a symbol because it needs to be different from any possible output of a key function\nconst unkeyedSymbol = Symbol('un-keyed');\n\n// Not supported in Safari <=13\nconst hasReplaceChildren = 'replaceChildren' in Element.prototype;\nfunction replaceChildren (parentNode, newChildren) {\n  /* istanbul ignore else */\n  if (hasReplaceChildren) {\n    parentNode.replaceChildren(...newChildren);\n  } else { // minimal polyfill for Element.prototype.replaceChildren\n    parentNode.innerHTML = '';\n    parentNode.append(...newChildren);\n  }\n}\n\nfunction doChildrenNeedRerender (parentNode, newChildren) {\n  let oldChild = parentNode.firstChild;\n  let oldChildrenCount = 0;\n  // iterate using firstChild/nextSibling because browsers use a linked list under the hood\n  while (oldChild) {\n    const newChild = newChildren[oldChildrenCount];\n    // check if the old child and new child are the same\n    if (newChild !== oldChild) {\n      return true\n    }\n    oldChild = oldChild.nextSibling;\n    oldChildrenCount++;\n  }\n  // if new children length is different from old, we must re-render\n  return oldChildrenCount !== newChildren.length\n}\n\nfunction patchChildren (newChildren, instanceBinding) {\n  const { targetNode } = instanceBinding;\n  let { targetParentNode } = instanceBinding;\n\n  let needsRerender = false;\n\n  if (targetParentNode) { // already rendered once\n    needsRerender = doChildrenNeedRerender(targetParentNode, newChildren);\n  } else { // first render of list\n    needsRerender = true;\n    instanceBinding.targetNode = undefined; // placeholder node not needed anymore, free memory\n    instanceBinding.targetParentNode = targetParentNode = targetNode.parentNode;\n  }\n  // avoid re-rendering list if the dom nodes are exactly the same before and after\n  if (needsRerender) {\n    replaceChildren(targetParentNode, newChildren);\n  }\n}\n\nfunction patch (expressions, instanceBindings) {\n  for (const instanceBinding of instanceBindings) {\n    const {\n      targetNode,\n      currentExpression,\n      binding: {\n        expressionIndex,\n        attributeName,\n        attributeValuePre,\n        attributeValuePost\n      }\n    } = instanceBinding;\n\n    const expression = expressions[expressionIndex];\n\n    if (currentExpression === expression) {\n      // no need to update, same as before\n      continue\n    }\n\n    instanceBinding.currentExpression = expression;\n\n    if (attributeName) { // attribute replacement\n      targetNode.setAttribute(attributeName, attributeValuePre + toString(expression) + attributeValuePost);\n    } else { // text node / child element / children replacement\n      let newNode;\n      if (Array.isArray(expression)) { // array of DOM elements produced by tag template literals\n        patchChildren(expression, instanceBinding);\n      } else if (expression instanceof Element) { // html tag template returning a DOM element\n        newNode = expression;\n        targetNode.replaceWith(newNode);\n      } else { // primitive - string, number, etc\n        // nodeValue is faster than textContent supposedly https://www.youtube.com/watch?v=LY6y3HbDVmg\n        // note we may be replacing the value in a placeholder text node\n        targetNode.nodeValue = toString(expression);\n      }\n      if (newNode) {\n        instanceBinding.targetNode = newNode;\n      }\n    }\n  }\n}\n\nfunction parse (tokens) {\n  let htmlString = '';\n\n  let withinTag = false;\n  let withinAttribute = false;\n  let elementIndexCounter = -1; // depth-first traversal order\n\n  const elementsToBindings = new Map();\n  const elementIndexes = [];\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const token = tokens[i];\n    htmlString += token;\n\n    if (i === len - 1) {\n      break // no need to process characters - no more expressions to be found\n    }\n\n    for (let j = 0; j < token.length; j++) {\n      const char = token.charAt(j);\n      switch (char) {\n        case '<': {\n          const nextChar = token.charAt(j + 1);\n          if (nextChar === '/') { // closing tag\n            // leaving an element\n            elementIndexes.pop();\n          } else { // not a closing tag\n            withinTag = true;\n            elementIndexes.push(++elementIndexCounter);\n          }\n          break\n        }\n        case '>': {\n          withinTag = false;\n          withinAttribute = false;\n          break\n        }\n        case '=': {\n          withinAttribute = true;\n          break\n        }\n      }\n    }\n\n    const elementIndex = elementIndexes[elementIndexes.length - 1];\n    const bindings = getFromMap(elementsToBindings, elementIndex, () => []);\n\n    let attributeName;\n    let attributeValuePre;\n    let attributeValuePost;\n    if (withinAttribute) {\n      // I never use single-quotes for attribute values in HTML, so just support double-quotes or no-quotes\n      const match = /(\\S+)=\"?([^\"=]*)$/.exec(token);\n      attributeName = match[1];\n      attributeValuePre = match[2];\n      attributeValuePost = /^[^\">]*/.exec(tokens[i + 1])[0];\n    }\n\n    const binding = {\n      attributeName,\n      attributeValuePre,\n      attributeValuePost,\n      expressionIndex: i\n    };\n\n    bindings.push(binding);\n\n    if (!withinTag && !withinAttribute) {\n      // Add a placeholder text node, so we can find it later. Note we only support one dynamic child text node\n      htmlString += ' ';\n    }\n  }\n\n  const template = parseTemplate(htmlString);\n\n  return {\n    template,\n    elementsToBindings\n  }\n}\n\nfunction applyBindings (bindings, element, instanceBindings) {\n  for (let i = 0; i < bindings.length; i++) {\n    const binding = bindings[i];\n\n    const targetNode = binding.attributeName\n      ? element // attribute binding, just use the element itself\n      : element.firstChild; // not an attribute binding, so has a placeholder text node\n\n    const instanceBinding = {\n      binding,\n      targetNode,\n      targetParentNode: undefined,\n      currentExpression: undefined\n    };\n\n    instanceBindings.push(instanceBinding);\n  }\n}\n\nfunction traverseAndSetupBindings (rootElement, elementsToBindings) {\n  const instanceBindings = [];\n\n  let topLevelBindings;\n  if (elementsToBindings.size === 1 && (topLevelBindings = elementsToBindings.get(0))) {\n    // Optimization for the common case where there's only one element and one binding\n    // Skip creating a TreeWalker entirely and just handle the root DOM element\n    applyBindings(topLevelBindings, rootElement, instanceBindings);\n  } else {\n    // traverse dom\n    const treeWalker = document.createTreeWalker(rootElement, NodeFilter.SHOW_ELEMENT);\n\n    let element = rootElement;\n    let elementIndex = -1;\n    do {\n      const bindings = elementsToBindings.get(++elementIndex);\n      if (bindings) {\n        applyBindings(bindings, element, instanceBindings);\n      }\n    } while ((element = treeWalker.nextNode()))\n  }\n\n  return instanceBindings\n}\n\nfunction parseHtml (tokens) {\n  // All templates and bound expressions are unique per tokens array\n  const { template, elementsToBindings } = getFromMap(parseCache, tokens, () => parse(tokens));\n\n  // When we parseHtml, we always return a fresh DOM instance ready to be updated\n  const dom = template.cloneNode(true).content.firstElementChild;\n  const instanceBindings = traverseAndSetupBindings(dom, elementsToBindings);\n\n  return function updateDomInstance (expressions) {\n    patch(expressions, instanceBindings);\n    return dom\n  }\n}\n\nfunction createFramework (state) {\n  const domInstances = getFromMap(domInstancesCache, state, () => new Map());\n  let domInstanceCacheKey = unkeyedSymbol;\n\n  function html (tokens, ...expressions) {\n    // Each unique lexical usage of map() is considered unique due to the html`` tagged template call it makes,\n    // which has lexically unique tokens. The unkeyed symbol is just used for html`` usage outside of a map().\n    const domInstancesForTokens = getFromMap(domInstances, tokens, () => new Map());\n    const updateDomInstance = getFromMap(domInstancesForTokens, domInstanceCacheKey, () => parseHtml(tokens));\n\n    return updateDomInstance(expressions) // update with expressions\n  }\n\n  function map (array, callback, keyFunction) {\n    return array.map((item, index) => {\n      const originalCacheKey = domInstanceCacheKey;\n      domInstanceCacheKey = keyFunction(item);\n      try {\n        return callback(item, index)\n      } finally {\n        domInstanceCacheKey = originalCacheKey;\n      }\n    })\n  }\n\n  return { map, html }\n}\n\nfunction render (container, state, helpers, events, actions, refs, abortSignal, actionContext, firstRender) {\n  const { labelWithSkin, titleForEmoji, unicodeWithSkin } = helpers;\n  const { html, map } = createFramework(state);\n\n  function emojiList (emojis, searchMode, prefix) {\n    return map(emojis, (emoji, i) => {\n      return html`<button role=\"${searchMode ? 'option' : 'menuitem'}\" aria-selected=\"${searchMode ? i === state.activeSearchItem : ''}\" aria-label=\"${labelWithSkin(emoji, state.currentSkinTone)}\" title=\"${titleForEmoji(emoji)}\" class=\"${\n                'emoji' +\n                (searchMode && i === state.activeSearchItem ? ' active' : '') +\n                (emoji.unicode ? '' : ' custom-emoji')\n              }\" id=\"${`${prefix}-${emoji.id}`}\" style=\"${emoji.unicode ? '' : `--custom-emoji-background: url(${JSON.stringify(emoji.url)})`}\">${\n        emoji.unicode\n          ? unicodeWithSkin(emoji, state.currentSkinTone)\n          : ''\n      }</button>`\n      // It's important for the cache key to be unique based on the prefix, because the framework caches based on the\n      // unique tokens + cache key, and the same emoji may be used in the tab as well as in the fav bar\n    }, emoji => `${prefix}-${emoji.id}`)\n  }\n\n  const section = () => {\n    return html`<section data-ref=\"rootElement\" class=\"picker\" aria-label=\"${state.i18n.regionLabel}\" style=\"${state.pickerStyle || ''}\"><div class=\"pad-top\"></div><div class=\"search-row\"><div class=\"search-wrapper\"><input id=\"search\" class=\"search\" type=\"search\" role=\"combobox\" enterkeyhint=\"search\" placeholder=\"${state.i18n.searchLabel}\" autocapitalize=\"none\" autocomplete=\"off\" spellcheck=\"true\" aria-expanded=\"${!!(state.searchMode && state.currentEmojis.length)}\" aria-controls=\"search-results\" aria-describedby=\"search-description\" aria-autocomplete=\"list\" aria-activedescendant=\"${state.activeSearchItemId ? `emo-${state.activeSearchItemId}` : ''}\" data-ref=\"searchElement\" data-on-input=\"onSearchInput\" data-on-keydown=\"onSearchKeydown\"><label class=\"sr-only\" for=\"search\">${state.i18n.searchLabel}</label> <span id=\"search-description\" class=\"sr-only\">${state.i18n.searchDescription}</span></div><div class=\"skintone-button-wrapper ${state.skinTonePickerExpandedAfterAnimation ? 'expanded' : ''}\"><button id=\"skintone-button\" class=\"emoji ${state.skinTonePickerExpanded ? 'hide-focus' : ''}\" aria-label=\"${state.skinToneButtonLabel}\" title=\"${state.skinToneButtonLabel}\" aria-describedby=\"skintone-description\" aria-haspopup=\"listbox\" aria-expanded=\"${state.skinTonePickerExpanded}\" aria-controls=\"skintone-list\" data-on-click=\"onClickSkinToneButton\">${state.skinToneButtonText || ''}</button></div><span id=\"skintone-description\" class=\"sr-only\">${state.i18n.skinToneDescription}</span><div data-ref=\"skinToneDropdown\" id=\"skintone-list\" class=\"skintone-list hide-focus ${state.skinTonePickerExpanded ? '' : 'hidden no-animate'}\" style=\"transform:translateY(${state.skinTonePickerExpanded ? 0 : 'calc(-1 * var(--num-skintones) * var(--total-emoji-size))'})\" role=\"listbox\" aria-label=\"${state.i18n.skinTonesLabel}\" aria-activedescendant=\"skintone-${state.activeSkinTone}\" aria-hidden=\"${!state.skinTonePickerExpanded}\" tabIndex=\"-1\" data-on-focusout=\"onSkinToneOptionsFocusOut\" data-on-click=\"onSkinToneOptionsClick\" data-on-keydown=\"onSkinToneOptionsKeydown\" data-on-keyup=\"onSkinToneOptionsKeyup\">${\n    map(state.skinTones, (skinTone, i) => {\n    return html`<div id=\"skintone-${i}\" class=\"emoji ${i === state.activeSkinTone ? 'active' : ''}\" aria-selected=\"${i === state.activeSkinTone}\" role=\"option\" title=\"${state.i18n.skinTones[i]}\" aria-label=\"${state.i18n.skinTones[i]}\">${skinTone}</div>`\n    }, skinTone => skinTone)\n        }</div></div><div class=\"nav\" role=\"tablist\" style=\"grid-template-columns:repeat(${state.groups.length},1fr)\" aria-label=\"${state.i18n.categoriesLabel}\" data-on-keydown=\"onNavKeydown\" data-on-click=\"onNavClick\">${\n            map(state.groups, (group) => {\n              return html`<button role=\"tab\" class=\"nav-button\" aria-controls=\"tab-${group.id}\" aria-label=\"${state.i18n.categories[group.name]}\" aria-selected=\"${!state.searchMode && state.currentGroup.id === group.id}\" title=\"${state.i18n.categories[group.name]}\" data-group-id=\"${group.id}\"><div class=\"nav-emoji emoji\">${group.emoji}</div></button>`\n            }, group => group.id)\n          }</div><div class=\"indicator-wrapper\"><div class=\"indicator\" style=\"transform:translateX(${(/* istanbul ignore next */ (state.isRtl ? -1 : 1)) * state.currentGroupIndex * 100}%)\"></div></div><div class=\"message ${state.message ? '' : 'gone'}\" role=\"alert\" aria-live=\"polite\">${state.message || ''}</div><div data-ref=\"tabpanelElement\" class=\"tabpanel ${(!state.databaseLoaded || state.message) ? 'gone' : ''}\" role=\"${state.searchMode ? 'region' : 'tabpanel'}\" aria-label=\"${state.searchMode ? state.i18n.searchResultsLabel : state.i18n.categories[state.currentGroup.name]}\" id=\"${state.searchMode ? '' : `tab-${state.currentGroup.id}`}\" tabIndex=\"0\" data-on-click=\"onEmojiClick\"><div data-action=\"calculateEmojiGridStyle\">${\n              map(state.currentEmojisWithCategories, (emojiWithCategory, i) => {\n                return html`<div><div id=\"menu-label-${i}\" class=\"category ${state.currentEmojisWithCategories.length === 1 && state.currentEmojisWithCategories[0].category === '' ? 'gone' : ''}\" aria-hidden=\"true\">${\n                  state.searchMode\n                    ? state.i18n.searchResultsLabel\n                    : (\n                      emojiWithCategory.category\n                        ? emojiWithCategory.category\n                        : (\n                          state.currentEmojisWithCategories.length > 1\n                            ? state.i18n.categories.custom\n                            : state.i18n.categories[state.currentGroup.name]\n                        )\n                    )\n                }</div><div class=\"emoji-menu ${i !== 0 && !state.searchMode && state.currentGroup.id === -1 ? 'visibility-auto' : ''}\" style=\"${`--num-rows: ${Math.ceil(emojiWithCategory.emojis.length / state.numColumns)}`}\" data-action=\"updateOnIntersection\" role=\"${state.searchMode ? 'listbox' : 'menu'}\" aria-labelledby=\"menu-label-${i}\" id=\"${state.searchMode ? 'search-results' : ''}\">${\n              emojiList(emojiWithCategory.emojis, state.searchMode, /* prefix */ 'emo')\n            }</div></div>`\n              }, emojiWithCategory => emojiWithCategory.category)\n            }</div></div><div class=\"favorites onscreen emoji-menu ${state.message ? 'gone' : ''}\" role=\"menu\" aria-label=\"${state.i18n.favoritesLabel}\" data-on-click=\"onEmojiClick\">${\n            emojiList(state.currentFavorites, /* searchMode */ false, /* prefix */ 'fav')\n          }</div><button data-ref=\"baselineEmoji\" aria-hidden=\"true\" tabindex=\"-1\" class=\"abs-pos hidden emoji baseline-emoji\">😀</button></section>`\n  };\n\n  const rootDom = section();\n\n  // helper for traversing the dom, finding elements by an attribute, and getting the attribute value\n  const forElementWithAttribute = (attributeName, callback) => {\n    for (const element of container.querySelectorAll(`[${attributeName}]`)) {\n      callback(element, element.getAttribute(attributeName));\n    }\n  };\n\n  if (firstRender) { // not a re-render\n    container.appendChild(rootDom);\n\n    // we only bind events/refs once - there is no need to find them again given this component structure\n\n    // bind events\n    for (const eventName of ['click', 'focusout', 'input', 'keydown', 'keyup']) {\n      forElementWithAttribute(`data-on-${eventName}`, (element, listenerName) => {\n        element.addEventListener(eventName, events[listenerName]);\n      });\n    }\n\n    // find refs\n    forElementWithAttribute('data-ref', (element, ref) => {\n      refs[ref] = element;\n    });\n\n    // destroy/abort logic\n    abortSignal.addEventListener('abort', () => {\n      container.removeChild(rootDom);\n    });\n  }\n\n  // set up actions - these are re-bound on every render\n  forElementWithAttribute('data-action', (element, action) => {\n    let boundActions = actionContext.get(action);\n    if (!boundActions) {\n      actionContext.set(action, (boundActions = new WeakSet()));\n    }\n\n    // avoid applying the same action to the same element multiple times\n    if (!boundActions.has(element)) {\n      boundActions.add(element);\n      actions[action](element);\n    }\n  });\n}\n\n/* istanbul ignore next */\nconst qM = typeof queueMicrotask === 'function' ? queueMicrotask : callback => Promise.resolve().then(callback);\n\nfunction createState (abortSignal) {\n  let destroyed = false;\n  let currentObserver;\n\n  const propsToObservers = new Map();\n  const dirtyObservers = new Set();\n\n  let queued;\n\n  const flush = () => {\n    if (destroyed) {\n      return\n    }\n    const observersToRun = [...dirtyObservers];\n    dirtyObservers.clear(); // clear before running to force any new updates to run in another tick of the loop\n    try {\n      for (const observer of observersToRun) {\n        observer();\n      }\n    } finally {\n      queued = false;\n      if (dirtyObservers.size) { // new updates, queue another one\n        queued = true;\n        qM(flush);\n      }\n    }\n  };\n\n  const state = new Proxy({}, {\n    get (target, prop) {\n      if (currentObserver) {\n        let observers = propsToObservers.get(prop);\n        if (!observers) {\n          observers = new Set();\n          propsToObservers.set(prop, observers);\n        }\n        observers.add(currentObserver);\n      }\n      return target[prop]\n    },\n    set (target, prop, newValue) {\n      if (target[prop] !== newValue) {\n        target[prop] = newValue;\n        const observers = propsToObservers.get(prop);\n        if (observers) {\n          for (const observer of observers) {\n            dirtyObservers.add(observer);\n          }\n          if (!queued) {\n            queued = true;\n            qM(flush);\n          }\n        }\n      }\n      return true\n    }\n  });\n\n  const createEffect = (callback) => {\n    const runnable = () => {\n      const oldObserver = currentObserver;\n      currentObserver = runnable;\n      try {\n        return callback()\n      } finally {\n        currentObserver = oldObserver;\n      }\n    };\n    return runnable()\n  };\n\n  // destroy logic\n  abortSignal.addEventListener('abort', () => {\n    destroyed = true;\n  });\n\n  return {\n    state,\n    createEffect\n  }\n}\n\n// Compare two arrays, with a function called on each item in the two arrays that returns true if the items are equal\nfunction arraysAreEqualByFunction (left, right, areEqualFunc) {\n  if (left.length !== right.length) {\n    return false\n  }\n  for (let i = 0; i < left.length; i++) {\n    if (!areEqualFunc(left[i], right[i])) {\n      return false\n    }\n  }\n  return true\n}\n\nconst intersectionObserverCache = new WeakMap();\n\nfunction intersectionObserverAction (node, abortSignal, listener) {\n  /* istanbul ignore else */\n  {\n    // The scroll root is always `.tabpanel`\n    const root = node.closest('.tabpanel');\n\n    let observer = intersectionObserverCache.get(root);\n    if (!observer) {\n      // TODO: replace this with the contentvisibilityautostatechange event when all supported browsers support it.\n      // For now we use IntersectionObserver because it has better cross-browser support, and it would be bad for\n      // old Safari versions if they eagerly downloaded all custom emoji all at once.\n      observer = new IntersectionObserver(listener, {\n        root,\n        // trigger if we are 1/2 scroll container height away so that the images load a bit quicker while scrolling\n        rootMargin: '50% 0px 50% 0px',\n        // trigger if any part of the emoji grid is intersecting\n        threshold: 0\n      });\n\n      // avoid creating a new IntersectionObserver for every category; just use one for the whole root\n      intersectionObserverCache.set(root, observer);\n\n      // assume that the abortSignal is always the same for this root node; just add one event listener\n      abortSignal.addEventListener('abort', () => {\n        observer.disconnect();\n      });\n    }\n\n    observer.observe(node);\n  }\n}\n\n/* eslint-disable prefer-const,no-labels,no-inner-declarations */\n\n// constants\nconst EMPTY_ARRAY = [];\n\nconst { assign } = Object;\n\nfunction createRoot (shadowRoot, props) {\n  const refs = {};\n  const abortController = new AbortController();\n  const abortSignal = abortController.signal;\n  const { state, createEffect } = createState(abortSignal);\n  const actionContext = new Map();\n\n  // initial state\n  assign(state, {\n    skinToneEmoji: undefined,\n    i18n: undefined,\n    database: undefined,\n    customEmoji: undefined,\n    customCategorySorting: undefined,\n    emojiVersion: undefined\n  });\n\n  // public props\n  assign(state, props);\n\n  // private props\n  assign(state, {\n    initialLoad: true,\n    currentEmojis: [],\n    currentEmojisWithCategories: [],\n    rawSearchText: '',\n    searchText: '',\n    searchMode: false,\n    activeSearchItem: -1,\n    message: undefined,\n    skinTonePickerExpanded: false,\n    skinTonePickerExpandedAfterAnimation: false,\n    currentSkinTone: 0,\n    activeSkinTone: 0,\n    skinToneButtonText: undefined,\n    pickerStyle: undefined,\n    skinToneButtonLabel: '',\n    skinTones: [],\n    currentFavorites: [],\n    defaultFavoriteEmojis: undefined,\n    numColumns: DEFAULT_NUM_COLUMNS,\n    isRtl: false,\n    currentGroupIndex: 0,\n    groups: groups,\n    databaseLoaded: false,\n    activeSearchItemId: undefined\n  });\n\n  //\n  // Update the current group based on the currentGroupIndex\n  //\n  createEffect(() => {\n    if (state.currentGroup !== state.groups[state.currentGroupIndex]) {\n      state.currentGroup = state.groups[state.currentGroupIndex];\n    }\n  });\n\n  //\n  // Utils/helpers\n  //\n\n  const focus = id => {\n    shadowRoot.getElementById(id).focus();\n  };\n\n  const emojiToDomNode = emoji => shadowRoot.getElementById(`emo-${emoji.id}`);\n\n  // fire a custom event that crosses the shadow boundary\n  const fireEvent = (name, detail) => {\n    refs.rootElement.dispatchEvent(new CustomEvent(name, {\n      detail,\n      bubbles: true,\n      composed: true\n    }));\n  };\n\n  //\n  // Comparison utils\n  //\n\n  const compareEmojiArrays = (a, b) => a.id === b.id;\n\n  const compareCurrentEmojisWithCategories = (a, b) => {\n    const { category: aCategory, emojis: aEmojis } = a;\n    const { category: bCategory, emojis: bEmojis } = b;\n\n    if (aCategory !== bCategory) {\n      return false\n    }\n\n    return arraysAreEqualByFunction(aEmojis, bEmojis, compareEmojiArrays)\n  };\n\n  //\n  // Update utils to avoid excessive re-renders\n  //\n\n  // avoid excessive re-renders by checking the value before setting\n  const updateCurrentEmojis = (newEmojis) => {\n    if (!arraysAreEqualByFunction(state.currentEmojis, newEmojis, compareEmojiArrays)) {\n      state.currentEmojis = newEmojis;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateSearchMode = (newSearchMode) => {\n    if (state.searchMode !== newSearchMode) {\n      state.searchMode = newSearchMode;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateCurrentEmojisWithCategories = (newEmojisWithCategories) => {\n    if (!arraysAreEqualByFunction(state.currentEmojisWithCategories, newEmojisWithCategories, compareCurrentEmojisWithCategories)) {\n      state.currentEmojisWithCategories = newEmojisWithCategories;\n    }\n  };\n\n  // Helpers used by PickerTemplate\n\n  const unicodeWithSkin = (emoji, currentSkinTone) => (\n    (currentSkinTone && emoji.skins && emoji.skins[currentSkinTone]) || emoji.unicode\n  );\n\n  const labelWithSkin = (emoji, currentSkinTone) => (\n    uniq([\n      (emoji.name || unicodeWithSkin(emoji, currentSkinTone)),\n      emoji.annotation,\n      ...(emoji.shortcodes || EMPTY_ARRAY)\n    ].filter(Boolean)).join(', ')\n  );\n\n  const titleForEmoji = (emoji) => (\n    emoji.annotation || (emoji.shortcodes || EMPTY_ARRAY).join(', ')\n  );\n\n  const helpers = {\n    labelWithSkin, titleForEmoji, unicodeWithSkin\n  };\n  const events = {\n    onClickSkinToneButton,\n    onEmojiClick,\n    onNavClick,\n    onNavKeydown,\n    onSearchKeydown,\n    onSkinToneOptionsClick,\n    onSkinToneOptionsFocusOut,\n    onSkinToneOptionsKeydown,\n    onSkinToneOptionsKeyup,\n    onSearchInput\n  };\n  const actions = {\n    calculateEmojiGridStyle,\n    updateOnIntersection\n  };\n\n  let firstRender = true;\n  createEffect(() => {\n    render(shadowRoot, state, helpers, events, actions, refs, abortSignal, actionContext, firstRender);\n    firstRender = false;\n  });\n\n  //\n  // Determine the emoji support level (in requestIdleCallback)\n  //\n\n  // mount logic\n  if (!state.emojiVersion) {\n    detectEmojiSupportLevel().then(level => {\n      // Can't actually test emoji support in Jest/Vitest/JSDom, emoji never render in color in Cairo\n      /* istanbul ignore next */\n      if (!level) {\n        state.message = state.i18n.emojiUnsupportedMessage;\n      }\n    });\n  }\n\n  //\n  // Set or update the database object\n  //\n\n  createEffect(() => {\n    // show a Loading message if it takes a long time, or show an error if there's a network/IDB error\n    async function handleDatabaseLoading () {\n      let showingLoadingMessage = false;\n      const timeoutHandle = setTimeout(() => {\n        showingLoadingMessage = true;\n        state.message = state.i18n.loadingMessage;\n      }, TIMEOUT_BEFORE_LOADING_MESSAGE);\n      try {\n        await state.database.ready();\n        state.databaseLoaded = true; // eslint-disable-line no-unused-vars\n      } catch (err) {\n        console.error(err);\n        state.message = state.i18n.networkErrorMessage;\n      } finally {\n        clearTimeout(timeoutHandle);\n        if (showingLoadingMessage) { // Seems safer than checking the i18n string, which may change\n          showingLoadingMessage = false;\n          state.message = ''; // eslint-disable-line no-unused-vars\n        }\n      }\n    }\n\n    if (state.database) {\n      /* no await */\n      handleDatabaseLoading();\n    }\n  });\n\n  //\n  // Global styles for the entire picker\n  //\n\n  createEffect(() => {\n    state.pickerStyle = `\n      --num-groups: ${state.groups.length}; \n      --indicator-opacity: ${state.searchMode ? 0 : 1}; \n      --num-skintones: ${NUM_SKIN_TONES};`;\n  });\n\n  //\n  // Set or update the customEmoji\n  //\n\n  createEffect(() => {\n    if (state.customEmoji && state.database) {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n    }\n  });\n\n  createEffect(() => {\n    if (state.customEmoji && state.customEmoji.length) {\n      if (state.groups !== allGroups) { // don't update unnecessarily\n        state.groups = allGroups;\n      }\n    } else if (state.groups !== groups) {\n      if (state.currentGroupIndex) {\n        // If the current group is anything other than \"custom\" (which is first), decrement.\n        // This fixes the odd case where you set customEmoji, then pick a category, then unset customEmoji\n        state.currentGroupIndex--;\n      }\n      state.groups = groups;\n    }\n  });\n\n  //\n  // Set or update the preferred skin tone\n  //\n\n  createEffect(() => {\n    async function updatePreferredSkinTone () {\n      if (state.databaseLoaded) {\n        state.currentSkinTone = await state.database.getPreferredSkinTone();\n      }\n    }\n\n    /* no await */ updatePreferredSkinTone();\n  });\n\n  createEffect(() => {\n    state.skinTones = Array(NUM_SKIN_TONES).fill().map((_, i) => applySkinTone(state.skinToneEmoji, i));\n  });\n\n  createEffect(() => {\n    state.skinToneButtonText = state.skinTones[state.currentSkinTone];\n  });\n\n  createEffect(() => {\n    state.skinToneButtonLabel = state.i18n.skinToneLabel.replace('{skinTone}', state.i18n.skinTones[state.currentSkinTone]);\n  });\n\n  //\n  // Set or update the favorites emojis\n  //\n\n  createEffect(() => {\n    async function updateDefaultFavoriteEmojis () {\n      const { database } = state;\n      const favs = (await Promise.all(MOST_COMMONLY_USED_EMOJI.map(unicode => (\n        database.getEmojiByUnicodeOrName(unicode)\n      )))).filter(Boolean); // filter because in Jest/Vitest tests we don't have all the emoji in the DB\n      state.defaultFavoriteEmojis = favs;\n    }\n\n    if (state.databaseLoaded) {\n      /* no await */ updateDefaultFavoriteEmojis();\n    }\n  });\n\n  function updateCustomEmoji () {\n    // Certain effects have an implicit dependency on customEmoji since it affects the database\n    // Getting it here on the state ensures this effect re-runs when customEmoji change.\n    const { customEmoji, database } = state;\n    const databaseCustomEmoji = customEmoji || EMPTY_ARRAY;\n    if (database.customEmoji !== databaseCustomEmoji) {\n      // Avoid setting this if the customEmoji have _not_ changed, because the setter triggers a re-computation of the\n      // `customEmojiIndex`. Note we don't bother with deep object changes.\n      database.customEmoji = databaseCustomEmoji;\n    }\n  }\n\n  createEffect(() => {\n    async function updateFavorites () {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n      const { database, defaultFavoriteEmojis, numColumns } = state;\n      const dbFavorites = await database.getTopFavoriteEmoji(numColumns);\n      const favorites = await summarizeEmojis(uniqBy([\n        ...dbFavorites,\n        ...defaultFavoriteEmojis\n      ], _ => (_.unicode || _.name)).slice(0, numColumns));\n      state.currentFavorites = favorites;\n    }\n\n    if (state.databaseLoaded && state.defaultFavoriteEmojis) {\n      /* no await */ updateFavorites();\n    }\n  });\n\n  //\n  // Re-run whenever the emoji grid changes size, and re-calc style/layout-related state variables:\n  // 1) Re-calculate the --num-columns var because it may have changed\n  // 2) Re-calculate whether we're in RTL mode or not.\n  //\n  // The benefit of doing this in one place is to align with rAF/ResizeObserver\n  // and do all the calculations in one go. RTL vs LTR is not strictly layout-related,\n  // but since we're already reading the style here, and since it's already aligned with\n  // the rAF loop, this is the most appropriate place to do it perf-wise.\n  //\n\n  function calculateEmojiGridStyle (node) {\n    resizeObserverAction(node, abortSignal, () => {\n      /* istanbul ignore next */\n      { // jsdom throws errors for this kind of fancy stuff\n        // read all the style/layout calculations we need to make\n        const style = getComputedStyle(refs.rootElement);\n        const newNumColumns = parseInt(style.getPropertyValue('--num-columns'), 10);\n        const newIsRtl = style.getPropertyValue('direction') === 'rtl';\n\n        // write to state variables\n        state.numColumns = newNumColumns;\n        state.isRtl = newIsRtl;\n      }\n    });\n  }\n\n  // Re-run whenever the custom emoji in a category are shown/hidden. This is an optimization that simulates\n  // what we'd get from `<img loading=lazy>` but without rendering an `<img>`.\n  function updateOnIntersection (node) {\n    intersectionObserverAction(node, abortSignal, (entries) => {\n      for (const { target, isIntersecting } of entries) {\n        target.classList.toggle('onscreen', isIntersecting);\n      }\n    });\n  }\n\n  //\n  // Set or update the currentEmojis. Check for invalid ZWJ renderings\n  // (i.e. double emoji).\n  //\n\n  createEffect(() => {\n    async function updateEmojis () {\n      const { searchText, currentGroup, databaseLoaded, customEmoji } = state;\n      if (!databaseLoaded) {\n        state.currentEmojis = [];\n        state.searchMode = false;\n      } else if (searchText.length >= MIN_SEARCH_TEXT_LENGTH) {\n        const newEmojis = await getEmojisBySearchQuery(searchText);\n        if (state.searchText === searchText) { // if the situation changes asynchronously, do not update\n          updateCurrentEmojis(newEmojis);\n          updateSearchMode(true);\n        }\n      } else { // database is loaded and we're not in search mode, so we're in normal category mode\n        const { id: currentGroupId } = currentGroup;\n        // avoid race condition where currentGroupId is -1 and customEmoji is undefined/empty\n        if (currentGroupId !== -1 || (customEmoji && customEmoji.length)) {\n          const newEmojis = await getEmojisByGroup(currentGroupId);\n          if (state.currentGroup.id === currentGroupId) { // if the situation changes asynchronously, do not update\n            updateCurrentEmojis(newEmojis);\n            updateSearchMode(false);\n          }\n        }\n      }\n    }\n\n    /* no await */ updateEmojis();\n  });\n\n  const resetScrollTopInRaf = () => {\n    rAF(() => resetScrollTopIfPossible(refs.tabpanelElement));\n  };\n\n  // Some emojis have their ligatures rendered as two or more consecutive emojis\n  // We want to treat these the same as unsupported emojis, so we compare their\n  // widths against the baseline widths and remove them as necessary\n  createEffect(() => {\n    const { currentEmojis, emojiVersion } = state;\n    const zwjEmojisToCheck = currentEmojis\n      .filter(emoji => emoji.unicode) // filter custom emoji\n      .filter(emoji => hasZwj(emoji) && !supportedZwjEmojis.has(emoji.unicode));\n    if (!emojiVersion && zwjEmojisToCheck.length) {\n      // render now, check their length later\n      updateCurrentEmojis(currentEmojis);\n      rAF(() => checkZwjSupportAndUpdate(zwjEmojisToCheck));\n    } else {\n      const newEmojis = emojiVersion ? currentEmojis : currentEmojis.filter(isZwjSupported);\n      updateCurrentEmojis(newEmojis);\n      // Reset scroll top to 0 when emojis change\n      resetScrollTopInRaf();\n    }\n  });\n\n  function checkZwjSupportAndUpdate (zwjEmojisToCheck) {\n    const allSupported = checkZwjSupport(zwjEmojisToCheck, refs.baselineEmoji, emojiToDomNode);\n    if (allSupported) {\n      // Even if all emoji are supported, we still need to reset the scroll top to 0 when emojis change\n      resetScrollTopInRaf();\n    } else {\n      // Force update. We only do this if there are any unsupported ZWJ characters since otherwise,\n      // for browsers that support all emoji, it would be an unnecessary extra re-render.\n      state.currentEmojis = [...state.currentEmojis];\n    }\n  }\n\n  function isZwjSupported (emoji) {\n    return !emoji.unicode || !hasZwj(emoji) || supportedZwjEmojis.get(emoji.unicode)\n  }\n\n  async function filterEmojisByVersion (emojis) {\n    const emojiSupportLevel = state.emojiVersion || await detectEmojiSupportLevel();\n    // !version corresponds to custom emoji\n    return emojis.filter(({ version }) => !version || version <= emojiSupportLevel)\n  }\n\n  async function summarizeEmojis (emojis) {\n    return summarizeEmojisForUI(emojis, state.emojiVersion || await detectEmojiSupportLevel())\n  }\n\n  async function getEmojisByGroup (group) {\n    // -1 is custom emoji\n    const emoji = group === -1 ? state.customEmoji : await state.database.getEmojiByGroup(group);\n    return summarizeEmojis(await filterEmojisByVersion(emoji))\n  }\n\n  async function getEmojisBySearchQuery (query) {\n    return summarizeEmojis(await filterEmojisByVersion(await state.database.getEmojiBySearchQuery(query)))\n  }\n\n  createEffect(() => {\n  });\n\n  //\n  // Derive currentEmojisWithCategories from currentEmojis. This is always done even if there\n  // are no categories, because it's just easier to code the HTML this way.\n  //\n\n  createEffect(() => {\n    function calculateCurrentEmojisWithCategories () {\n      const { searchMode, currentEmojis } = state;\n      if (searchMode) {\n        return [\n          {\n            category: '',\n            emojis: currentEmojis\n          }\n        ]\n      }\n      const categoriesToEmoji = new Map();\n      for (const emoji of currentEmojis) {\n        const category = emoji.category || '';\n        let emojis = categoriesToEmoji.get(category);\n        if (!emojis) {\n          emojis = [];\n          categoriesToEmoji.set(category, emojis);\n        }\n        emojis.push(emoji);\n      }\n      return [...categoriesToEmoji.entries()]\n        .map(([category, emojis]) => ({ category, emojis }))\n        .sort((a, b) => state.customCategorySorting(a.category, b.category))\n    }\n\n    const newEmojisWithCategories = calculateCurrentEmojisWithCategories();\n    updateCurrentEmojisWithCategories(newEmojisWithCategories);\n  });\n\n  //\n  // Handle active search item (i.e. pressing up or down while searching)\n  //\n\n  createEffect(() => {\n    state.activeSearchItemId = state.activeSearchItem !== -1 && state.currentEmojis[state.activeSearchItem].id;\n  });\n\n  //\n  // Handle user input on the search input\n  //\n\n  createEffect(() => {\n    const { rawSearchText } = state;\n    rIC(() => {\n      state.searchText = (rawSearchText || '').trim(); // defer to avoid input delays, plus we can trim here\n      state.activeSearchItem = -1;\n    });\n  });\n\n  function onSearchKeydown (event) {\n    if (!state.searchMode || !state.currentEmojis.length) {\n      return\n    }\n\n    const goToNextOrPrevious = (previous) => {\n      halt(event);\n      state.activeSearchItem = incrementOrDecrement(previous, state.activeSearchItem, state.currentEmojis);\n    };\n\n    switch (event.key) {\n      case 'ArrowDown':\n        return goToNextOrPrevious(false)\n      case 'ArrowUp':\n        return goToNextOrPrevious(true)\n      case 'Enter':\n        if (state.activeSearchItem === -1) {\n          // focus the first option in the list since the list must be non-empty at this point (it's verified above)\n          state.activeSearchItem = 0;\n        } else { // there is already an active search item\n          halt(event);\n          return clickEmoji(state.currentEmojis[state.activeSearchItem].id)\n        }\n    }\n  }\n\n  //\n  // Handle user input on nav\n  //\n\n  function onNavClick (event) {\n    const { target } = event;\n    const closestTarget = target.closest('.nav-button');\n    /* istanbul ignore if */\n    if (!closestTarget) {\n      return // This should never happen, but makes me nervous not to have it\n    }\n    const groupId = parseInt(closestTarget.dataset.groupId, 10);\n    refs.searchElement.value = ''; // clear search box input\n    state.rawSearchText = '';\n    state.searchText = '';\n    state.activeSearchItem = -1;\n    state.currentGroupIndex = state.groups.findIndex(_ => _.id === groupId);\n  }\n\n  function onNavKeydown (event) {\n    const { target, key } = event;\n\n    const doFocus = el => {\n      if (el) {\n        halt(event);\n        el.focus();\n      }\n    };\n\n    switch (key) {\n      case 'ArrowLeft':\n        return doFocus(target.previousElementSibling)\n      case 'ArrowRight':\n        return doFocus(target.nextElementSibling)\n      case 'Home':\n        return doFocus(target.parentElement.firstElementChild)\n      case 'End':\n        return doFocus(target.parentElement.lastElementChild)\n    }\n  }\n\n  //\n  // Handle user input on an emoji\n  //\n\n  async function clickEmoji (unicodeOrName) {\n    const emoji = await state.database.getEmojiByUnicodeOrName(unicodeOrName);\n    const emojiSummary = [...state.currentEmojis, ...state.currentFavorites]\n      .find(_ => (_.id === unicodeOrName));\n    const skinTonedUnicode = emojiSummary.unicode && unicodeWithSkin(emojiSummary, state.currentSkinTone);\n    await state.database.incrementFavoriteEmojiCount(unicodeOrName);\n    fireEvent('emoji-click', {\n      emoji,\n      skinTone: state.currentSkinTone,\n      ...(skinTonedUnicode && { unicode: skinTonedUnicode }),\n      ...(emojiSummary.name && { name: emojiSummary.name })\n    });\n  }\n\n  async function onEmojiClick (event) {\n    const { target } = event;\n    /* istanbul ignore if */\n    if (!target.classList.contains('emoji')) {\n      // This should never happen, but makes me nervous not to have it\n      return\n    }\n    halt(event);\n    const id = target.id.substring(4); // replace 'emo-' or 'fav-' prefix\n\n    /* no await */ clickEmoji(id);\n  }\n\n  //\n  // Handle user input on the skintone picker\n  //\n\n  function changeSkinTone (skinTone) {\n    state.currentSkinTone = skinTone;\n    state.skinTonePickerExpanded = false;\n    focus('skintone-button');\n    fireEvent('skin-tone-change', { skinTone });\n    /* no await */ state.database.setPreferredSkinTone(skinTone);\n  }\n\n  function onSkinToneOptionsClick (event) {\n    const { target: { id } } = event;\n    const match = id && id.match(/^skintone-(\\d)/); // skintone option format\n    /* istanbul ignore if */\n    if (!match) { // not a skintone option\n      return // This should never happen, but makes me nervous not to have it\n    }\n    halt(event);\n    const skinTone = parseInt(match[1], 10); // remove 'skintone-' prefix\n    changeSkinTone(skinTone);\n  }\n\n  function onClickSkinToneButton (event) {\n    state.skinTonePickerExpanded = !state.skinTonePickerExpanded;\n    state.activeSkinTone = state.currentSkinTone;\n    // this should always be true, since the button is obscured by the listbox, so this `if` is just to be sure\n    if (state.skinTonePickerExpanded) {\n      halt(event);\n      rAF(() => focus('skintone-list'));\n    }\n  }\n\n  // To make the animation nicer, change the z-index of the skintone picker button\n  // *after* the animation has played. This makes it appear that the picker box\n  // is expanding \"below\" the button\n  createEffect(() => {\n    if (state.skinTonePickerExpanded) {\n      refs.skinToneDropdown.addEventListener('transitionend', () => {\n        state.skinTonePickerExpandedAfterAnimation = true; // eslint-disable-line no-unused-vars\n      }, { once: true });\n    } else {\n      state.skinTonePickerExpandedAfterAnimation = false; // eslint-disable-line no-unused-vars\n    }\n  });\n\n  function onSkinToneOptionsKeydown (event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return\n    }\n    const changeActiveSkinTone = async nextSkinTone => {\n      halt(event);\n      state.activeSkinTone = nextSkinTone;\n    };\n\n    switch (event.key) {\n      case 'ArrowUp':\n        return changeActiveSkinTone(incrementOrDecrement(true, state.activeSkinTone, state.skinTones))\n      case 'ArrowDown':\n        return changeActiveSkinTone(incrementOrDecrement(false, state.activeSkinTone, state.skinTones))\n      case 'Home':\n        return changeActiveSkinTone(0)\n      case 'End':\n        return changeActiveSkinTone(state.skinTones.length - 1)\n      case 'Enter':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone)\n      case 'Escape':\n        halt(event);\n        state.skinTonePickerExpanded = false;\n        return focus('skintone-button')\n    }\n  }\n\n  function onSkinToneOptionsKeyup (event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return\n    }\n    switch (event.key) {\n      case ' ':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone)\n    }\n  }\n\n  async function onSkinToneOptionsFocusOut (event) {\n    // On blur outside of the skintone listbox, collapse the skintone picker.\n    const { relatedTarget } = event;\n    // The `else` should never happen, but makes me nervous not to have it\n    /* istanbul ignore else */\n    if (!relatedTarget || relatedTarget.id !== 'skintone-list') {\n      state.skinTonePickerExpanded = false;\n    }\n  }\n\n  function onSearchInput (event) {\n    state.rawSearchText = event.target.value;\n  }\n\n  return {\n    $set (newState) {\n      assign(state, newState);\n    },\n    $destroy () {\n      abortController.abort();\n    }\n  }\n}\n\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\n\nvar enI18n = {\n  categoriesLabel: 'Categories',\n  emojiUnsupportedMessage: 'Your browser does not support color emoji.',\n  favoritesLabel: 'Favorites',\n  loadingMessage: 'Loading…',\n  networkErrorMessage: 'Could not load emoji.',\n  regionLabel: 'Emoji picker',\n  searchDescription: 'When search results are available, press up or down to select and enter to choose.',\n  searchLabel: 'Search',\n  searchResultsLabel: 'Search results',\n  skinToneDescription: 'When expanded, press up or down to select and enter to choose.',\n  skinToneLabel: 'Choose a skin tone (currently {skinTone})',\n  skinTonesLabel: 'Skin tones',\n  skinTones: [\n    'Default',\n    'Light',\n    'Medium-Light',\n    'Medium',\n    'Medium-Dark',\n    'Dark'\n  ],\n  categories: {\n    custom: 'Custom',\n    'smileys-emotion': 'Smileys and emoticons',\n    'people-body': 'People and body',\n    'animals-nature': 'Animals and nature',\n    'food-drink': 'Food and drink',\n    'travel-places': 'Travel and places',\n    activities: 'Activities',\n    objects: 'Objects',\n    symbols: 'Symbols',\n    flags: 'Flags'\n  }\n};\n\nvar baseStyles = \":host{--emoji-size:1.375rem;--emoji-padding:0.5rem;--category-emoji-size:var(--emoji-size);--category-emoji-padding:var(--emoji-padding);--indicator-height:3px;--input-border-radius:0.5rem;--input-border-size:1px;--input-font-size:1rem;--input-line-height:1.5;--input-padding:0.25rem;--num-columns:8;--outline-size:2px;--border-size:1px;--border-radius:0;--skintone-border-radius:1rem;--category-font-size:1rem;display:flex;width:min-content;height:400px}:host,:host(.light){color-scheme:light;--background:#fff;--border-color:#e0e0e0;--indicator-color:#385ac1;--input-border-color:#999;--input-font-color:#111;--input-placeholder-color:#999;--outline-color:#999;--category-font-color:#111;--button-active-background:#e6e6e6;--button-hover-background:#d9d9d9}:host(.dark){color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}@media (prefers-color-scheme:dark){:host{color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}}:host([hidden]){display:none}button{margin:0;padding:0;border:0;background:0 0;box-shadow:none;-webkit-tap-highlight-color:transparent}button::-moz-focus-inner{border:0}input{padding:0;margin:0;line-height:1.15;font-family:inherit}input[type=search]{-webkit-appearance:none}:focus{outline:var(--outline-color) solid var(--outline-size);outline-offset:calc(-1*var(--outline-size))}:host([data-js-focus-visible]) :focus:not([data-focus-visible-added]){outline:0}:focus:not(:focus-visible){outline:0}.hide-focus{outline:0}*{box-sizing:border-box}.picker{contain:content;display:flex;flex-direction:column;background:var(--background);border:var(--border-size) solid var(--border-color);border-radius:var(--border-radius);width:100%;height:100%;overflow:hidden;--total-emoji-size:calc(var(--emoji-size) + (2 * var(--emoji-padding)));--total-category-emoji-size:calc(var(--category-emoji-size) + (2 * var(--category-emoji-padding)))}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.hidden{opacity:0;pointer-events:none}.abs-pos{position:absolute;left:0;top:0}.gone{display:none!important}.skintone-button-wrapper,.skintone-list{background:var(--background);z-index:3}.skintone-button-wrapper.expanded{z-index:1}.skintone-list{position:absolute;inset-inline-end:0;top:0;z-index:2;overflow:visible;border-bottom:var(--border-size) solid var(--border-color);border-radius:0 0 var(--skintone-border-radius) var(--skintone-border-radius);will-change:transform;transition:transform .2s ease-in-out;transform-origin:center 0}@media (prefers-reduced-motion:reduce){.skintone-list{transition-duration:.001s}}@supports not (inset-inline-end:0){.skintone-list{right:0}}.skintone-list.no-animate{transition:none}.tabpanel{overflow-y:auto;scrollbar-gutter:stable;-webkit-overflow-scrolling:touch;will-change:transform;min-height:0;flex:1;contain:content}.emoji-menu{display:grid;grid-template-columns:repeat(var(--num-columns),var(--total-emoji-size));justify-content:space-around;align-items:flex-start;width:100%}.emoji-menu.visibility-auto{content-visibility:auto;contain-intrinsic-size:calc(var(--num-columns)*var(--total-emoji-size)) calc(var(--num-rows)*var(--total-emoji-size))}.category{padding:var(--emoji-padding);font-size:var(--category-font-size);color:var(--category-font-color)}.emoji,button.emoji{font-size:var(--emoji-size);display:flex;align-items:center;justify-content:center;border-radius:100%;height:var(--total-emoji-size);width:var(--total-emoji-size);line-height:1;overflow:hidden;font-family:var(--emoji-font-family);cursor:pointer}@media (hover:hover) and (pointer:fine){.emoji:hover,button.emoji:hover{background:var(--button-hover-background)}}.emoji.active,.emoji:active,button.emoji.active,button.emoji:active{background:var(--button-active-background)}.onscreen .custom-emoji::after{content:\\\"\\\";width:var(--emoji-size);height:var(--emoji-size);background-repeat:no-repeat;background-position:center center;background-size:contain;background-image:var(--custom-emoji-background)}.nav,.nav-button{align-items:center}.nav{display:grid;justify-content:space-between;contain:content}.nav-button{display:flex;justify-content:center}.nav-emoji{font-size:var(--category-emoji-size);width:var(--total-category-emoji-size);height:var(--total-category-emoji-size)}.indicator-wrapper{display:flex;border-bottom:1px solid var(--border-color)}.indicator{width:calc(100%/var(--num-groups));height:var(--indicator-height);opacity:var(--indicator-opacity);background-color:var(--indicator-color);will-change:transform,opacity;transition:opacity .1s linear,transform .25s ease-in-out}@media (prefers-reduced-motion:reduce){.indicator{will-change:opacity;transition:opacity .1s linear}}.pad-top,input.search{background:var(--background);width:100%}.pad-top{height:var(--emoji-padding);z-index:3}.search-row{display:flex;align-items:center;position:relative;padding-inline-start:var(--emoji-padding);padding-bottom:var(--emoji-padding)}.search-wrapper{flex:1;min-width:0}input.search{padding:var(--input-padding);border-radius:var(--input-border-radius);border:var(--input-border-size) solid var(--input-border-color);color:var(--input-font-color);font-size:var(--input-font-size);line-height:var(--input-line-height)}input.search::placeholder{color:var(--input-placeholder-color)}.favorites{overflow-y:auto;scrollbar-gutter:stable;display:flex;flex-direction:row;border-top:var(--border-size) solid var(--border-color);contain:content}.message{padding:var(--emoji-padding)}\";\n\nconst PROPS = [\n  'customEmoji',\n  'customCategorySorting',\n  'database',\n  'dataSource',\n  'i18n',\n  'locale',\n  'skinToneEmoji',\n  'emojiVersion'\n];\n\n// Styles injected ourselves, so we can declare the FONT_FAMILY variable in one place\nconst EXTRA_STYLES = `:host{--emoji-font-family:${FONT_FAMILY}}`;\n\nclass PickerElement extends HTMLElement {\n  constructor (props) {\n    super();\n    this.attachShadow({ mode: 'open' });\n    const style = document.createElement('style');\n    style.textContent = baseStyles + EXTRA_STYLES;\n    this.shadowRoot.appendChild(style);\n    this._ctx = {\n      // Set defaults\n      locale: DEFAULT_LOCALE,\n      dataSource: DEFAULT_DATA_SOURCE,\n      skinToneEmoji: DEFAULT_SKIN_TONE_EMOJI,\n      customCategorySorting: DEFAULT_CATEGORY_SORTING,\n      customEmoji: null,\n      i18n: enI18n,\n      emojiVersion: null,\n      ...props\n    };\n    // Handle properties set before the element was upgraded\n    for (const prop of PROPS) {\n      if (prop !== 'database' && Object.prototype.hasOwnProperty.call(this, prop)) {\n        this._ctx[prop] = this[prop];\n        delete this[prop];\n      }\n    }\n    this._dbFlush(); // wait for a flush before creating the db, in case the user calls e.g. a setter or setAttribute\n  }\n\n  connectedCallback () {\n    // The _cmp may be defined if the component was immediately disconnected and then reconnected. In that case,\n    // do nothing (preserve the state)\n    if (!this._cmp) {\n      this._cmp = createRoot(this.shadowRoot, this._ctx);\n    }\n  }\n\n  disconnectedCallback () {\n    // Check in a microtask if the element is still connected. If so, treat this as a \"move\" rather than a disconnect\n    // Inspired by Vue: https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue\n    qM(() => {\n      // this._cmp may be defined if connect-disconnect-connect-disconnect occurs synchronously\n      if (!this.isConnected && this._cmp) {\n        this._cmp.$destroy();\n        this._cmp = undefined;\n\n        const { database } = this._ctx;\n        database.close()\n          // only happens if the database failed to load in the first place, so we don't care\n          .catch(err => console.error(err));\n      }\n    });\n  }\n\n  static get observedAttributes () {\n    return ['locale', 'data-source', 'skin-tone-emoji', 'emoji-version'] // complex objects aren't supported, also use kebab-case\n  }\n\n  attributeChangedCallback (attrName, oldValue, newValue) {\n    this._set(\n      // convert from kebab-case to camelcase\n      // see https://github.com/sveltejs/svelte/issues/3852#issuecomment-665037015\n      attrName.replace(/-([a-z])/g, (_, up) => up.toUpperCase()),\n      // convert string attribute to float if necessary\n      attrName === 'emoji-version' ? parseFloat(newValue) : newValue\n    );\n  }\n\n  _set (prop, newValue) {\n    this._ctx[prop] = newValue;\n    if (this._cmp) {\n      this._cmp.$set({ [prop]: newValue });\n    }\n    if (['locale', 'dataSource'].includes(prop)) {\n      this._dbFlush();\n    }\n  }\n\n  _dbCreate () {\n    const { locale, dataSource, database } = this._ctx;\n    // only create a new database if we really need to\n    if (!database || database.locale !== locale || database.dataSource !== dataSource) {\n      this._set('database', new _database_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({ locale, dataSource }));\n    }\n  }\n\n  // Update the Database in one microtask if the locale/dataSource change. We do one microtask\n  // so we don't create two Databases if e.g. both the locale and the dataSource change\n  _dbFlush () {\n    qM(() => (\n      this._dbCreate()\n    ));\n  }\n}\n\nconst definitions = {};\n\nfor (const prop of PROPS) {\n  definitions[prop] = {\n    get () {\n      if (prop === 'database') {\n        // in rare cases, the microtask may not be flushed yet, so we need to instantiate the DB\n        // now if the user is asking for it\n        this._dbCreate();\n      }\n      return this._ctx[prop]\n    },\n    set (val) {\n      if (prop === 'database') {\n        throw new Error('database is read-only')\n      }\n      this._set(prop, val);\n    }\n  };\n}\n\nObject.defineProperties(PickerElement.prototype, definitions);\n\n/* istanbul ignore else */\nif (!customElements.get('emoji-picker')) { // if already defined, do nothing (e.g. same script imported twice)\n  customElements.define('emoji-picker', PickerElement);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW1vamktcGlja2VyLWVsZW1lbnQvcGlja2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaUJBQWlCOztBQUVqRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Q0FBNkM7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLFlBQVk7QUFDaEIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1FQUFtRSxTQUFTOztBQUU1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsWUFBWSx1Q0FBdUM7QUFDbkQsWUFBWSx1Q0FBdUM7O0FBRW5EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxRQUFRO0FBQ1I7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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTs7QUFFb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9lbW9qaS1waWNrZXItZWxlbWVudC9waWNrZXIuanM/OTE2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF0YWJhc2UgZnJvbSAnLi9kYXRhYmFzZS5qcyc7XG5cbi8vIHZpYSBodHRwczovL3VucGtnLmNvbS9icm93c2UvZW1vamliYXNlLWRhdGFANi4wLjAvbWV0YS9ncm91cHMuanNvblxuY29uc3QgYWxsR3JvdXBzID0gW1xuICBbLTEsICfinKgnLCAnY3VzdG9tJ10sXG4gIFswLCAn8J+YgCcsICdzbWlsZXlzLWVtb3Rpb24nXSxcbiAgWzEsICfwn5GLJywgJ3Blb3BsZS1ib2R5J10sXG4gIFszLCAn8J+QsScsICdhbmltYWxzLW5hdHVyZSddLFxuICBbNCwgJ/CfjY4nLCAnZm9vZC1kcmluayddLFxuICBbNSwgJ/Cfj6DvuI8nLCAndHJhdmVsLXBsYWNlcyddLFxuICBbNiwgJ+KavScsICdhY3Rpdml0aWVzJ10sXG4gIFs3LCAn8J+TnScsICdvYmplY3RzJ10sXG4gIFs4LCAn4puU77iPJywgJ3N5bWJvbHMnXSxcbiAgWzksICfwn4+BJywgJ2ZsYWdzJ11cbl0ubWFwKChbaWQsIGVtb2ppLCBuYW1lXSkgPT4gKHsgaWQsIGVtb2ppLCBuYW1lIH0pKTtcblxuY29uc3QgZ3JvdXBzID0gYWxsR3JvdXBzLnNsaWNlKDEpO1xuXG5jb25zdCBNSU5fU0VBUkNIX1RFWFRfTEVOR1RIID0gMjtcbmNvbnN0IE5VTV9TS0lOX1RPTkVTID0gNjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmNvbnN0IHJJQyA9IHR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gcmVxdWVzdElkbGVDYWxsYmFjayA6IHNldFRpbWVvdXQ7XG5cbi8vIGNoZWNrIGZvciBaV0ogKHplcm8gd2lkdGggam9pbmVyKSBjaGFyYWN0ZXJcbmZ1bmN0aW9uIGhhc1p3aiAoZW1vamkpIHtcbiAgcmV0dXJuIGVtb2ppLnVuaWNvZGUuaW5jbHVkZXMoJ1xcdTIwMGQnKVxufVxuXG4vLyBGaW5kIG9uZSBnb29kIHJlcHJlc2VudGF0aXZlIGVtb2ppIGZyb20gZWFjaCB2ZXJzaW9uIHRvIHRlc3QgYnkgY2hlY2tpbmcgaXRzIGNvbG9yLlxuLy8gSWRlYWxseSBpdCBzaG91bGQgaGF2ZSBjb2xvciBpbiB0aGUgY2VudGVyLiBGb3Igc29tZSBpbnNwaXJhdGlvbiwgc2VlOlxuLy8gaHR0cHM6Ly9hYm91dC5naXRsYWIuY29tL2Jsb2cvMjAxOC8wNS8zMC9qb3VybmV5LWluLW5hdGl2ZS11bmljb2RlLWVtb2ppL1xuLy9cbi8vIE5vdGUgdGhhdCBmb3IgY2VydGFpbiB2ZXJzaW9ucyAoMTIuMSwgMTMuMSksIHRoZXJlIGlzIG5vIHBvaW50IGluIHRlc3RpbmcgdGhlbSBleHBsaWNpdGx5LCBiZWNhdXNlXG4vLyBhbGwgdGhlIGVtb2ppIGZyb20gdGhpcyB2ZXJzaW9uIGFyZSBjb21wb3VuZC1lbW9qaSBmcm9tIHByZXZpb3VzIHZlcnNpb25zLiBTbyB0aGV5IHdvdWxkIHBhc3MgYSBjb2xvclxuLy8gdGVzdCwgZXZlbiBpbiBicm93c2VycyB0aGF0IGRpc3BsYXkgdGhlbSBhcyBkb3VibGUgZW1vamkuIChFLmcuIFwiZmFjZSBpbiBjbG91ZHNcIiBtaWdodCByZW5kZXIgYXNcbi8vIFwiZmFjZSB3aXRob3V0IG1vdXRoXCIgcGx1cyBcImZvZ1wiLikgVGhlc2UgZW1vamkgY2FuIG9ubHkgYmUgZmlsdGVyZWQgdXNpbmcgdGhlIHdpZHRoIHRlc3QsXG4vLyB3aGljaCBoYXBwZW5zIGluIGNoZWNrWndqU3VwcG9ydC5qcy5cbmNvbnN0IHZlcnNpb25zQW5kVGVzdEVtb2ppID0ge1xuICAn8J+rqCc6IDE1LjEsIC8vIHNoYWtpbmcgaGVhZCwgdGVjaG5pY2FsbHkgZnJvbSB2MTUgYnV0IHNlZSBub3RlIGFib3ZlXG4gICfwn6ugJzogMTQsXG4gICfwn6WyJzogMTMuMSwgLy8gc21pbGluZyBmYWNlIHdpdGggdGVhciwgdGVjaG5pY2FsbHkgZnJvbSB2MTMgYnV0IHNlZSBub3RlIGFib3ZlXG4gICfwn6W7JzogMTIuMSwgLy8gc2FyaSwgdGVjaG5pY2FsbHkgZnJvbSB2MTIgYnV0IHNlZSBub3RlIGFib3ZlXG4gICfwn6WwJzogMTEsXG4gICfwn6SpJzogNSxcbiAgJ/CfkbHigI3imYDvuI8nOiA0LFxuICAn8J+koyc6IDMsXG4gICfwn5GB77iP4oCN8J+XqO+4jyc6IDIsXG4gICfwn5iAJzogMSxcbiAgJ/CfmJDvuI8nOiAwLjcsXG4gICfwn5iDJzogMC42XG59O1xuXG5jb25zdCBUSU1FT1VUX0JFRk9SRV9MT0FESU5HX01FU1NBR0UgPSAxMDAwOyAvLyAxIHNlY29uZFxuY29uc3QgREVGQVVMVF9TS0lOX1RPTkVfRU1PSkkgPSAn8J+WkO+4jyc7XG5jb25zdCBERUZBVUxUX05VTV9DT0xVTU5TID0gODtcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9maXZldGhpcnR5ZWlnaHQuY29tL2ZlYXR1cmVzL3RoZS0xMDAtbW9zdC11c2VkLWVtb2ppcy8gYW5kXG4vLyBodHRwczovL2Jsb2cuZW1vamlwZWRpYS5vcmcvZmFjZWJvb2stcmV2ZWFscy1tb3N0LWFuZC1sZWFzdC11c2VkLWVtb2ppcy8gd2l0aFxuLy8gYSBiaXQgb2YgbXkgb3duIGN1cmF0aW9uLiAoRS5nLiBhdm9pZCB0aGUgXCJPS1wiIGdlc3R1cmUgYmVjYXVzZSBvZiBjb25ub3RhdGlvbnM6XG4vLyBodHRwczovL2Vtb2ppcGVkaWEub3JnL29rLWhhbmQvKVxuY29uc3QgTU9TVF9DT01NT05MWV9VU0VEX0VNT0pJID0gW1xuICAn8J+YiicsXG4gICfwn5iSJyxcbiAgJ+KdpO+4jycsXG4gICfwn5GN77iPJyxcbiAgJ/CfmI0nLFxuICAn8J+YgicsXG4gICfwn5itJyxcbiAgJ+KYuu+4jycsXG4gICfwn5iUJyxcbiAgJ/CfmKknLFxuICAn8J+YjycsXG4gICfwn5KVJyxcbiAgJ/CfmYwnLFxuICAn8J+YmCdcbl07XG5cbi8vIEl0J3MgaW1wb3J0YW50IHRvIGxpc3QgVHdlbW9qaSBNb3ppbGxhIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UsIGJlY2F1c2UgTW96aWxsYSBidW5kbGVzIHRoZWlyXG4vLyBvd24gZm9udCBvbiBzb21lIHBsYXRmb3JtcyAobm90YWJseSBXaW5kb3dzIGFuZCBMaW51eCBhcyBvZiB0aGlzIHdyaXRpbmcpLiBUeXBpY2FsbHksIE1vemlsbGFcbi8vIHVwZGF0ZXMgZmFzdGVyIHRoYW4gdGhlIHVuZGVybHlpbmcgT1MsIGFuZCB3ZSBkb24ndCB3YW50IHRvIHJlbmRlciBvbGRlciBlbW9qaSBpbiBvbmUgZm9udCBhbmRcbi8vIG5ld2VyIGVtb2ppIGluIGFub3RoZXIgZm9udDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xhbmxhd3Nvbi9lbW9qaS1waWNrZXItZWxlbWVudC9wdWxsLzI2OCNpc3N1ZWNvbW1lbnQtMTA3MzM0NzI4M1xuY29uc3QgRk9OVF9GQU1JTFkgPSAnXCJUd2Vtb2ppIE1vemlsbGFcIixcIkFwcGxlIENvbG9yIEVtb2ppXCIsXCJTZWdvZSBVSSBFbW9qaVwiLFwiU2Vnb2UgVUkgU3ltYm9sXCIsJyArXG4gICdcIk5vdG8gQ29sb3IgRW1vamlcIixcIkVtb2ppT25lIENvbG9yXCIsXCJBbmRyb2lkIEVtb2ppXCIsc2Fucy1zZXJpZic7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBERUZBVUxUX0NBVEVHT1JZX1NPUlRJTkcgPSAoYSwgYikgPT4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG5cbi8vIFRlc3QgaWYgYW4gZW1vamkgaXMgc3VwcG9ydGVkIGJ5IHJlbmRlcmluZyBpdCB0byBjYW52YXMgYW5kIGNoZWNraW5nIHRoYXQgdGhlIGNvbG9yIGlzIG5vdCBibGFja1xuLy8gU2VlIGh0dHBzOi8vYWJvdXQuZ2l0bGFiLmNvbS9ibG9nLzIwMTgvMDUvMzAvam91cm5leS1pbi1uYXRpdmUtdW5pY29kZS1lbW9qaS9cbi8vIGFuZCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9pZi1lbW9qaSBmb3IgaW5zcGlyYXRpb25cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgbGFyZ2VseSBib3Jyb3dlZCBmcm9tIGlmLWVtb2ppLCBhZGRpbmcgdGhlIGZvbnQtZmFtaWx5XG5cblxuY29uc3QgZ2V0VGV4dEZlYXR1cmUgPSAodGV4dCwgY29sb3IpID0+IHtcbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5oZWlnaHQgPSAxO1xuXG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHtcbiAgICAvLyBJbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2Ugb2YgYGdldEltYWdlRGF0YSgpYFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvZ2V0Q29udGV4dEF0dHJpYnV0ZXMjd2lsbHJlYWRmcmVxdWVudGx5XG4gICAgd2lsbFJlYWRGcmVxdWVudGx5OiB0cnVlXG4gIH0pO1xuICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gIGN0eC5mb250ID0gYDEwMHB4ICR7Rk9OVF9GQU1JTFl9YDtcbiAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICBjdHguc2NhbGUoMC4wMSwgMC4wMSk7XG4gIGN0eC5maWxsVGV4dCh0ZXh0LCAwLCAwKTtcblxuICByZXR1cm4gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKS5kYXRhXG59O1xuXG5jb25zdCBjb21wYXJlRmVhdHVyZXMgPSAoZmVhdHVyZTEsIGZlYXR1cmUyKSA9PiB7XG4gIGNvbnN0IGZlYXR1cmUxU3RyID0gWy4uLmZlYXR1cmUxXS5qb2luKCcsJyk7XG4gIGNvbnN0IGZlYXR1cmUyU3RyID0gWy4uLmZlYXR1cmUyXS5qb2luKCcsJyk7XG4gIC8vIFRoaXMgaXMgUkdCQSwgc28gZm9yIDAsMCwwLCB3ZSBhcmUgY2hlY2tpbmcgdGhhdCB0aGUgZmlyc3QgUkdCIGlzIG5vdCBhbGwgemVyb2VzLlxuICAvLyBNb3N0IG9mIHRoZSB0aW1lIHdoZW4gdW5zdXBwb3J0ZWQgdGhpcyBpcyAwLDAsMCwwLCBidXQgb24gQ2hyb21lIG9uIE1hYyBpdCBpc1xuICAvLyAwLDAsMCw2MSAtIHRoZXJlIGlzIGEgdHJhbnNwYXJlbmN5IGhlcmUuXG4gIHJldHVybiBmZWF0dXJlMVN0ciA9PT0gZmVhdHVyZTJTdHIgJiYgIWZlYXR1cmUxU3RyLnN0YXJ0c1dpdGgoJzAsMCwwLCcpXG59O1xuXG5mdW5jdGlvbiB0ZXN0Q29sb3JFbW9qaVN1cHBvcnRlZCAodGV4dCkge1xuICAvLyBSZW5kZXIgd2hpdGUgYW5kIGJsYWNrIGFuZCB0aGVuIGNvbXBhcmUgdGhlbSB0byBlYWNoIG90aGVyIGFuZCBlbnN1cmUgdGhleSdyZSB0aGUgc2FtZVxuICAvLyBjb2xvciwgYW5kIG5laXRoZXIgb25lIGlzIGJsYWNrLiBUaGlzIHNob3dzIHRoYXQgdGhlIGVtb2ppIHdhcyByZW5kZXJlZCBpbiBjb2xvci5cbiAgY29uc3QgZmVhdHVyZTEgPSBnZXRUZXh0RmVhdHVyZSh0ZXh0LCAnIzAwMCcpO1xuICBjb25zdCBmZWF0dXJlMiA9IGdldFRleHRGZWF0dXJlKHRleHQsICcjZmZmJyk7XG4gIHJldHVybiBmZWF0dXJlMSAmJiBmZWF0dXJlMiAmJiBjb21wYXJlRmVhdHVyZXMoZmVhdHVyZTEsIGZlYXR1cmUyKVxufVxuXG4vLyByYXRoZXIgdGhhbiBjaGVjayBldmVyeSBlbW9qaSBldmVyLCB3aGljaCB3b3VsZCBiZSBleHBlbnNpdmUsIGp1c3QgY2hlY2sgc29tZSByZXByZXNlbnRhdGl2ZXMgZnJvbSB0aGVcbi8vIGRpZmZlcmVudCBlbW9qaSByZWxlYXNlcyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgZm9udCBzdXBwb3J0c1xuXG5mdW5jdGlvbiBkZXRlcm1pbmVFbW9qaVN1cHBvcnRMZXZlbCAoKSB7XG4gIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyh2ZXJzaW9uc0FuZFRlc3RFbW9qaSk7XG4gIHRyeSB7XG4gICAgLy8gc3RhcnQgd2l0aCBsYXRlc3QgZW1vamkgYW5kIHdvcmsgYmFja3dhcmRzXG4gICAgZm9yIChjb25zdCBbZW1vamksIHZlcnNpb25dIG9mIGVudHJpZXMpIHtcbiAgICAgIGlmICh0ZXN0Q29sb3JFbW9qaVN1cHBvcnRlZChlbW9qaSkpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgLy8gY2FudmFzIGVycm9yXG4gIH0gZmluYWxseSB7XG4gIH1cbiAgLy8gSW4gY2FzZSBvZiBhbiBlcnJvciwgYmUgZ2VuZXJvdXMgYW5kIGp1c3QgYXNzdW1lIGFsbCBlbW9qaSBhcmUgc3VwcG9ydGVkIChlLmcuIGZvciBjYW52YXMgZXJyb3JzXG4gIC8vIGR1ZSB0byBhbnRpLWZpbmdlcnByaW50aW5nIGFkZC1vbnMpLiBCZXR0ZXIgdG8gc2hvdyBzb21lIGdyYXkgYm94ZXMgdGhhbiBub3RoaW5nIGF0IGFsbC5cbiAgcmV0dXJuIGVudHJpZXNbMF1bMV0gLy8gZmlyc3Qgb25lIGluIHRoZSBsaXN0IGlzIHRoZSBtb3N0IHJlY2VudCB2ZXJzaW9uXG59XG5cbi8vIENoZWNrIHdoaWNoIGVtb2ppcyB3ZSBrbm93IGZvciBzdXJlIGFyZW4ndCBzdXBwb3J0ZWQsIGJhc2VkIG9uIFVuaWNvZGUgdmVyc2lvbiBsZXZlbFxubGV0IHByb21pc2U7XG5jb25zdCBkZXRlY3RFbW9qaVN1cHBvcnRMZXZlbCA9ICgpID0+IHtcbiAgaWYgKCFwcm9taXNlKSB7XG4gICAgLy8gRGVsYXkgc28gaXQgY2FuIHJ1biB3aGlsZSB0aGUgSURCIGRhdGFiYXNlIGlzIGJlaW5nIGNyZWF0ZWQgYnkgdGhlIGJyb3dzZXIgKG9uIGFub3RoZXIgdGhyZWFkKS5cbiAgICAvLyBUaGlzIGhlbHBzIGVzcGVjaWFsbHkgd2l0aCBmaXJzdCBsb2FkIOKAkyB3ZSB3YW50IHRvIHN0YXJ0IHByZS1wb3B1bGF0aW5nIHRoZSBkYXRhYmFzZSBvbiB0aGUgbWFpbiB0aHJlYWQsXG4gICAgLy8gYW5kIHRoZW4gd2FpdCBmb3IgSURCIHRvIGNvbW1pdCBldmVyeXRoaW5nLCBhbmQgd2hpbGUgd2FpdGluZyB3ZSBydW4gdGhpcyBjaGVjay5cbiAgICBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiAoXG4gICAgICBySUMoKCkgPT4gKFxuICAgICAgICByZXNvbHZlKGRldGVybWluZUVtb2ppU3VwcG9ydExldmVsKCkpIC8vIGRlbGF5IHNvIGlkZWFsbHkgdGhpcyBjYW4gcnVuIHdoaWxlIElEQiBpcyBmaXJzdCBwb3B1bGF0aW5nXG4gICAgICApKVxuICAgICkpO1xuICB9XG4gIHJldHVybiBwcm9taXNlXG59O1xuLy8gZGV0ZXJtaW5lIHdoaWNoIGVtb2ppcyBjb250YWluaW5nIFpXSiAoemVybyB3aWR0aCBqb2luZXIpIGNoYXJhY3RlcnNcbi8vIGFyZSBzdXBwb3J0ZWQgKHJlbmRlcmVkIGFzIG9uZSBnbHlwaCkgcmF0aGVyIHRoYW4gdW5zdXBwb3J0ZWQgKHJlbmRlcmVkIGFzIHR3byBvciBtb3JlIGdseXBocylcbmNvbnN0IHN1cHBvcnRlZFp3akVtb2ppcyA9IG5ldyBNYXAoKTtcblxuY29uc3QgVkFSSUFUSU9OX1NFTEVDVE9SID0gJ1xcdWZlMGYnO1xuY29uc3QgU0tJTlRPTkVfTU9ESUZJRVIgPSAnXFx1ZDgzYyc7XG5jb25zdCBaV0ogPSAnXFx1MjAwZCc7XG5jb25zdCBMSUdIVF9TS0lOX1RPTkUgPSAweDFGM0ZCO1xuY29uc3QgTElHSFRfU0tJTl9UT05FX01PRElGSUVSID0gMHhkZmZiO1xuXG4vLyBUT0RPOiB0aGlzIGlzIGEgbmFpdmUgaW1wbGVtZW50YXRpb24sIHdlIGNhbiBpbXByb3ZlIGl0IGxhdGVyXG4vLyBJdCdzIG9ubHkgdXNlZCBmb3IgdGhlIHNraW50b25lIHBpY2tlciwgc28gYXMgbG9uZyBhcyBwZW9wbGUgZG9uJ3QgY3VzdG9taXplIHdpdGhcbi8vIHJlYWxseSBleG90aWMgZW1vamkgdGhlbiBpdCBzaG91bGQgd29yayBmaW5lXG5mdW5jdGlvbiBhcHBseVNraW5Ub25lIChzdHIsIHNraW5Ub25lKSB7XG4gIGlmIChza2luVG9uZSA9PT0gMCkge1xuICAgIHJldHVybiBzdHJcbiAgfVxuICBjb25zdCB6d2pJbmRleCA9IHN0ci5pbmRleE9mKFpXSik7XG4gIGlmICh6d2pJbmRleCAhPT0gLTEpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCB6d2pJbmRleCkgK1xuICAgICAgU3RyaW5nLmZyb21Db2RlUG9pbnQoTElHSFRfU0tJTl9UT05FICsgc2tpblRvbmUgLSAxKSArXG4gICAgICBzdHIuc3Vic3RyaW5nKHp3akluZGV4KVxuICB9XG4gIGlmIChzdHIuZW5kc1dpdGgoVkFSSUFUSU9OX1NFTEVDVE9SKSkge1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xuICB9XG4gIHJldHVybiBzdHIgKyBTS0lOVE9ORV9NT0RJRklFUiArIFN0cmluZy5mcm9tQ29kZVBvaW50KExJR0hUX1NLSU5fVE9ORV9NT0RJRklFUiArIHNraW5Ub25lIC0gMSlcbn1cblxuZnVuY3Rpb24gaGFsdCAoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG5cbi8vIEltcGxlbWVudGF0aW9uIGxlZnQvcmlnaHQgb3IgdXAvZG93biBuYXZpZ2F0aW9uLCBjaXJjbGluZyBiYWNrIHdoZW4geW91XG4vLyByZWFjaCB0aGUgc3RhcnQvZW5kIG9mIHRoZSBsaXN0XG5mdW5jdGlvbiBpbmNyZW1lbnRPckRlY3JlbWVudCAoZGVjcmVtZW50LCB2YWwsIGFycikge1xuICB2YWwgKz0gKGRlY3JlbWVudCA/IC0xIDogMSk7XG4gIGlmICh2YWwgPCAwKSB7XG4gICAgdmFsID0gYXJyLmxlbmd0aCAtIDE7XG4gIH0gZWxzZSBpZiAodmFsID49IGFyci5sZW5ndGgpIHtcbiAgICB2YWwgPSAwO1xuICB9XG4gIHJldHVybiB2YWxcbn1cblxuLy8gbGlrZSBsb2Rhc2gncyB1bmlxQnkgYnV0IG11Y2ggc21hbGxlclxuZnVuY3Rpb24gdW5pcUJ5IChhcnIsIGZ1bmMpIHtcbiAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICBjb25zdCByZXMgPSBbXTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgIGNvbnN0IGtleSA9IGZ1bmMoaXRlbSk7XG4gICAgaWYgKCFzZXQuaGFzKGtleSkpIHtcbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgIHJlcy5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8vIFdlIGRvbid0IG5lZWQgYWxsIHRoZSBkYXRhIG9uIGV2ZXJ5IGVtb2ppLCBhbmQgdGhlcmUgYXJlIHNwZWNpZmljIHRoaW5ncyB3ZSBuZWVkXG4vLyBmb3IgdGhlIFVJLCBzbyBidWlsZCBhIFwidmlldyBtb2RlbFwiIGZyb20gdGhlIGVtb2ppIG9iamVjdCB3ZSBnb3QgZnJvbSB0aGUgZGF0YWJhc2VcblxuZnVuY3Rpb24gc3VtbWFyaXplRW1vamlzRm9yVUkgKGVtb2ppcywgZW1vamlTdXBwb3J0TGV2ZWwpIHtcbiAgY29uc3QgdG9TaW1wbGVTa2luc01hcCA9IHNraW5zID0+IHtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHNraW4gb2Ygc2tpbnMpIHtcbiAgICAgIC8vIGlnbm9yZSBhcnJheXMgbGlrZSBbMSwgMl0gd2l0aCBtdWx0aXBsZSBza2luIHRvbmVzXG4gICAgICAvLyBhbHNvIGlnbm9yZSB2YXJpYW50cyB0aGF0IGFyZSBpbiBhbiB1bnN1cHBvcnRlZCBlbW9qaSB2ZXJzaW9uXG4gICAgICAvLyAodGhlc2UgZG8gZXhpc3QgLSB2YXJpYW50cyBmcm9tIGEgZGlmZmVyZW50IHZlcnNpb24gdGhhbiB0aGVpciBiYXNlIGVtb2ppKVxuICAgICAgaWYgKHR5cGVvZiBza2luLnRvbmUgPT09ICdudW1iZXInICYmIHNraW4udmVyc2lvbiA8PSBlbW9qaVN1cHBvcnRMZXZlbCkge1xuICAgICAgICByZXNbc2tpbi50b25lXSA9IHNraW4udW5pY29kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIHJldHVybiBlbW9qaXMubWFwKCh7IHVuaWNvZGUsIHNraW5zLCBzaG9ydGNvZGVzLCB1cmwsIG5hbWUsIGNhdGVnb3J5LCBhbm5vdGF0aW9uIH0pID0+ICh7XG4gICAgdW5pY29kZSxcbiAgICBuYW1lLFxuICAgIHNob3J0Y29kZXMsXG4gICAgdXJsLFxuICAgIGNhdGVnb3J5LFxuICAgIGFubm90YXRpb24sXG4gICAgaWQ6IHVuaWNvZGUgfHwgbmFtZSxcbiAgICBza2luczogc2tpbnMgJiYgdG9TaW1wbGVTa2luc01hcChza2lucylcbiAgfSkpXG59XG5cbi8vIGltcG9ydCByQUYgZnJvbSBvbmUgcGxhY2Ugc28gdGhhdCB0aGUgYnVuZGxlIHNpemUgaXMgYSBiaXQgc21hbGxlclxuY29uc3QgckFGID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4vLyBcIlN2ZWx0ZSBhY3Rpb25cIi1saWtlIHV0aWxpdHkgdG8gZGV0ZWN0IGxheW91dCBjaGFuZ2VzIHZpYSBSZXNpemVPYnNlcnZlci5cbi8vIElmIFJlc2l6ZU9ic2VydmVyIGlzIHVuc3VwcG9ydGVkLCB3ZSBqdXN0IHVzZSByQUYgb25jZSBhbmQgZG9uJ3QgYm90aGVyIHRvIHVwZGF0ZS5cblxuXG5sZXQgcmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbic7XG5cbmZ1bmN0aW9uIHJlc2l6ZU9ic2VydmVyQWN0aW9uIChub2RlLCBhYm9ydFNpZ25hbCwgb25VcGRhdGUpIHtcbiAgbGV0IHJlc2l6ZU9ic2VydmVyO1xuICBpZiAocmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcbiAgICByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihvblVwZGF0ZSk7XG4gICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShub2RlKTtcbiAgfSBlbHNlIHsgLy8ganVzdCBydW4gb25jZSwgZG9uJ3QgYm90aGVyIHRyeWluZyB0byB0cmFjayBpdFxuICAgIHJBRihvblVwZGF0ZSk7XG4gIH1cblxuICAvLyBjbGVhbnVwIGZ1bmN0aW9uIChjYWxsZWQgb24gZGVzdHJveSlcbiAgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgaWYgKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gZ2V0IHRoZSB3aWR0aCBvZiB0aGUgdGV4dCBpbnNpZGUgb2YgYSBET00gbm9kZSwgdmlhIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81OTUyNTg5MS82ODA3NDJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVRleHRXaWR0aCAobm9kZSkge1xuICAvLyBza2lwIHJ1bm5pbmcgdGhpcyBpbiBqZXN0L3ZpdGVzdCBiZWNhdXNlIHdlIGRvbid0IG5lZWQgdG8gY2hlY2sgZm9yIGVtb2ppIHN1cHBvcnQgaW4gdGhhdCBlbnZpcm9ubWVudFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICB7XG4gICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNlbGVjdE5vZGUobm9kZS5maXJzdENoaWxkKTtcbiAgICByZXR1cm4gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgfVxufVxuXG5sZXQgYmFzZWxpbmVFbW9qaVdpZHRoO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbW9qaXMgY29udGFpbmluZyBaV0ogY2hhcmFjdGVycyBhcmUgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGJyb3dzZXIgKGRvbid0IHJlbmRlclxuICogYXMgZG91YmxlIGNoYXJhY3RlcnMpIGFuZCByZXR1cm4gdHJ1ZSBpZiBhbGwgYXJlIHN1cHBvcnRlZC5cbiAqIEBwYXJhbSB6d2pFbW9qaXNUb0NoZWNrXG4gKiBAcGFyYW0gYmFzZWxpbmVFbW9qaVxuICogQHBhcmFtIGVtb2ppVG9Eb21Ob2RlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrWndqU3VwcG9ydCAoendqRW1vamlzVG9DaGVjaywgYmFzZWxpbmVFbW9qaSwgZW1vamlUb0RvbU5vZGUpIHtcbiAgbGV0IGFsbFN1cHBvcnRlZCA9IHRydWU7XG4gIGZvciAoY29uc3QgZW1vamkgb2YgendqRW1vamlzVG9DaGVjaykge1xuICAgIGNvbnN0IGRvbU5vZGUgPSBlbW9qaVRvRG9tTm9kZShlbW9qaSk7XG4gICAgY29uc3QgZW1vamlXaWR0aCA9IGNhbGN1bGF0ZVRleHRXaWR0aChkb21Ob2RlKTtcbiAgICBpZiAodHlwZW9mIGJhc2VsaW5lRW1vamlXaWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gY2FsY3VsYXRlIHRoZSBiYXNlbGluZSBlbW9qaSB3aWR0aCBvbmx5IG9uY2VcbiAgICAgIGJhc2VsaW5lRW1vamlXaWR0aCA9IGNhbGN1bGF0ZVRleHRXaWR0aChiYXNlbGluZUVtb2ppKTtcbiAgICB9XG4gICAgLy8gT24gV2luZG93cywgc29tZSBzdXBwb3J0ZWQgZW1vamkgYXJlIH41MCUgYmlnZ2VyIHRoYW4gdGhlIGJhc2VsaW5lIGVtb2ppLCBidXQgd2hhdCB3ZSByZWFsbHkgd2FudCB0byBndWFyZFxuICAgIC8vIGFnYWluc3QgYXJlIHRoZSBvbmVzIHRoYXQgYXJlIDJ4IHRoZSBzaXplLCBiZWNhdXNlIHRob3NlIGFyZSB0cnVseSBicm9rZW4gKHBlcnNvbiB3aXRoIHJlZCBoYWlyID0gcGVyc29uIHdpdGhcbiAgICAvLyBmbG9hdGluZyByZWQgd2lnLCBibGFjayBjYXQgPSBjYXQgd2l0aCBibGFjayBzcXVhcmUsIHBvbGFyIGJlYXIgPSBiZWFyIHdpdGggc25vd2ZsYWtlLCBldGMuKVxuICAgIC8vIFNvIGhlcmUgd2Ugc2V0IHRoZSB0aHJlc2hvbGQgYXQgMS44IHRpbWVzIHRoZSBzaXplIG9mIHRoZSBiYXNlbGluZSBlbW9qaS5cbiAgICBjb25zdCBzdXBwb3J0ZWQgPSBlbW9qaVdpZHRoIC8gMS44IDwgYmFzZWxpbmVFbW9qaVdpZHRoO1xuICAgIHN1cHBvcnRlZFp3akVtb2ppcy5zZXQoZW1vamkudW5pY29kZSwgc3VwcG9ydGVkKTtcblxuICAgIGlmICghc3VwcG9ydGVkKSB7XG4gICAgICBhbGxTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFsbFN1cHBvcnRlZFxufVxuXG4vLyBsaWtlIGxvZGFzaCdzIHVuaXFcblxuZnVuY3Rpb24gdW5pcSAoYXJyKSB7XG4gIHJldHVybiB1bmlxQnkoYXJyLCBfID0+IF8pXG59XG5cbi8vIE5vdGUgd2UgcHV0IHRoaXMgaW4gaXRzIG93biBmdW5jdGlvbiBvdXRzaWRlIFBpY2tlci5qcyB0byBhdm9pZCBTdmVsdGUgZG9pbmcgYW4gaW52YWxpZGF0aW9uIG9uIHRoZSBcInNldHRlclwiIGhlcmUuXG4vLyBBdCBiZXN0IHRoZSBpbnZhbGlkYXRpb24gaXMgdXNlbGVzcywgYXQgd29yc3QgaXQgY2FuIGNhdXNlIGluZmluaXRlIGxvb3BzOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vbGFubGF3c29uL2Vtb2ppLXBpY2tlci1lbGVtZW50L3B1bGwvMTgwXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy82NTIxXG4vLyBBbHNvIG5vdGUgdGFicGFuZWxFbGVtZW50IGNhbiBiZSBudWxsIGlmIHRoZSBlbGVtZW50IGlzIGRpc2Nvbm5lY3RlZCBpbW1lZGlhdGVseSBhZnRlciBjb25uZWN0ZWRcbmZ1bmN0aW9uIHJlc2V0U2Nyb2xsVG9wSWZQb3NzaWJsZSAoZWxlbWVudCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWxlbWVudCkgeyAvLyBNYWtlcyBtZSBuZXJ2b3VzIG5vdCB0byBoYXZlIHRoaXMgYGlmYCBndWFyZFxuICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRGcm9tTWFwIChjYWNoZSwga2V5LCBmdW5jKSB7XG4gIGxldCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5KTtcbiAgaWYgKCFjYWNoZWQpIHtcbiAgICBjYWNoZWQgPSBmdW5jKCk7XG4gICAgY2FjaGUuc2V0KGtleSwgY2FjaGVkKTtcbiAgfVxuICByZXR1cm4gY2FjaGVkXG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWx1ZSkge1xuICByZXR1cm4gJycgKyB2YWx1ZVxufVxuXG5mdW5jdGlvbiBwYXJzZVRlbXBsYXRlIChodG1sU3RyaW5nKSB7XG4gIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFN0cmluZztcbiAgcmV0dXJuIHRlbXBsYXRlXG59XG5cbmNvbnN0IHBhcnNlQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgZG9tSW5zdGFuY2VzQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuLy8gVGhpcyBuZWVkcyB0byBiZSBhIHN5bWJvbCBiZWNhdXNlIGl0IG5lZWRzIHRvIGJlIGRpZmZlcmVudCBmcm9tIGFueSBwb3NzaWJsZSBvdXRwdXQgb2YgYSBrZXkgZnVuY3Rpb25cbmNvbnN0IHVua2V5ZWRTeW1ib2wgPSBTeW1ib2woJ3VuLWtleWVkJyk7XG5cbi8vIE5vdCBzdXBwb3J0ZWQgaW4gU2FmYXJpIDw9MTNcbmNvbnN0IGhhc1JlcGxhY2VDaGlsZHJlbiA9ICdyZXBsYWNlQ2hpbGRyZW4nIGluIEVsZW1lbnQucHJvdG90eXBlO1xuZnVuY3Rpb24gcmVwbGFjZUNoaWxkcmVuIChwYXJlbnROb2RlLCBuZXdDaGlsZHJlbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaGFzUmVwbGFjZUNoaWxkcmVuKSB7XG4gICAgcGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGRyZW4oLi4ubmV3Q2hpbGRyZW4pO1xuICB9IGVsc2UgeyAvLyBtaW5pbWFsIHBvbHlmaWxsIGZvciBFbGVtZW50LnByb3RvdHlwZS5yZXBsYWNlQ2hpbGRyZW5cbiAgICBwYXJlbnROb2RlLmlubmVySFRNTCA9ICcnO1xuICAgIHBhcmVudE5vZGUuYXBwZW5kKC4uLm5ld0NoaWxkcmVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkb0NoaWxkcmVuTmVlZFJlcmVuZGVyIChwYXJlbnROb2RlLCBuZXdDaGlsZHJlbikge1xuICBsZXQgb2xkQ2hpbGQgPSBwYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XG4gIGxldCBvbGRDaGlsZHJlbkNvdW50ID0gMDtcbiAgLy8gaXRlcmF0ZSB1c2luZyBmaXJzdENoaWxkL25leHRTaWJsaW5nIGJlY2F1c2UgYnJvd3NlcnMgdXNlIGEgbGlua2VkIGxpc3QgdW5kZXIgdGhlIGhvb2RcbiAgd2hpbGUgKG9sZENoaWxkKSB7XG4gICAgY29uc3QgbmV3Q2hpbGQgPSBuZXdDaGlsZHJlbltvbGRDaGlsZHJlbkNvdW50XTtcbiAgICAvLyBjaGVjayBpZiB0aGUgb2xkIGNoaWxkIGFuZCBuZXcgY2hpbGQgYXJlIHRoZSBzYW1lXG4gICAgaWYgKG5ld0NoaWxkICE9PSBvbGRDaGlsZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgb2xkQ2hpbGQgPSBvbGRDaGlsZC5uZXh0U2libGluZztcbiAgICBvbGRDaGlsZHJlbkNvdW50Kys7XG4gIH1cbiAgLy8gaWYgbmV3IGNoaWxkcmVuIGxlbmd0aCBpcyBkaWZmZXJlbnQgZnJvbSBvbGQsIHdlIG11c3QgcmUtcmVuZGVyXG4gIHJldHVybiBvbGRDaGlsZHJlbkNvdW50ICE9PSBuZXdDaGlsZHJlbi5sZW5ndGhcbn1cblxuZnVuY3Rpb24gcGF0Y2hDaGlsZHJlbiAobmV3Q2hpbGRyZW4sIGluc3RhbmNlQmluZGluZykge1xuICBjb25zdCB7IHRhcmdldE5vZGUgfSA9IGluc3RhbmNlQmluZGluZztcbiAgbGV0IHsgdGFyZ2V0UGFyZW50Tm9kZSB9ID0gaW5zdGFuY2VCaW5kaW5nO1xuXG4gIGxldCBuZWVkc1JlcmVuZGVyID0gZmFsc2U7XG5cbiAgaWYgKHRhcmdldFBhcmVudE5vZGUpIHsgLy8gYWxyZWFkeSByZW5kZXJlZCBvbmNlXG4gICAgbmVlZHNSZXJlbmRlciA9IGRvQ2hpbGRyZW5OZWVkUmVyZW5kZXIodGFyZ2V0UGFyZW50Tm9kZSwgbmV3Q2hpbGRyZW4pO1xuICB9IGVsc2UgeyAvLyBmaXJzdCByZW5kZXIgb2YgbGlzdFxuICAgIG5lZWRzUmVyZW5kZXIgPSB0cnVlO1xuICAgIGluc3RhbmNlQmluZGluZy50YXJnZXROb2RlID0gdW5kZWZpbmVkOyAvLyBwbGFjZWhvbGRlciBub2RlIG5vdCBuZWVkZWQgYW55bW9yZSwgZnJlZSBtZW1vcnlcbiAgICBpbnN0YW5jZUJpbmRpbmcudGFyZ2V0UGFyZW50Tm9kZSA9IHRhcmdldFBhcmVudE5vZGUgPSB0YXJnZXROb2RlLnBhcmVudE5vZGU7XG4gIH1cbiAgLy8gYXZvaWQgcmUtcmVuZGVyaW5nIGxpc3QgaWYgdGhlIGRvbSBub2RlcyBhcmUgZXhhY3RseSB0aGUgc2FtZSBiZWZvcmUgYW5kIGFmdGVyXG4gIGlmIChuZWVkc1JlcmVuZGVyKSB7XG4gICAgcmVwbGFjZUNoaWxkcmVuKHRhcmdldFBhcmVudE5vZGUsIG5ld0NoaWxkcmVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXRjaCAoZXhwcmVzc2lvbnMsIGluc3RhbmNlQmluZGluZ3MpIHtcbiAgZm9yIChjb25zdCBpbnN0YW5jZUJpbmRpbmcgb2YgaW5zdGFuY2VCaW5kaW5ncykge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhcmdldE5vZGUsXG4gICAgICBjdXJyZW50RXhwcmVzc2lvbixcbiAgICAgIGJpbmRpbmc6IHtcbiAgICAgICAgZXhwcmVzc2lvbkluZGV4LFxuICAgICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgICBhdHRyaWJ1dGVWYWx1ZVByZSxcbiAgICAgICAgYXR0cmlidXRlVmFsdWVQb3N0XG4gICAgICB9XG4gICAgfSA9IGluc3RhbmNlQmluZGluZztcblxuICAgIGNvbnN0IGV4cHJlc3Npb24gPSBleHByZXNzaW9uc1tleHByZXNzaW9uSW5kZXhdO1xuXG4gICAgaWYgKGN1cnJlbnRFeHByZXNzaW9uID09PSBleHByZXNzaW9uKSB7XG4gICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSwgc2FtZSBhcyBiZWZvcmVcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaW5zdGFuY2VCaW5kaW5nLmN1cnJlbnRFeHByZXNzaW9uID0gZXhwcmVzc2lvbjtcblxuICAgIGlmIChhdHRyaWJ1dGVOYW1lKSB7IC8vIGF0dHJpYnV0ZSByZXBsYWNlbWVudFxuICAgICAgdGFyZ2V0Tm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWVQcmUgKyB0b1N0cmluZyhleHByZXNzaW9uKSArIGF0dHJpYnV0ZVZhbHVlUG9zdCk7XG4gICAgfSBlbHNlIHsgLy8gdGV4dCBub2RlIC8gY2hpbGQgZWxlbWVudCAvIGNoaWxkcmVuIHJlcGxhY2VtZW50XG4gICAgICBsZXQgbmV3Tm9kZTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGV4cHJlc3Npb24pKSB7IC8vIGFycmF5IG9mIERPTSBlbGVtZW50cyBwcm9kdWNlZCBieSB0YWcgdGVtcGxhdGUgbGl0ZXJhbHNcbiAgICAgICAgcGF0Y2hDaGlsZHJlbihleHByZXNzaW9uLCBpbnN0YW5jZUJpbmRpbmcpO1xuICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgRWxlbWVudCkgeyAvLyBodG1sIHRhZyB0ZW1wbGF0ZSByZXR1cm5pbmcgYSBET00gZWxlbWVudFxuICAgICAgICBuZXdOb2RlID0gZXhwcmVzc2lvbjtcbiAgICAgICAgdGFyZ2V0Tm9kZS5yZXBsYWNlV2l0aChuZXdOb2RlKTtcbiAgICAgIH0gZWxzZSB7IC8vIHByaW1pdGl2ZSAtIHN0cmluZywgbnVtYmVyLCBldGNcbiAgICAgICAgLy8gbm9kZVZhbHVlIGlzIGZhc3RlciB0aGFuIHRleHRDb250ZW50IHN1cHBvc2VkbHkgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1MWTZ5M0hiRFZtZ1xuICAgICAgICAvLyBub3RlIHdlIG1heSBiZSByZXBsYWNpbmcgdGhlIHZhbHVlIGluIGEgcGxhY2Vob2xkZXIgdGV4dCBub2RlXG4gICAgICAgIHRhcmdldE5vZGUubm9kZVZhbHVlID0gdG9TdHJpbmcoZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgICBpZiAobmV3Tm9kZSkge1xuICAgICAgICBpbnN0YW5jZUJpbmRpbmcudGFyZ2V0Tm9kZSA9IG5ld05vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlICh0b2tlbnMpIHtcbiAgbGV0IGh0bWxTdHJpbmcgPSAnJztcblxuICBsZXQgd2l0aGluVGFnID0gZmFsc2U7XG4gIGxldCB3aXRoaW5BdHRyaWJ1dGUgPSBmYWxzZTtcbiAgbGV0IGVsZW1lbnRJbmRleENvdW50ZXIgPSAtMTsgLy8gZGVwdGgtZmlyc3QgdHJhdmVyc2FsIG9yZGVyXG5cbiAgY29uc3QgZWxlbWVudHNUb0JpbmRpbmdzID0gbmV3IE1hcCgpO1xuICBjb25zdCBlbGVtZW50SW5kZXhlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICBodG1sU3RyaW5nICs9IHRva2VuO1xuXG4gICAgaWYgKGkgPT09IGxlbiAtIDEpIHtcbiAgICAgIGJyZWFrIC8vIG5vIG5lZWQgdG8gcHJvY2VzcyBjaGFyYWN0ZXJzIC0gbm8gbW9yZSBleHByZXNzaW9ucyB0byBiZSBmb3VuZFxuICAgIH1cblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdG9rZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IGNoYXIgPSB0b2tlbi5jaGFyQXQoaik7XG4gICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgY2FzZSAnPCc6IHtcbiAgICAgICAgICBjb25zdCBuZXh0Q2hhciA9IHRva2VuLmNoYXJBdChqICsgMSk7XG4gICAgICAgICAgaWYgKG5leHRDaGFyID09PSAnLycpIHsgLy8gY2xvc2luZyB0YWdcbiAgICAgICAgICAgIC8vIGxlYXZpbmcgYW4gZWxlbWVudFxuICAgICAgICAgICAgZWxlbWVudEluZGV4ZXMucG9wKCk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gbm90IGEgY2xvc2luZyB0YWdcbiAgICAgICAgICAgIHdpdGhpblRhZyA9IHRydWU7XG4gICAgICAgICAgICBlbGVtZW50SW5kZXhlcy5wdXNoKCsrZWxlbWVudEluZGV4Q291bnRlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnPic6IHtcbiAgICAgICAgICB3aXRoaW5UYWcgPSBmYWxzZTtcbiAgICAgICAgICB3aXRoaW5BdHRyaWJ1dGUgPSBmYWxzZTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJz0nOiB7XG4gICAgICAgICAgd2l0aGluQXR0cmlidXRlID0gdHJ1ZTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudEluZGV4ID0gZWxlbWVudEluZGV4ZXNbZWxlbWVudEluZGV4ZXMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgYmluZGluZ3MgPSBnZXRGcm9tTWFwKGVsZW1lbnRzVG9CaW5kaW5ncywgZWxlbWVudEluZGV4LCAoKSA9PiBbXSk7XG5cbiAgICBsZXQgYXR0cmlidXRlTmFtZTtcbiAgICBsZXQgYXR0cmlidXRlVmFsdWVQcmU7XG4gICAgbGV0IGF0dHJpYnV0ZVZhbHVlUG9zdDtcbiAgICBpZiAod2l0aGluQXR0cmlidXRlKSB7XG4gICAgICAvLyBJIG5ldmVyIHVzZSBzaW5nbGUtcXVvdGVzIGZvciBhdHRyaWJ1dGUgdmFsdWVzIGluIEhUTUwsIHNvIGp1c3Qgc3VwcG9ydCBkb3VibGUtcXVvdGVzIG9yIG5vLXF1b3Rlc1xuICAgICAgY29uc3QgbWF0Y2ggPSAvKFxcUyspPVwiPyhbXlwiPV0qKSQvLmV4ZWModG9rZW4pO1xuICAgICAgYXR0cmlidXRlTmFtZSA9IG1hdGNoWzFdO1xuICAgICAgYXR0cmlidXRlVmFsdWVQcmUgPSBtYXRjaFsyXTtcbiAgICAgIGF0dHJpYnV0ZVZhbHVlUG9zdCA9IC9eW15cIj5dKi8uZXhlYyh0b2tlbnNbaSArIDFdKVswXTtcbiAgICB9XG5cbiAgICBjb25zdCBiaW5kaW5nID0ge1xuICAgICAgYXR0cmlidXRlTmFtZSxcbiAgICAgIGF0dHJpYnV0ZVZhbHVlUHJlLFxuICAgICAgYXR0cmlidXRlVmFsdWVQb3N0LFxuICAgICAgZXhwcmVzc2lvbkluZGV4OiBpXG4gICAgfTtcblxuICAgIGJpbmRpbmdzLnB1c2goYmluZGluZyk7XG5cbiAgICBpZiAoIXdpdGhpblRhZyAmJiAhd2l0aGluQXR0cmlidXRlKSB7XG4gICAgICAvLyBBZGQgYSBwbGFjZWhvbGRlciB0ZXh0IG5vZGUsIHNvIHdlIGNhbiBmaW5kIGl0IGxhdGVyLiBOb3RlIHdlIG9ubHkgc3VwcG9ydCBvbmUgZHluYW1pYyBjaGlsZCB0ZXh0IG5vZGVcbiAgICAgIGh0bWxTdHJpbmcgKz0gJyAnO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRlbXBsYXRlID0gcGFyc2VUZW1wbGF0ZShodG1sU3RyaW5nKTtcblxuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlLFxuICAgIGVsZW1lbnRzVG9CaW5kaW5nc1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5QmluZGluZ3MgKGJpbmRpbmdzLCBlbGVtZW50LCBpbnN0YW5jZUJpbmRpbmdzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG5cbiAgICBjb25zdCB0YXJnZXROb2RlID0gYmluZGluZy5hdHRyaWJ1dGVOYW1lXG4gICAgICA/IGVsZW1lbnQgLy8gYXR0cmlidXRlIGJpbmRpbmcsIGp1c3QgdXNlIHRoZSBlbGVtZW50IGl0c2VsZlxuICAgICAgOiBlbGVtZW50LmZpcnN0Q2hpbGQ7IC8vIG5vdCBhbiBhdHRyaWJ1dGUgYmluZGluZywgc28gaGFzIGEgcGxhY2Vob2xkZXIgdGV4dCBub2RlXG5cbiAgICBjb25zdCBpbnN0YW5jZUJpbmRpbmcgPSB7XG4gICAgICBiaW5kaW5nLFxuICAgICAgdGFyZ2V0Tm9kZSxcbiAgICAgIHRhcmdldFBhcmVudE5vZGU6IHVuZGVmaW5lZCxcbiAgICAgIGN1cnJlbnRFeHByZXNzaW9uOiB1bmRlZmluZWRcbiAgICB9O1xuXG4gICAgaW5zdGFuY2VCaW5kaW5ncy5wdXNoKGluc3RhbmNlQmluZGluZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhdmVyc2VBbmRTZXR1cEJpbmRpbmdzIChyb290RWxlbWVudCwgZWxlbWVudHNUb0JpbmRpbmdzKSB7XG4gIGNvbnN0IGluc3RhbmNlQmluZGluZ3MgPSBbXTtcblxuICBsZXQgdG9wTGV2ZWxCaW5kaW5ncztcbiAgaWYgKGVsZW1lbnRzVG9CaW5kaW5ncy5zaXplID09PSAxICYmICh0b3BMZXZlbEJpbmRpbmdzID0gZWxlbWVudHNUb0JpbmRpbmdzLmdldCgwKSkpIHtcbiAgICAvLyBPcHRpbWl6YXRpb24gZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSB0aGVyZSdzIG9ubHkgb25lIGVsZW1lbnQgYW5kIG9uZSBiaW5kaW5nXG4gICAgLy8gU2tpcCBjcmVhdGluZyBhIFRyZWVXYWxrZXIgZW50aXJlbHkgYW5kIGp1c3QgaGFuZGxlIHRoZSByb290IERPTSBlbGVtZW50XG4gICAgYXBwbHlCaW5kaW5ncyh0b3BMZXZlbEJpbmRpbmdzLCByb290RWxlbWVudCwgaW5zdGFuY2VCaW5kaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdHJhdmVyc2UgZG9tXG4gICAgY29uc3QgdHJlZVdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIocm9vdEVsZW1lbnQsIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UKTtcblxuICAgIGxldCBlbGVtZW50ID0gcm9vdEVsZW1lbnQ7XG4gICAgbGV0IGVsZW1lbnRJbmRleCA9IC0xO1xuICAgIGRvIHtcbiAgICAgIGNvbnN0IGJpbmRpbmdzID0gZWxlbWVudHNUb0JpbmRpbmdzLmdldCgrK2VsZW1lbnRJbmRleCk7XG4gICAgICBpZiAoYmluZGluZ3MpIHtcbiAgICAgICAgYXBwbHlCaW5kaW5ncyhiaW5kaW5ncywgZWxlbWVudCwgaW5zdGFuY2VCaW5kaW5ncyk7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoKGVsZW1lbnQgPSB0cmVlV2Fsa2VyLm5leHROb2RlKCkpKVxuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlQmluZGluZ3Ncbn1cblxuZnVuY3Rpb24gcGFyc2VIdG1sICh0b2tlbnMpIHtcbiAgLy8gQWxsIHRlbXBsYXRlcyBhbmQgYm91bmQgZXhwcmVzc2lvbnMgYXJlIHVuaXF1ZSBwZXIgdG9rZW5zIGFycmF5XG4gIGNvbnN0IHsgdGVtcGxhdGUsIGVsZW1lbnRzVG9CaW5kaW5ncyB9ID0gZ2V0RnJvbU1hcChwYXJzZUNhY2hlLCB0b2tlbnMsICgpID0+IHBhcnNlKHRva2VucykpO1xuXG4gIC8vIFdoZW4gd2UgcGFyc2VIdG1sLCB3ZSBhbHdheXMgcmV0dXJuIGEgZnJlc2ggRE9NIGluc3RhbmNlIHJlYWR5IHRvIGJlIHVwZGF0ZWRcbiAgY29uc3QgZG9tID0gdGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gIGNvbnN0IGluc3RhbmNlQmluZGluZ3MgPSB0cmF2ZXJzZUFuZFNldHVwQmluZGluZ3MoZG9tLCBlbGVtZW50c1RvQmluZGluZ3MpO1xuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVEb21JbnN0YW5jZSAoZXhwcmVzc2lvbnMpIHtcbiAgICBwYXRjaChleHByZXNzaW9ucywgaW5zdGFuY2VCaW5kaW5ncyk7XG4gICAgcmV0dXJuIGRvbVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYW1ld29yayAoc3RhdGUpIHtcbiAgY29uc3QgZG9tSW5zdGFuY2VzID0gZ2V0RnJvbU1hcChkb21JbnN0YW5jZXNDYWNoZSwgc3RhdGUsICgpID0+IG5ldyBNYXAoKSk7XG4gIGxldCBkb21JbnN0YW5jZUNhY2hlS2V5ID0gdW5rZXllZFN5bWJvbDtcblxuICBmdW5jdGlvbiBodG1sICh0b2tlbnMsIC4uLmV4cHJlc3Npb25zKSB7XG4gICAgLy8gRWFjaCB1bmlxdWUgbGV4aWNhbCB1c2FnZSBvZiBtYXAoKSBpcyBjb25zaWRlcmVkIHVuaXF1ZSBkdWUgdG8gdGhlIGh0bWxgYCB0YWdnZWQgdGVtcGxhdGUgY2FsbCBpdCBtYWtlcyxcbiAgICAvLyB3aGljaCBoYXMgbGV4aWNhbGx5IHVuaXF1ZSB0b2tlbnMuIFRoZSB1bmtleWVkIHN5bWJvbCBpcyBqdXN0IHVzZWQgZm9yIGh0bWxgYCB1c2FnZSBvdXRzaWRlIG9mIGEgbWFwKCkuXG4gICAgY29uc3QgZG9tSW5zdGFuY2VzRm9yVG9rZW5zID0gZ2V0RnJvbU1hcChkb21JbnN0YW5jZXMsIHRva2VucywgKCkgPT4gbmV3IE1hcCgpKTtcbiAgICBjb25zdCB1cGRhdGVEb21JbnN0YW5jZSA9IGdldEZyb21NYXAoZG9tSW5zdGFuY2VzRm9yVG9rZW5zLCBkb21JbnN0YW5jZUNhY2hlS2V5LCAoKSA9PiBwYXJzZUh0bWwodG9rZW5zKSk7XG5cbiAgICByZXR1cm4gdXBkYXRlRG9tSW5zdGFuY2UoZXhwcmVzc2lvbnMpIC8vIHVwZGF0ZSB3aXRoIGV4cHJlc3Npb25zXG4gIH1cblxuICBmdW5jdGlvbiBtYXAgKGFycmF5LCBjYWxsYmFjaywga2V5RnVuY3Rpb24pIHtcbiAgICByZXR1cm4gYXJyYXkubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxDYWNoZUtleSA9IGRvbUluc3RhbmNlQ2FjaGVLZXk7XG4gICAgICBkb21JbnN0YW5jZUNhY2hlS2V5ID0ga2V5RnVuY3Rpb24oaXRlbSk7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soaXRlbSwgaW5kZXgpXG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkb21JbnN0YW5jZUNhY2hlS2V5ID0gb3JpZ2luYWxDYWNoZUtleTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHsgbWFwLCBodG1sIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyIChjb250YWluZXIsIHN0YXRlLCBoZWxwZXJzLCBldmVudHMsIGFjdGlvbnMsIHJlZnMsIGFib3J0U2lnbmFsLCBhY3Rpb25Db250ZXh0LCBmaXJzdFJlbmRlcikge1xuICBjb25zdCB7IGxhYmVsV2l0aFNraW4sIHRpdGxlRm9yRW1vamksIHVuaWNvZGVXaXRoU2tpbiB9ID0gaGVscGVycztcbiAgY29uc3QgeyBodG1sLCBtYXAgfSA9IGNyZWF0ZUZyYW1ld29yayhzdGF0ZSk7XG5cbiAgZnVuY3Rpb24gZW1vamlMaXN0IChlbW9qaXMsIHNlYXJjaE1vZGUsIHByZWZpeCkge1xuICAgIHJldHVybiBtYXAoZW1vamlzLCAoZW1vamksIGkpID0+IHtcbiAgICAgIHJldHVybiBodG1sYDxidXR0b24gcm9sZT1cIiR7c2VhcmNoTW9kZSA/ICdvcHRpb24nIDogJ21lbnVpdGVtJ31cIiBhcmlhLXNlbGVjdGVkPVwiJHtzZWFyY2hNb2RlID8gaSA9PT0gc3RhdGUuYWN0aXZlU2VhcmNoSXRlbSA6ICcnfVwiIGFyaWEtbGFiZWw9XCIke2xhYmVsV2l0aFNraW4oZW1vamksIHN0YXRlLmN1cnJlbnRTa2luVG9uZSl9XCIgdGl0bGU9XCIke3RpdGxlRm9yRW1vamkoZW1vamkpfVwiIGNsYXNzPVwiJHtcbiAgICAgICAgICAgICAgICAnZW1vamknICtcbiAgICAgICAgICAgICAgICAoc2VhcmNoTW9kZSAmJiBpID09PSBzdGF0ZS5hY3RpdmVTZWFyY2hJdGVtID8gJyBhY3RpdmUnIDogJycpICtcbiAgICAgICAgICAgICAgICAoZW1vamkudW5pY29kZSA/ICcnIDogJyBjdXN0b20tZW1vamknKVxuICAgICAgICAgICAgICB9XCIgaWQ9XCIke2Ake3ByZWZpeH0tJHtlbW9qaS5pZH1gfVwiIHN0eWxlPVwiJHtlbW9qaS51bmljb2RlID8gJycgOiBgLS1jdXN0b20tZW1vamktYmFja2dyb3VuZDogdXJsKCR7SlNPTi5zdHJpbmdpZnkoZW1vamkudXJsKX0pYH1cIj4ke1xuICAgICAgICBlbW9qaS51bmljb2RlXG4gICAgICAgICAgPyB1bmljb2RlV2l0aFNraW4oZW1vamksIHN0YXRlLmN1cnJlbnRTa2luVG9uZSlcbiAgICAgICAgICA6ICcnXG4gICAgICB9PC9idXR0b24+YFxuICAgICAgLy8gSXQncyBpbXBvcnRhbnQgZm9yIHRoZSBjYWNoZSBrZXkgdG8gYmUgdW5pcXVlIGJhc2VkIG9uIHRoZSBwcmVmaXgsIGJlY2F1c2UgdGhlIGZyYW1ld29yayBjYWNoZXMgYmFzZWQgb24gdGhlXG4gICAgICAvLyB1bmlxdWUgdG9rZW5zICsgY2FjaGUga2V5LCBhbmQgdGhlIHNhbWUgZW1vamkgbWF5IGJlIHVzZWQgaW4gdGhlIHRhYiBhcyB3ZWxsIGFzIGluIHRoZSBmYXYgYmFyXG4gICAgfSwgZW1vamkgPT4gYCR7cHJlZml4fS0ke2Vtb2ppLmlkfWApXG4gIH1cblxuICBjb25zdCBzZWN0aW9uID0gKCkgPT4ge1xuICAgIHJldHVybiBodG1sYDxzZWN0aW9uIGRhdGEtcmVmPVwicm9vdEVsZW1lbnRcIiBjbGFzcz1cInBpY2tlclwiIGFyaWEtbGFiZWw9XCIke3N0YXRlLmkxOG4ucmVnaW9uTGFiZWx9XCIgc3R5bGU9XCIke3N0YXRlLnBpY2tlclN0eWxlIHx8ICcnfVwiPjxkaXYgY2xhc3M9XCJwYWQtdG9wXCI+PC9kaXY+PGRpdiBjbGFzcz1cInNlYXJjaC1yb3dcIj48ZGl2IGNsYXNzPVwic2VhcmNoLXdyYXBwZXJcIj48aW5wdXQgaWQ9XCJzZWFyY2hcIiBjbGFzcz1cInNlYXJjaFwiIHR5cGU9XCJzZWFyY2hcIiByb2xlPVwiY29tYm9ib3hcIiBlbnRlcmtleWhpbnQ9XCJzZWFyY2hcIiBwbGFjZWhvbGRlcj1cIiR7c3RhdGUuaTE4bi5zZWFyY2hMYWJlbH1cIiBhdXRvY2FwaXRhbGl6ZT1cIm5vbmVcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBzcGVsbGNoZWNrPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCIkeyEhKHN0YXRlLnNlYXJjaE1vZGUgJiYgc3RhdGUuY3VycmVudEVtb2ppcy5sZW5ndGgpfVwiIGFyaWEtY29udHJvbHM9XCJzZWFyY2gtcmVzdWx0c1wiIGFyaWEtZGVzY3JpYmVkYnk9XCJzZWFyY2gtZGVzY3JpcHRpb25cIiBhcmlhLWF1dG9jb21wbGV0ZT1cImxpc3RcIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XCIke3N0YXRlLmFjdGl2ZVNlYXJjaEl0ZW1JZCA/IGBlbW8tJHtzdGF0ZS5hY3RpdmVTZWFyY2hJdGVtSWR9YCA6ICcnfVwiIGRhdGEtcmVmPVwic2VhcmNoRWxlbWVudFwiIGRhdGEtb24taW5wdXQ9XCJvblNlYXJjaElucHV0XCIgZGF0YS1vbi1rZXlkb3duPVwib25TZWFyY2hLZXlkb3duXCI+PGxhYmVsIGNsYXNzPVwic3Itb25seVwiIGZvcj1cInNlYXJjaFwiPiR7c3RhdGUuaTE4bi5zZWFyY2hMYWJlbH08L2xhYmVsPiA8c3BhbiBpZD1cInNlYXJjaC1kZXNjcmlwdGlvblwiIGNsYXNzPVwic3Itb25seVwiPiR7c3RhdGUuaTE4bi5zZWFyY2hEZXNjcmlwdGlvbn08L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz1cInNraW50b25lLWJ1dHRvbi13cmFwcGVyICR7c3RhdGUuc2tpblRvbmVQaWNrZXJFeHBhbmRlZEFmdGVyQW5pbWF0aW9uID8gJ2V4cGFuZGVkJyA6ICcnfVwiPjxidXR0b24gaWQ9XCJza2ludG9uZS1idXR0b25cIiBjbGFzcz1cImVtb2ppICR7c3RhdGUuc2tpblRvbmVQaWNrZXJFeHBhbmRlZCA/ICdoaWRlLWZvY3VzJyA6ICcnfVwiIGFyaWEtbGFiZWw9XCIke3N0YXRlLnNraW5Ub25lQnV0dG9uTGFiZWx9XCIgdGl0bGU9XCIke3N0YXRlLnNraW5Ub25lQnV0dG9uTGFiZWx9XCIgYXJpYS1kZXNjcmliZWRieT1cInNraW50b25lLWRlc2NyaXB0aW9uXCIgYXJpYS1oYXNwb3B1cD1cImxpc3Rib3hcIiBhcmlhLWV4cGFuZGVkPVwiJHtzdGF0ZS5za2luVG9uZVBpY2tlckV4cGFuZGVkfVwiIGFyaWEtY29udHJvbHM9XCJza2ludG9uZS1saXN0XCIgZGF0YS1vbi1jbGljaz1cIm9uQ2xpY2tTa2luVG9uZUJ1dHRvblwiPiR7c3RhdGUuc2tpblRvbmVCdXR0b25UZXh0IHx8ICcnfTwvYnV0dG9uPjwvZGl2PjxzcGFuIGlkPVwic2tpbnRvbmUtZGVzY3JpcHRpb25cIiBjbGFzcz1cInNyLW9ubHlcIj4ke3N0YXRlLmkxOG4uc2tpblRvbmVEZXNjcmlwdGlvbn08L3NwYW4+PGRpdiBkYXRhLXJlZj1cInNraW5Ub25lRHJvcGRvd25cIiBpZD1cInNraW50b25lLWxpc3RcIiBjbGFzcz1cInNraW50b25lLWxpc3QgaGlkZS1mb2N1cyAke3N0YXRlLnNraW5Ub25lUGlja2VyRXhwYW5kZWQgPyAnJyA6ICdoaWRkZW4gbm8tYW5pbWF0ZSd9XCIgc3R5bGU9XCJ0cmFuc2Zvcm06dHJhbnNsYXRlWSgke3N0YXRlLnNraW5Ub25lUGlja2VyRXhwYW5kZWQgPyAwIDogJ2NhbGMoLTEgKiB2YXIoLS1udW0tc2tpbnRvbmVzKSAqIHZhcigtLXRvdGFsLWVtb2ppLXNpemUpKSd9KVwiIHJvbGU9XCJsaXN0Ym94XCIgYXJpYS1sYWJlbD1cIiR7c3RhdGUuaTE4bi5za2luVG9uZXNMYWJlbH1cIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XCJza2ludG9uZS0ke3N0YXRlLmFjdGl2ZVNraW5Ub25lfVwiIGFyaWEtaGlkZGVuPVwiJHshc3RhdGUuc2tpblRvbmVQaWNrZXJFeHBhbmRlZH1cIiB0YWJJbmRleD1cIi0xXCIgZGF0YS1vbi1mb2N1c291dD1cIm9uU2tpblRvbmVPcHRpb25zRm9jdXNPdXRcIiBkYXRhLW9uLWNsaWNrPVwib25Ta2luVG9uZU9wdGlvbnNDbGlja1wiIGRhdGEtb24ta2V5ZG93bj1cIm9uU2tpblRvbmVPcHRpb25zS2V5ZG93blwiIGRhdGEtb24ta2V5dXA9XCJvblNraW5Ub25lT3B0aW9uc0tleXVwXCI+JHtcbiAgICBtYXAoc3RhdGUuc2tpblRvbmVzLCAoc2tpblRvbmUsIGkpID0+IHtcbiAgICByZXR1cm4gaHRtbGA8ZGl2IGlkPVwic2tpbnRvbmUtJHtpfVwiIGNsYXNzPVwiZW1vamkgJHtpID09PSBzdGF0ZS5hY3RpdmVTa2luVG9uZSA/ICdhY3RpdmUnIDogJyd9XCIgYXJpYS1zZWxlY3RlZD1cIiR7aSA9PT0gc3RhdGUuYWN0aXZlU2tpblRvbmV9XCIgcm9sZT1cIm9wdGlvblwiIHRpdGxlPVwiJHtzdGF0ZS5pMThuLnNraW5Ub25lc1tpXX1cIiBhcmlhLWxhYmVsPVwiJHtzdGF0ZS5pMThuLnNraW5Ub25lc1tpXX1cIj4ke3NraW5Ub25lfTwvZGl2PmBcbiAgICB9LCBza2luVG9uZSA9PiBza2luVG9uZSlcbiAgICAgICAgfTwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJuYXZcIiByb2xlPVwidGFibGlzdFwiIHN0eWxlPVwiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCgke3N0YXRlLmdyb3Vwcy5sZW5ndGh9LDFmcilcIiBhcmlhLWxhYmVsPVwiJHtzdGF0ZS5pMThuLmNhdGVnb3JpZXNMYWJlbH1cIiBkYXRhLW9uLWtleWRvd249XCJvbk5hdktleWRvd25cIiBkYXRhLW9uLWNsaWNrPVwib25OYXZDbGlja1wiPiR7XG4gICAgICAgICAgICBtYXAoc3RhdGUuZ3JvdXBzLCAoZ3JvdXApID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGh0bWxgPGJ1dHRvbiByb2xlPVwidGFiXCIgY2xhc3M9XCJuYXYtYnV0dG9uXCIgYXJpYS1jb250cm9scz1cInRhYi0ke2dyb3VwLmlkfVwiIGFyaWEtbGFiZWw9XCIke3N0YXRlLmkxOG4uY2F0ZWdvcmllc1tncm91cC5uYW1lXX1cIiBhcmlhLXNlbGVjdGVkPVwiJHshc3RhdGUuc2VhcmNoTW9kZSAmJiBzdGF0ZS5jdXJyZW50R3JvdXAuaWQgPT09IGdyb3VwLmlkfVwiIHRpdGxlPVwiJHtzdGF0ZS5pMThuLmNhdGVnb3JpZXNbZ3JvdXAubmFtZV19XCIgZGF0YS1ncm91cC1pZD1cIiR7Z3JvdXAuaWR9XCI+PGRpdiBjbGFzcz1cIm5hdi1lbW9qaSBlbW9qaVwiPiR7Z3JvdXAuZW1vaml9PC9kaXY+PC9idXR0b24+YFxuICAgICAgICAgICAgfSwgZ3JvdXAgPT4gZ3JvdXAuaWQpXG4gICAgICAgICAgfTwvZGl2PjxkaXYgY2xhc3M9XCJpbmRpY2F0b3Itd3JhcHBlclwiPjxkaXYgY2xhc3M9XCJpbmRpY2F0b3JcIiBzdHlsZT1cInRyYW5zZm9ybTp0cmFuc2xhdGVYKCR7KC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIChzdGF0ZS5pc1J0bCA/IC0xIDogMSkpICogc3RhdGUuY3VycmVudEdyb3VwSW5kZXggKiAxMDB9JSlcIj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwibWVzc2FnZSAke3N0YXRlLm1lc3NhZ2UgPyAnJyA6ICdnb25lJ31cIiByb2xlPVwiYWxlcnRcIiBhcmlhLWxpdmU9XCJwb2xpdGVcIj4ke3N0YXRlLm1lc3NhZ2UgfHwgJyd9PC9kaXY+PGRpdiBkYXRhLXJlZj1cInRhYnBhbmVsRWxlbWVudFwiIGNsYXNzPVwidGFicGFuZWwgJHsoIXN0YXRlLmRhdGFiYXNlTG9hZGVkIHx8IHN0YXRlLm1lc3NhZ2UpID8gJ2dvbmUnIDogJyd9XCIgcm9sZT1cIiR7c3RhdGUuc2VhcmNoTW9kZSA/ICdyZWdpb24nIDogJ3RhYnBhbmVsJ31cIiBhcmlhLWxhYmVsPVwiJHtzdGF0ZS5zZWFyY2hNb2RlID8gc3RhdGUuaTE4bi5zZWFyY2hSZXN1bHRzTGFiZWwgOiBzdGF0ZS5pMThuLmNhdGVnb3JpZXNbc3RhdGUuY3VycmVudEdyb3VwLm5hbWVdfVwiIGlkPVwiJHtzdGF0ZS5zZWFyY2hNb2RlID8gJycgOiBgdGFiLSR7c3RhdGUuY3VycmVudEdyb3VwLmlkfWB9XCIgdGFiSW5kZXg9XCIwXCIgZGF0YS1vbi1jbGljaz1cIm9uRW1vamlDbGlja1wiPjxkaXYgZGF0YS1hY3Rpb249XCJjYWxjdWxhdGVFbW9qaUdyaWRTdHlsZVwiPiR7XG4gICAgICAgICAgICAgIG1hcChzdGF0ZS5jdXJyZW50RW1vamlzV2l0aENhdGVnb3JpZXMsIChlbW9qaVdpdGhDYXRlZ29yeSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBodG1sYDxkaXY+PGRpdiBpZD1cIm1lbnUtbGFiZWwtJHtpfVwiIGNsYXNzPVwiY2F0ZWdvcnkgJHtzdGF0ZS5jdXJyZW50RW1vamlzV2l0aENhdGVnb3JpZXMubGVuZ3RoID09PSAxICYmIHN0YXRlLmN1cnJlbnRFbW9qaXNXaXRoQ2F0ZWdvcmllc1swXS5jYXRlZ29yeSA9PT0gJycgPyAnZ29uZScgOiAnJ31cIiBhcmlhLWhpZGRlbj1cInRydWVcIj4ke1xuICAgICAgICAgICAgICAgICAgc3RhdGUuc2VhcmNoTW9kZVxuICAgICAgICAgICAgICAgICAgICA/IHN0YXRlLmkxOG4uc2VhcmNoUmVzdWx0c0xhYmVsXG4gICAgICAgICAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAgICAgICAgIGVtb2ppV2l0aENhdGVnb3J5LmNhdGVnb3J5XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGVtb2ppV2l0aENhdGVnb3J5LmNhdGVnb3J5XG4gICAgICAgICAgICAgICAgICAgICAgICA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuY3VycmVudEVtb2ppc1dpdGhDYXRlZ29yaWVzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHN0YXRlLmkxOG4uY2F0ZWdvcmllcy5jdXN0b21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHN0YXRlLmkxOG4uY2F0ZWdvcmllc1tzdGF0ZS5jdXJyZW50R3JvdXAubmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH08L2Rpdj48ZGl2IGNsYXNzPVwiZW1vamktbWVudSAke2kgIT09IDAgJiYgIXN0YXRlLnNlYXJjaE1vZGUgJiYgc3RhdGUuY3VycmVudEdyb3VwLmlkID09PSAtMSA/ICd2aXNpYmlsaXR5LWF1dG8nIDogJyd9XCIgc3R5bGU9XCIke2AtLW51bS1yb3dzOiAke01hdGguY2VpbChlbW9qaVdpdGhDYXRlZ29yeS5lbW9qaXMubGVuZ3RoIC8gc3RhdGUubnVtQ29sdW1ucyl9YH1cIiBkYXRhLWFjdGlvbj1cInVwZGF0ZU9uSW50ZXJzZWN0aW9uXCIgcm9sZT1cIiR7c3RhdGUuc2VhcmNoTW9kZSA/ICdsaXN0Ym94JyA6ICdtZW51J31cIiBhcmlhLWxhYmVsbGVkYnk9XCJtZW51LWxhYmVsLSR7aX1cIiBpZD1cIiR7c3RhdGUuc2VhcmNoTW9kZSA/ICdzZWFyY2gtcmVzdWx0cycgOiAnJ31cIj4ke1xuICAgICAgICAgICAgICBlbW9qaUxpc3QoZW1vamlXaXRoQ2F0ZWdvcnkuZW1vamlzLCBzdGF0ZS5zZWFyY2hNb2RlLCAvKiBwcmVmaXggKi8gJ2VtbycpXG4gICAgICAgICAgICB9PC9kaXY+PC9kaXY+YFxuICAgICAgICAgICAgICB9LCBlbW9qaVdpdGhDYXRlZ29yeSA9PiBlbW9qaVdpdGhDYXRlZ29yeS5jYXRlZ29yeSlcbiAgICAgICAgICAgIH08L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmF2b3JpdGVzIG9uc2NyZWVuIGVtb2ppLW1lbnUgJHtzdGF0ZS5tZXNzYWdlID8gJ2dvbmUnIDogJyd9XCIgcm9sZT1cIm1lbnVcIiBhcmlhLWxhYmVsPVwiJHtzdGF0ZS5pMThuLmZhdm9yaXRlc0xhYmVsfVwiIGRhdGEtb24tY2xpY2s9XCJvbkVtb2ppQ2xpY2tcIj4ke1xuICAgICAgICAgICAgZW1vamlMaXN0KHN0YXRlLmN1cnJlbnRGYXZvcml0ZXMsIC8qIHNlYXJjaE1vZGUgKi8gZmFsc2UsIC8qIHByZWZpeCAqLyAnZmF2JylcbiAgICAgICAgICB9PC9kaXY+PGJ1dHRvbiBkYXRhLXJlZj1cImJhc2VsaW5lRW1vamlcIiBhcmlhLWhpZGRlbj1cInRydWVcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCJhYnMtcG9zIGhpZGRlbiBlbW9qaSBiYXNlbGluZS1lbW9qaVwiPvCfmIA8L2J1dHRvbj48L3NlY3Rpb24+YFxuICB9O1xuXG4gIGNvbnN0IHJvb3REb20gPSBzZWN0aW9uKCk7XG5cbiAgLy8gaGVscGVyIGZvciB0cmF2ZXJzaW5nIHRoZSBkb20sIGZpbmRpbmcgZWxlbWVudHMgYnkgYW4gYXR0cmlidXRlLCBhbmQgZ2V0dGluZyB0aGUgYXR0cmlidXRlIHZhbHVlXG4gIGNvbnN0IGZvckVsZW1lbnRXaXRoQXR0cmlidXRlID0gKGF0dHJpYnV0ZU5hbWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGBbJHthdHRyaWJ1dGVOYW1lfV1gKSkge1xuICAgICAgY2FsbGJhY2soZWxlbWVudCwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpO1xuICAgIH1cbiAgfTtcblxuICBpZiAoZmlyc3RSZW5kZXIpIHsgLy8gbm90IGEgcmUtcmVuZGVyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHJvb3REb20pO1xuXG4gICAgLy8gd2Ugb25seSBiaW5kIGV2ZW50cy9yZWZzIG9uY2UgLSB0aGVyZSBpcyBubyBuZWVkIHRvIGZpbmQgdGhlbSBhZ2FpbiBnaXZlbiB0aGlzIGNvbXBvbmVudCBzdHJ1Y3R1cmVcblxuICAgIC8vIGJpbmQgZXZlbnRzXG4gICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgWydjbGljaycsICdmb2N1c291dCcsICdpbnB1dCcsICdrZXlkb3duJywgJ2tleXVwJ10pIHtcbiAgICAgIGZvckVsZW1lbnRXaXRoQXR0cmlidXRlKGBkYXRhLW9uLSR7ZXZlbnROYW1lfWAsIChlbGVtZW50LCBsaXN0ZW5lck5hbWUpID0+IHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRzW2xpc3RlbmVyTmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gZmluZCByZWZzXG4gICAgZm9yRWxlbWVudFdpdGhBdHRyaWJ1dGUoJ2RhdGEtcmVmJywgKGVsZW1lbnQsIHJlZikgPT4ge1xuICAgICAgcmVmc1tyZWZdID0gZWxlbWVudDtcbiAgICB9KTtcblxuICAgIC8vIGRlc3Ryb3kvYWJvcnQgbG9naWNcbiAgICBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChyb290RG9tKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHNldCB1cCBhY3Rpb25zIC0gdGhlc2UgYXJlIHJlLWJvdW5kIG9uIGV2ZXJ5IHJlbmRlclxuICBmb3JFbGVtZW50V2l0aEF0dHJpYnV0ZSgnZGF0YS1hY3Rpb24nLCAoZWxlbWVudCwgYWN0aW9uKSA9PiB7XG4gICAgbGV0IGJvdW5kQWN0aW9ucyA9IGFjdGlvbkNvbnRleHQuZ2V0KGFjdGlvbik7XG4gICAgaWYgKCFib3VuZEFjdGlvbnMpIHtcbiAgICAgIGFjdGlvbkNvbnRleHQuc2V0KGFjdGlvbiwgKGJvdW5kQWN0aW9ucyA9IG5ldyBXZWFrU2V0KCkpKTtcbiAgICB9XG5cbiAgICAvLyBhdm9pZCBhcHBseWluZyB0aGUgc2FtZSBhY3Rpb24gdG8gdGhlIHNhbWUgZWxlbWVudCBtdWx0aXBsZSB0aW1lc1xuICAgIGlmICghYm91bmRBY3Rpb25zLmhhcyhlbGVtZW50KSkge1xuICAgICAgYm91bmRBY3Rpb25zLmFkZChlbGVtZW50KTtcbiAgICAgIGFjdGlvbnNbYWN0aW9uXShlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgcU0gPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09ICdmdW5jdGlvbicgPyBxdWV1ZU1pY3JvdGFzayA6IGNhbGxiYWNrID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oY2FsbGJhY2spO1xuXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZSAoYWJvcnRTaWduYWwpIHtcbiAgbGV0IGRlc3Ryb3llZCA9IGZhbHNlO1xuICBsZXQgY3VycmVudE9ic2VydmVyO1xuXG4gIGNvbnN0IHByb3BzVG9PYnNlcnZlcnMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IGRpcnR5T2JzZXJ2ZXJzID0gbmV3IFNldCgpO1xuXG4gIGxldCBxdWV1ZWQ7XG5cbiAgY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgaWYgKGRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IG9ic2VydmVyc1RvUnVuID0gWy4uLmRpcnR5T2JzZXJ2ZXJzXTtcbiAgICBkaXJ0eU9ic2VydmVycy5jbGVhcigpOyAvLyBjbGVhciBiZWZvcmUgcnVubmluZyB0byBmb3JjZSBhbnkgbmV3IHVwZGF0ZXMgdG8gcnVuIGluIGFub3RoZXIgdGljayBvZiB0aGUgbG9vcFxuICAgIHRyeSB7XG4gICAgICBmb3IgKGNvbnN0IG9ic2VydmVyIG9mIG9ic2VydmVyc1RvUnVuKSB7XG4gICAgICAgIG9ic2VydmVyKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHF1ZXVlZCA9IGZhbHNlO1xuICAgICAgaWYgKGRpcnR5T2JzZXJ2ZXJzLnNpemUpIHsgLy8gbmV3IHVwZGF0ZXMsIHF1ZXVlIGFub3RoZXIgb25lXG4gICAgICAgIHF1ZXVlZCA9IHRydWU7XG4gICAgICAgIHFNKGZsdXNoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc3RhdGUgPSBuZXcgUHJveHkoe30sIHtcbiAgICBnZXQgKHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKGN1cnJlbnRPYnNlcnZlcikge1xuICAgICAgICBsZXQgb2JzZXJ2ZXJzID0gcHJvcHNUb09ic2VydmVycy5nZXQocHJvcCk7XG4gICAgICAgIGlmICghb2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgb2JzZXJ2ZXJzID0gbmV3IFNldCgpO1xuICAgICAgICAgIHByb3BzVG9PYnNlcnZlcnMuc2V0KHByb3AsIG9ic2VydmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgb2JzZXJ2ZXJzLmFkZChjdXJyZW50T2JzZXJ2ZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXVxuICAgIH0sXG4gICAgc2V0ICh0YXJnZXQsIHByb3AsIG5ld1ZhbHVlKSB7XG4gICAgICBpZiAodGFyZ2V0W3Byb3BdICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSBuZXdWYWx1ZTtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXJzID0gcHJvcHNUb09ic2VydmVycy5nZXQocHJvcCk7XG4gICAgICAgIGlmIChvYnNlcnZlcnMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IG9ic2VydmVyIG9mIG9ic2VydmVycykge1xuICAgICAgICAgICAgZGlydHlPYnNlcnZlcnMuYWRkKG9ic2VydmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFxdWV1ZWQpIHtcbiAgICAgICAgICAgIHF1ZXVlZCA9IHRydWU7XG4gICAgICAgICAgICBxTShmbHVzaCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY3JlYXRlRWZmZWN0ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgcnVubmFibGUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRPYnNlcnZlciA9IGN1cnJlbnRPYnNlcnZlcjtcbiAgICAgIGN1cnJlbnRPYnNlcnZlciA9IHJ1bm5hYmxlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKClcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGN1cnJlbnRPYnNlcnZlciA9IG9sZE9ic2VydmVyO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHJ1bm5hYmxlKClcbiAgfTtcblxuICAvLyBkZXN0cm95IGxvZ2ljXG4gIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4ge1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgc3RhdGUsXG4gICAgY3JlYXRlRWZmZWN0XG4gIH1cbn1cblxuLy8gQ29tcGFyZSB0d28gYXJyYXlzLCB3aXRoIGEgZnVuY3Rpb24gY2FsbGVkIG9uIGVhY2ggaXRlbSBpbiB0aGUgdHdvIGFycmF5cyB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0aGUgaXRlbXMgYXJlIGVxdWFsXG5mdW5jdGlvbiBhcnJheXNBcmVFcXVhbEJ5RnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBhcmVFcXVhbEZ1bmMpIHtcbiAgaWYgKGxlZnQubGVuZ3RoICE9PSByaWdodC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlZnQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWFyZUVxdWFsRnVuYyhsZWZ0W2ldLCByaWdodFtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5jb25zdCBpbnRlcnNlY3Rpb25PYnNlcnZlckNhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxuZnVuY3Rpb24gaW50ZXJzZWN0aW9uT2JzZXJ2ZXJBY3Rpb24gKG5vZGUsIGFib3J0U2lnbmFsLCBsaXN0ZW5lcikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICB7XG4gICAgLy8gVGhlIHNjcm9sbCByb290IGlzIGFsd2F5cyBgLnRhYnBhbmVsYFxuICAgIGNvbnN0IHJvb3QgPSBub2RlLmNsb3Nlc3QoJy50YWJwYW5lbCcpO1xuXG4gICAgbGV0IG9ic2VydmVyID0gaW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWNoZS5nZXQocm9vdCk7XG4gICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgLy8gVE9ETzogcmVwbGFjZSB0aGlzIHdpdGggdGhlIGNvbnRlbnR2aXNpYmlsaXR5YXV0b3N0YXRlY2hhbmdlIGV2ZW50IHdoZW4gYWxsIHN1cHBvcnRlZCBicm93c2VycyBzdXBwb3J0IGl0LlxuICAgICAgLy8gRm9yIG5vdyB3ZSB1c2UgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgYmVjYXVzZSBpdCBoYXMgYmV0dGVyIGNyb3NzLWJyb3dzZXIgc3VwcG9ydCwgYW5kIGl0IHdvdWxkIGJlIGJhZCBmb3JcbiAgICAgIC8vIG9sZCBTYWZhcmkgdmVyc2lvbnMgaWYgdGhleSBlYWdlcmx5IGRvd25sb2FkZWQgYWxsIGN1c3RvbSBlbW9qaSBhbGwgYXQgb25jZS5cbiAgICAgIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGxpc3RlbmVyLCB7XG4gICAgICAgIHJvb3QsXG4gICAgICAgIC8vIHRyaWdnZXIgaWYgd2UgYXJlIDEvMiBzY3JvbGwgY29udGFpbmVyIGhlaWdodCBhd2F5IHNvIHRoYXQgdGhlIGltYWdlcyBsb2FkIGEgYml0IHF1aWNrZXIgd2hpbGUgc2Nyb2xsaW5nXG4gICAgICAgIHJvb3RNYXJnaW46ICc1MCUgMHB4IDUwJSAwcHgnLFxuICAgICAgICAvLyB0cmlnZ2VyIGlmIGFueSBwYXJ0IG9mIHRoZSBlbW9qaSBncmlkIGlzIGludGVyc2VjdGluZ1xuICAgICAgICB0aHJlc2hvbGQ6IDBcbiAgICAgIH0pO1xuXG4gICAgICAvLyBhdm9pZCBjcmVhdGluZyBhIG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlciBmb3IgZXZlcnkgY2F0ZWdvcnk7IGp1c3QgdXNlIG9uZSBmb3IgdGhlIHdob2xlIHJvb3RcbiAgICAgIGludGVyc2VjdGlvbk9ic2VydmVyQ2FjaGUuc2V0KHJvb3QsIG9ic2VydmVyKTtcblxuICAgICAgLy8gYXNzdW1lIHRoYXQgdGhlIGFib3J0U2lnbmFsIGlzIGFsd2F5cyB0aGUgc2FtZSBmb3IgdGhpcyByb290IG5vZGU7IGp1c3QgYWRkIG9uZSBldmVudCBsaXN0ZW5lclxuICAgICAgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSk7XG4gIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWNvbnN0LG5vLWxhYmVscyxuby1pbm5lci1kZWNsYXJhdGlvbnMgKi9cblxuLy8gY29uc3RhbnRzXG5jb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuXG5jb25zdCB7IGFzc2lnbiB9ID0gT2JqZWN0O1xuXG5mdW5jdGlvbiBjcmVhdGVSb290IChzaGFkb3dSb290LCBwcm9wcykge1xuICBjb25zdCByZWZzID0ge307XG4gIGNvbnN0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgY29uc3QgYWJvcnRTaWduYWwgPSBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xuICBjb25zdCB7IHN0YXRlLCBjcmVhdGVFZmZlY3QgfSA9IGNyZWF0ZVN0YXRlKGFib3J0U2lnbmFsKTtcbiAgY29uc3QgYWN0aW9uQ29udGV4dCA9IG5ldyBNYXAoKTtcblxuICAvLyBpbml0aWFsIHN0YXRlXG4gIGFzc2lnbihzdGF0ZSwge1xuICAgIHNraW5Ub25lRW1vamk6IHVuZGVmaW5lZCxcbiAgICBpMThuOiB1bmRlZmluZWQsXG4gICAgZGF0YWJhc2U6IHVuZGVmaW5lZCxcbiAgICBjdXN0b21FbW9qaTogdW5kZWZpbmVkLFxuICAgIGN1c3RvbUNhdGVnb3J5U29ydGluZzogdW5kZWZpbmVkLFxuICAgIGVtb2ppVmVyc2lvbjogdW5kZWZpbmVkXG4gIH0pO1xuXG4gIC8vIHB1YmxpYyBwcm9wc1xuICBhc3NpZ24oc3RhdGUsIHByb3BzKTtcblxuICAvLyBwcml2YXRlIHByb3BzXG4gIGFzc2lnbihzdGF0ZSwge1xuICAgIGluaXRpYWxMb2FkOiB0cnVlLFxuICAgIGN1cnJlbnRFbW9qaXM6IFtdLFxuICAgIGN1cnJlbnRFbW9qaXNXaXRoQ2F0ZWdvcmllczogW10sXG4gICAgcmF3U2VhcmNoVGV4dDogJycsXG4gICAgc2VhcmNoVGV4dDogJycsXG4gICAgc2VhcmNoTW9kZTogZmFsc2UsXG4gICAgYWN0aXZlU2VhcmNoSXRlbTogLTEsXG4gICAgbWVzc2FnZTogdW5kZWZpbmVkLFxuICAgIHNraW5Ub25lUGlja2VyRXhwYW5kZWQ6IGZhbHNlLFxuICAgIHNraW5Ub25lUGlja2VyRXhwYW5kZWRBZnRlckFuaW1hdGlvbjogZmFsc2UsXG4gICAgY3VycmVudFNraW5Ub25lOiAwLFxuICAgIGFjdGl2ZVNraW5Ub25lOiAwLFxuICAgIHNraW5Ub25lQnV0dG9uVGV4dDogdW5kZWZpbmVkLFxuICAgIHBpY2tlclN0eWxlOiB1bmRlZmluZWQsXG4gICAgc2tpblRvbmVCdXR0b25MYWJlbDogJycsXG4gICAgc2tpblRvbmVzOiBbXSxcbiAgICBjdXJyZW50RmF2b3JpdGVzOiBbXSxcbiAgICBkZWZhdWx0RmF2b3JpdGVFbW9qaXM6IHVuZGVmaW5lZCxcbiAgICBudW1Db2x1bW5zOiBERUZBVUxUX05VTV9DT0xVTU5TLFxuICAgIGlzUnRsOiBmYWxzZSxcbiAgICBjdXJyZW50R3JvdXBJbmRleDogMCxcbiAgICBncm91cHM6IGdyb3VwcyxcbiAgICBkYXRhYmFzZUxvYWRlZDogZmFsc2UsXG4gICAgYWN0aXZlU2VhcmNoSXRlbUlkOiB1bmRlZmluZWRcbiAgfSk7XG5cbiAgLy9cbiAgLy8gVXBkYXRlIHRoZSBjdXJyZW50IGdyb3VwIGJhc2VkIG9uIHRoZSBjdXJyZW50R3JvdXBJbmRleFxuICAvL1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0ZS5jdXJyZW50R3JvdXAgIT09IHN0YXRlLmdyb3Vwc1tzdGF0ZS5jdXJyZW50R3JvdXBJbmRleF0pIHtcbiAgICAgIHN0YXRlLmN1cnJlbnRHcm91cCA9IHN0YXRlLmdyb3Vwc1tzdGF0ZS5jdXJyZW50R3JvdXBJbmRleF07XG4gICAgfVxuICB9KTtcblxuICAvL1xuICAvLyBVdGlscy9oZWxwZXJzXG4gIC8vXG5cbiAgY29uc3QgZm9jdXMgPSBpZCA9PiB7XG4gICAgc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChpZCkuZm9jdXMoKTtcbiAgfTtcblxuICBjb25zdCBlbW9qaVRvRG9tTm9kZSA9IGVtb2ppID0+IHNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoYGVtby0ke2Vtb2ppLmlkfWApO1xuXG4gIC8vIGZpcmUgYSBjdXN0b20gZXZlbnQgdGhhdCBjcm9zc2VzIHRoZSBzaGFkb3cgYm91bmRhcnlcbiAgY29uc3QgZmlyZUV2ZW50ID0gKG5hbWUsIGRldGFpbCkgPT4ge1xuICAgIHJlZnMucm9vdEVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQobmFtZSwge1xuICAgICAgZGV0YWlsLFxuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNvbXBvc2VkOiB0cnVlXG4gICAgfSkpO1xuICB9O1xuXG4gIC8vXG4gIC8vIENvbXBhcmlzb24gdXRpbHNcbiAgLy9cblxuICBjb25zdCBjb21wYXJlRW1vamlBcnJheXMgPSAoYSwgYikgPT4gYS5pZCA9PT0gYi5pZDtcblxuICBjb25zdCBjb21wYXJlQ3VycmVudEVtb2ppc1dpdGhDYXRlZ29yaWVzID0gKGEsIGIpID0+IHtcbiAgICBjb25zdCB7IGNhdGVnb3J5OiBhQ2F0ZWdvcnksIGVtb2ppczogYUVtb2ppcyB9ID0gYTtcbiAgICBjb25zdCB7IGNhdGVnb3J5OiBiQ2F0ZWdvcnksIGVtb2ppczogYkVtb2ppcyB9ID0gYjtcblxuICAgIGlmIChhQ2F0ZWdvcnkgIT09IGJDYXRlZ29yeSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5c0FyZUVxdWFsQnlGdW5jdGlvbihhRW1vamlzLCBiRW1vamlzLCBjb21wYXJlRW1vamlBcnJheXMpXG4gIH07XG5cbiAgLy9cbiAgLy8gVXBkYXRlIHV0aWxzIHRvIGF2b2lkIGV4Y2Vzc2l2ZSByZS1yZW5kZXJzXG4gIC8vXG5cbiAgLy8gYXZvaWQgZXhjZXNzaXZlIHJlLXJlbmRlcnMgYnkgY2hlY2tpbmcgdGhlIHZhbHVlIGJlZm9yZSBzZXR0aW5nXG4gIGNvbnN0IHVwZGF0ZUN1cnJlbnRFbW9qaXMgPSAobmV3RW1vamlzKSA9PiB7XG4gICAgaWYgKCFhcnJheXNBcmVFcXVhbEJ5RnVuY3Rpb24oc3RhdGUuY3VycmVudEVtb2ppcywgbmV3RW1vamlzLCBjb21wYXJlRW1vamlBcnJheXMpKSB7XG4gICAgICBzdGF0ZS5jdXJyZW50RW1vamlzID0gbmV3RW1vamlzO1xuICAgIH1cbiAgfTtcblxuICAvLyBhdm9pZCBleGNlc3NpdmUgcmUtcmVuZGVyc1xuICBjb25zdCB1cGRhdGVTZWFyY2hNb2RlID0gKG5ld1NlYXJjaE1vZGUpID0+IHtcbiAgICBpZiAoc3RhdGUuc2VhcmNoTW9kZSAhPT0gbmV3U2VhcmNoTW9kZSkge1xuICAgICAgc3RhdGUuc2VhcmNoTW9kZSA9IG5ld1NlYXJjaE1vZGU7XG4gICAgfVxuICB9O1xuXG4gIC8vIGF2b2lkIGV4Y2Vzc2l2ZSByZS1yZW5kZXJzXG4gIGNvbnN0IHVwZGF0ZUN1cnJlbnRFbW9qaXNXaXRoQ2F0ZWdvcmllcyA9IChuZXdFbW9qaXNXaXRoQ2F0ZWdvcmllcykgPT4ge1xuICAgIGlmICghYXJyYXlzQXJlRXF1YWxCeUZ1bmN0aW9uKHN0YXRlLmN1cnJlbnRFbW9qaXNXaXRoQ2F0ZWdvcmllcywgbmV3RW1vamlzV2l0aENhdGVnb3JpZXMsIGNvbXBhcmVDdXJyZW50RW1vamlzV2l0aENhdGVnb3JpZXMpKSB7XG4gICAgICBzdGF0ZS5jdXJyZW50RW1vamlzV2l0aENhdGVnb3JpZXMgPSBuZXdFbW9qaXNXaXRoQ2F0ZWdvcmllcztcbiAgICB9XG4gIH07XG5cbiAgLy8gSGVscGVycyB1c2VkIGJ5IFBpY2tlclRlbXBsYXRlXG5cbiAgY29uc3QgdW5pY29kZVdpdGhTa2luID0gKGVtb2ppLCBjdXJyZW50U2tpblRvbmUpID0+IChcbiAgICAoY3VycmVudFNraW5Ub25lICYmIGVtb2ppLnNraW5zICYmIGVtb2ppLnNraW5zW2N1cnJlbnRTa2luVG9uZV0pIHx8IGVtb2ppLnVuaWNvZGVcbiAgKTtcblxuICBjb25zdCBsYWJlbFdpdGhTa2luID0gKGVtb2ppLCBjdXJyZW50U2tpblRvbmUpID0+IChcbiAgICB1bmlxKFtcbiAgICAgIChlbW9qaS5uYW1lIHx8IHVuaWNvZGVXaXRoU2tpbihlbW9qaSwgY3VycmVudFNraW5Ub25lKSksXG4gICAgICBlbW9qaS5hbm5vdGF0aW9uLFxuICAgICAgLi4uKGVtb2ppLnNob3J0Y29kZXMgfHwgRU1QVFlfQVJSQVkpXG4gICAgXS5maWx0ZXIoQm9vbGVhbikpLmpvaW4oJywgJylcbiAgKTtcblxuICBjb25zdCB0aXRsZUZvckVtb2ppID0gKGVtb2ppKSA9PiAoXG4gICAgZW1vamkuYW5ub3RhdGlvbiB8fCAoZW1vamkuc2hvcnRjb2RlcyB8fCBFTVBUWV9BUlJBWSkuam9pbignLCAnKVxuICApO1xuXG4gIGNvbnN0IGhlbHBlcnMgPSB7XG4gICAgbGFiZWxXaXRoU2tpbiwgdGl0bGVGb3JFbW9qaSwgdW5pY29kZVdpdGhTa2luXG4gIH07XG4gIGNvbnN0IGV2ZW50cyA9IHtcbiAgICBvbkNsaWNrU2tpblRvbmVCdXR0b24sXG4gICAgb25FbW9qaUNsaWNrLFxuICAgIG9uTmF2Q2xpY2ssXG4gICAgb25OYXZLZXlkb3duLFxuICAgIG9uU2VhcmNoS2V5ZG93bixcbiAgICBvblNraW5Ub25lT3B0aW9uc0NsaWNrLFxuICAgIG9uU2tpblRvbmVPcHRpb25zRm9jdXNPdXQsXG4gICAgb25Ta2luVG9uZU9wdGlvbnNLZXlkb3duLFxuICAgIG9uU2tpblRvbmVPcHRpb25zS2V5dXAsXG4gICAgb25TZWFyY2hJbnB1dFxuICB9O1xuICBjb25zdCBhY3Rpb25zID0ge1xuICAgIGNhbGN1bGF0ZUVtb2ppR3JpZFN0eWxlLFxuICAgIHVwZGF0ZU9uSW50ZXJzZWN0aW9uXG4gIH07XG5cbiAgbGV0IGZpcnN0UmVuZGVyID0gdHJ1ZTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICByZW5kZXIoc2hhZG93Um9vdCwgc3RhdGUsIGhlbHBlcnMsIGV2ZW50cywgYWN0aW9ucywgcmVmcywgYWJvcnRTaWduYWwsIGFjdGlvbkNvbnRleHQsIGZpcnN0UmVuZGVyKTtcbiAgICBmaXJzdFJlbmRlciA9IGZhbHNlO1xuICB9KTtcblxuICAvL1xuICAvLyBEZXRlcm1pbmUgdGhlIGVtb2ppIHN1cHBvcnQgbGV2ZWwgKGluIHJlcXVlc3RJZGxlQ2FsbGJhY2spXG4gIC8vXG5cbiAgLy8gbW91bnQgbG9naWNcbiAgaWYgKCFzdGF0ZS5lbW9qaVZlcnNpb24pIHtcbiAgICBkZXRlY3RFbW9qaVN1cHBvcnRMZXZlbCgpLnRoZW4obGV2ZWwgPT4ge1xuICAgICAgLy8gQ2FuJ3QgYWN0dWFsbHkgdGVzdCBlbW9qaSBzdXBwb3J0IGluIEplc3QvVml0ZXN0L0pTRG9tLCBlbW9qaSBuZXZlciByZW5kZXIgaW4gY29sb3IgaW4gQ2Fpcm9cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBpZiAoIWxldmVsKSB7XG4gICAgICAgIHN0YXRlLm1lc3NhZ2UgPSBzdGF0ZS5pMThuLmVtb2ppVW5zdXBwb3J0ZWRNZXNzYWdlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy9cbiAgLy8gU2V0IG9yIHVwZGF0ZSB0aGUgZGF0YWJhc2Ugb2JqZWN0XG4gIC8vXG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBzaG93IGEgTG9hZGluZyBtZXNzYWdlIGlmIGl0IHRha2VzIGEgbG9uZyB0aW1lLCBvciBzaG93IGFuIGVycm9yIGlmIHRoZXJlJ3MgYSBuZXR3b3JrL0lEQiBlcnJvclxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZURhdGFiYXNlTG9hZGluZyAoKSB7XG4gICAgICBsZXQgc2hvd2luZ0xvYWRpbmdNZXNzYWdlID0gZmFsc2U7XG4gICAgICBjb25zdCB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNob3dpbmdMb2FkaW5nTWVzc2FnZSA9IHRydWU7XG4gICAgICAgIHN0YXRlLm1lc3NhZ2UgPSBzdGF0ZS5pMThuLmxvYWRpbmdNZXNzYWdlO1xuICAgICAgfSwgVElNRU9VVF9CRUZPUkVfTE9BRElOR19NRVNTQUdFKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHN0YXRlLmRhdGFiYXNlLnJlYWR5KCk7XG4gICAgICAgIHN0YXRlLmRhdGFiYXNlTG9hZGVkID0gdHJ1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgc3RhdGUubWVzc2FnZSA9IHN0YXRlLmkxOG4ubmV0d29ya0Vycm9yTWVzc2FnZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgaWYgKHNob3dpbmdMb2FkaW5nTWVzc2FnZSkgeyAvLyBTZWVtcyBzYWZlciB0aGFuIGNoZWNraW5nIHRoZSBpMThuIHN0cmluZywgd2hpY2ggbWF5IGNoYW5nZVxuICAgICAgICAgIHNob3dpbmdMb2FkaW5nTWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICAgIHN0YXRlLm1lc3NhZ2UgPSAnJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmRhdGFiYXNlKSB7XG4gICAgICAvKiBubyBhd2FpdCAqL1xuICAgICAgaGFuZGxlRGF0YWJhc2VMb2FkaW5nKCk7XG4gICAgfVxuICB9KTtcblxuICAvL1xuICAvLyBHbG9iYWwgc3R5bGVzIGZvciB0aGUgZW50aXJlIHBpY2tlclxuICAvL1xuXG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgc3RhdGUucGlja2VyU3R5bGUgPSBgXG4gICAgICAtLW51bS1ncm91cHM6ICR7c3RhdGUuZ3JvdXBzLmxlbmd0aH07IFxuICAgICAgLS1pbmRpY2F0b3Itb3BhY2l0eTogJHtzdGF0ZS5zZWFyY2hNb2RlID8gMCA6IDF9OyBcbiAgICAgIC0tbnVtLXNraW50b25lczogJHtOVU1fU0tJTl9UT05FU307YDtcbiAgfSk7XG5cbiAgLy9cbiAgLy8gU2V0IG9yIHVwZGF0ZSB0aGUgY3VzdG9tRW1vamlcbiAgLy9cblxuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0ZS5jdXN0b21FbW9qaSAmJiBzdGF0ZS5kYXRhYmFzZSkge1xuICAgICAgdXBkYXRlQ3VzdG9tRW1vamkoKTsgLy8gcmUtcnVuIHdoZW5ldmVyIGN1c3RvbUVtb2ppIGNoYW5nZVxuICAgIH1cbiAgfSk7XG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoc3RhdGUuY3VzdG9tRW1vamkgJiYgc3RhdGUuY3VzdG9tRW1vamkubGVuZ3RoKSB7XG4gICAgICBpZiAoc3RhdGUuZ3JvdXBzICE9PSBhbGxHcm91cHMpIHsgLy8gZG9uJ3QgdXBkYXRlIHVubmVjZXNzYXJpbHlcbiAgICAgICAgc3RhdGUuZ3JvdXBzID0gYWxsR3JvdXBzO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhdGUuZ3JvdXBzICE9PSBncm91cHMpIHtcbiAgICAgIGlmIChzdGF0ZS5jdXJyZW50R3JvdXBJbmRleCkge1xuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBncm91cCBpcyBhbnl0aGluZyBvdGhlciB0aGFuIFwiY3VzdG9tXCIgKHdoaWNoIGlzIGZpcnN0KSwgZGVjcmVtZW50LlxuICAgICAgICAvLyBUaGlzIGZpeGVzIHRoZSBvZGQgY2FzZSB3aGVyZSB5b3Ugc2V0IGN1c3RvbUVtb2ppLCB0aGVuIHBpY2sgYSBjYXRlZ29yeSwgdGhlbiB1bnNldCBjdXN0b21FbW9qaVxuICAgICAgICBzdGF0ZS5jdXJyZW50R3JvdXBJbmRleC0tO1xuICAgICAgfVxuICAgICAgc3RhdGUuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIH1cbiAgfSk7XG5cbiAgLy9cbiAgLy8gU2V0IG9yIHVwZGF0ZSB0aGUgcHJlZmVycmVkIHNraW4gdG9uZVxuICAvL1xuXG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlUHJlZmVycmVkU2tpblRvbmUgKCkge1xuICAgICAgaWYgKHN0YXRlLmRhdGFiYXNlTG9hZGVkKSB7XG4gICAgICAgIHN0YXRlLmN1cnJlbnRTa2luVG9uZSA9IGF3YWl0IHN0YXRlLmRhdGFiYXNlLmdldFByZWZlcnJlZFNraW5Ub25lKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogbm8gYXdhaXQgKi8gdXBkYXRlUHJlZmVycmVkU2tpblRvbmUoKTtcbiAgfSk7XG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0ZS5za2luVG9uZXMgPSBBcnJheShOVU1fU0tJTl9UT05FUykuZmlsbCgpLm1hcCgoXywgaSkgPT4gYXBwbHlTa2luVG9uZShzdGF0ZS5za2luVG9uZUVtb2ppLCBpKSk7XG4gIH0pO1xuXG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgc3RhdGUuc2tpblRvbmVCdXR0b25UZXh0ID0gc3RhdGUuc2tpblRvbmVzW3N0YXRlLmN1cnJlbnRTa2luVG9uZV07XG4gIH0pO1xuXG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgc3RhdGUuc2tpblRvbmVCdXR0b25MYWJlbCA9IHN0YXRlLmkxOG4uc2tpblRvbmVMYWJlbC5yZXBsYWNlKCd7c2tpblRvbmV9Jywgc3RhdGUuaTE4bi5za2luVG9uZXNbc3RhdGUuY3VycmVudFNraW5Ub25lXSk7XG4gIH0pO1xuXG4gIC8vXG4gIC8vIFNldCBvciB1cGRhdGUgdGhlIGZhdm9yaXRlcyBlbW9qaXNcbiAgLy9cblxuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURlZmF1bHRGYXZvcml0ZUVtb2ppcyAoKSB7XG4gICAgICBjb25zdCB7IGRhdGFiYXNlIH0gPSBzdGF0ZTtcbiAgICAgIGNvbnN0IGZhdnMgPSAoYXdhaXQgUHJvbWlzZS5hbGwoTU9TVF9DT01NT05MWV9VU0VEX0VNT0pJLm1hcCh1bmljb2RlID0+IChcbiAgICAgICAgZGF0YWJhc2UuZ2V0RW1vamlCeVVuaWNvZGVPck5hbWUodW5pY29kZSlcbiAgICAgICkpKSkuZmlsdGVyKEJvb2xlYW4pOyAvLyBmaWx0ZXIgYmVjYXVzZSBpbiBKZXN0L1ZpdGVzdCB0ZXN0cyB3ZSBkb24ndCBoYXZlIGFsbCB0aGUgZW1vamkgaW4gdGhlIERCXG4gICAgICBzdGF0ZS5kZWZhdWx0RmF2b3JpdGVFbW9qaXMgPSBmYXZzO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5kYXRhYmFzZUxvYWRlZCkge1xuICAgICAgLyogbm8gYXdhaXQgKi8gdXBkYXRlRGVmYXVsdEZhdm9yaXRlRW1vamlzKCk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiB1cGRhdGVDdXN0b21FbW9qaSAoKSB7XG4gICAgLy8gQ2VydGFpbiBlZmZlY3RzIGhhdmUgYW4gaW1wbGljaXQgZGVwZW5kZW5jeSBvbiBjdXN0b21FbW9qaSBzaW5jZSBpdCBhZmZlY3RzIHRoZSBkYXRhYmFzZVxuICAgIC8vIEdldHRpbmcgaXQgaGVyZSBvbiB0aGUgc3RhdGUgZW5zdXJlcyB0aGlzIGVmZmVjdCByZS1ydW5zIHdoZW4gY3VzdG9tRW1vamkgY2hhbmdlLlxuICAgIGNvbnN0IHsgY3VzdG9tRW1vamksIGRhdGFiYXNlIH0gPSBzdGF0ZTtcbiAgICBjb25zdCBkYXRhYmFzZUN1c3RvbUVtb2ppID0gY3VzdG9tRW1vamkgfHwgRU1QVFlfQVJSQVk7XG4gICAgaWYgKGRhdGFiYXNlLmN1c3RvbUVtb2ppICE9PSBkYXRhYmFzZUN1c3RvbUVtb2ppKSB7XG4gICAgICAvLyBBdm9pZCBzZXR0aW5nIHRoaXMgaWYgdGhlIGN1c3RvbUVtb2ppIGhhdmUgX25vdF8gY2hhbmdlZCwgYmVjYXVzZSB0aGUgc2V0dGVyIHRyaWdnZXJzIGEgcmUtY29tcHV0YXRpb24gb2YgdGhlXG4gICAgICAvLyBgY3VzdG9tRW1vamlJbmRleGAuIE5vdGUgd2UgZG9uJ3QgYm90aGVyIHdpdGggZGVlcCBvYmplY3QgY2hhbmdlcy5cbiAgICAgIGRhdGFiYXNlLmN1c3RvbUVtb2ppID0gZGF0YWJhc2VDdXN0b21FbW9qaTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUZhdm9yaXRlcyAoKSB7XG4gICAgICB1cGRhdGVDdXN0b21FbW9qaSgpOyAvLyByZS1ydW4gd2hlbmV2ZXIgY3VzdG9tRW1vamkgY2hhbmdlXG4gICAgICBjb25zdCB7IGRhdGFiYXNlLCBkZWZhdWx0RmF2b3JpdGVFbW9qaXMsIG51bUNvbHVtbnMgfSA9IHN0YXRlO1xuICAgICAgY29uc3QgZGJGYXZvcml0ZXMgPSBhd2FpdCBkYXRhYmFzZS5nZXRUb3BGYXZvcml0ZUVtb2ppKG51bUNvbHVtbnMpO1xuICAgICAgY29uc3QgZmF2b3JpdGVzID0gYXdhaXQgc3VtbWFyaXplRW1vamlzKHVuaXFCeShbXG4gICAgICAgIC4uLmRiRmF2b3JpdGVzLFxuICAgICAgICAuLi5kZWZhdWx0RmF2b3JpdGVFbW9qaXNcbiAgICAgIF0sIF8gPT4gKF8udW5pY29kZSB8fCBfLm5hbWUpKS5zbGljZSgwLCBudW1Db2x1bW5zKSk7XG4gICAgICBzdGF0ZS5jdXJyZW50RmF2b3JpdGVzID0gZmF2b3JpdGVzO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5kYXRhYmFzZUxvYWRlZCAmJiBzdGF0ZS5kZWZhdWx0RmF2b3JpdGVFbW9qaXMpIHtcbiAgICAgIC8qIG5vIGF3YWl0ICovIHVwZGF0ZUZhdm9yaXRlcygpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy9cbiAgLy8gUmUtcnVuIHdoZW5ldmVyIHRoZSBlbW9qaSBncmlkIGNoYW5nZXMgc2l6ZSwgYW5kIHJlLWNhbGMgc3R5bGUvbGF5b3V0LXJlbGF0ZWQgc3RhdGUgdmFyaWFibGVzOlxuICAvLyAxKSBSZS1jYWxjdWxhdGUgdGhlIC0tbnVtLWNvbHVtbnMgdmFyIGJlY2F1c2UgaXQgbWF5IGhhdmUgY2hhbmdlZFxuICAvLyAyKSBSZS1jYWxjdWxhdGUgd2hldGhlciB3ZSdyZSBpbiBSVEwgbW9kZSBvciBub3QuXG4gIC8vXG4gIC8vIFRoZSBiZW5lZml0IG9mIGRvaW5nIHRoaXMgaW4gb25lIHBsYWNlIGlzIHRvIGFsaWduIHdpdGggckFGL1Jlc2l6ZU9ic2VydmVyXG4gIC8vIGFuZCBkbyBhbGwgdGhlIGNhbGN1bGF0aW9ucyBpbiBvbmUgZ28uIFJUTCB2cyBMVFIgaXMgbm90IHN0cmljdGx5IGxheW91dC1yZWxhdGVkLFxuICAvLyBidXQgc2luY2Ugd2UncmUgYWxyZWFkeSByZWFkaW5nIHRoZSBzdHlsZSBoZXJlLCBhbmQgc2luY2UgaXQncyBhbHJlYWR5IGFsaWduZWQgd2l0aFxuICAvLyB0aGUgckFGIGxvb3AsIHRoaXMgaXMgdGhlIG1vc3QgYXBwcm9wcmlhdGUgcGxhY2UgdG8gZG8gaXQgcGVyZi13aXNlLlxuICAvL1xuXG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZUVtb2ppR3JpZFN0eWxlIChub2RlKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXJBY3Rpb24obm9kZSwgYWJvcnRTaWduYWwsICgpID0+IHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB7IC8vIGpzZG9tIHRocm93cyBlcnJvcnMgZm9yIHRoaXMga2luZCBvZiBmYW5jeSBzdHVmZlxuICAgICAgICAvLyByZWFkIGFsbCB0aGUgc3R5bGUvbGF5b3V0IGNhbGN1bGF0aW9ucyB3ZSBuZWVkIHRvIG1ha2VcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHJlZnMucm9vdEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBuZXdOdW1Db2x1bW5zID0gcGFyc2VJbnQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS1udW0tY29sdW1ucycpLCAxMCk7XG4gICAgICAgIGNvbnN0IG5ld0lzUnRsID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJykgPT09ICdydGwnO1xuXG4gICAgICAgIC8vIHdyaXRlIHRvIHN0YXRlIHZhcmlhYmxlc1xuICAgICAgICBzdGF0ZS5udW1Db2x1bW5zID0gbmV3TnVtQ29sdW1ucztcbiAgICAgICAgc3RhdGUuaXNSdGwgPSBuZXdJc1J0bDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJlLXJ1biB3aGVuZXZlciB0aGUgY3VzdG9tIGVtb2ppIGluIGEgY2F0ZWdvcnkgYXJlIHNob3duL2hpZGRlbi4gVGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gdGhhdCBzaW11bGF0ZXNcbiAgLy8gd2hhdCB3ZSdkIGdldCBmcm9tIGA8aW1nIGxvYWRpbmc9bGF6eT5gIGJ1dCB3aXRob3V0IHJlbmRlcmluZyBhbiBgPGltZz5gLlxuICBmdW5jdGlvbiB1cGRhdGVPbkludGVyc2VjdGlvbiAobm9kZSkge1xuICAgIGludGVyc2VjdGlvbk9ic2VydmVyQWN0aW9uKG5vZGUsIGFib3J0U2lnbmFsLCAoZW50cmllcykgPT4ge1xuICAgICAgZm9yIChjb25zdCB7IHRhcmdldCwgaXNJbnRlcnNlY3RpbmcgfSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdvbnNjcmVlbicsIGlzSW50ZXJzZWN0aW5nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vXG4gIC8vIFNldCBvciB1cGRhdGUgdGhlIGN1cnJlbnRFbW9qaXMuIENoZWNrIGZvciBpbnZhbGlkIFpXSiByZW5kZXJpbmdzXG4gIC8vIChpLmUuIGRvdWJsZSBlbW9qaSkuXG4gIC8vXG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiB1cGRhdGVFbW9qaXMgKCkge1xuICAgICAgY29uc3QgeyBzZWFyY2hUZXh0LCBjdXJyZW50R3JvdXAsIGRhdGFiYXNlTG9hZGVkLCBjdXN0b21FbW9qaSB9ID0gc3RhdGU7XG4gICAgICBpZiAoIWRhdGFiYXNlTG9hZGVkKSB7XG4gICAgICAgIHN0YXRlLmN1cnJlbnRFbW9qaXMgPSBbXTtcbiAgICAgICAgc3RhdGUuc2VhcmNoTW9kZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChzZWFyY2hUZXh0Lmxlbmd0aCA+PSBNSU5fU0VBUkNIX1RFWFRfTEVOR1RIKSB7XG4gICAgICAgIGNvbnN0IG5ld0Vtb2ppcyA9IGF3YWl0IGdldEVtb2ppc0J5U2VhcmNoUXVlcnkoc2VhcmNoVGV4dCk7XG4gICAgICAgIGlmIChzdGF0ZS5zZWFyY2hUZXh0ID09PSBzZWFyY2hUZXh0KSB7IC8vIGlmIHRoZSBzaXR1YXRpb24gY2hhbmdlcyBhc3luY2hyb25vdXNseSwgZG8gbm90IHVwZGF0ZVxuICAgICAgICAgIHVwZGF0ZUN1cnJlbnRFbW9qaXMobmV3RW1vamlzKTtcbiAgICAgICAgICB1cGRhdGVTZWFyY2hNb2RlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgeyAvLyBkYXRhYmFzZSBpcyBsb2FkZWQgYW5kIHdlJ3JlIG5vdCBpbiBzZWFyY2ggbW9kZSwgc28gd2UncmUgaW4gbm9ybWFsIGNhdGVnb3J5IG1vZGVcbiAgICAgICAgY29uc3QgeyBpZDogY3VycmVudEdyb3VwSWQgfSA9IGN1cnJlbnRHcm91cDtcbiAgICAgICAgLy8gYXZvaWQgcmFjZSBjb25kaXRpb24gd2hlcmUgY3VycmVudEdyb3VwSWQgaXMgLTEgYW5kIGN1c3RvbUVtb2ppIGlzIHVuZGVmaW5lZC9lbXB0eVxuICAgICAgICBpZiAoY3VycmVudEdyb3VwSWQgIT09IC0xIHx8IChjdXN0b21FbW9qaSAmJiBjdXN0b21FbW9qaS5sZW5ndGgpKSB7XG4gICAgICAgICAgY29uc3QgbmV3RW1vamlzID0gYXdhaXQgZ2V0RW1vamlzQnlHcm91cChjdXJyZW50R3JvdXBJZCk7XG4gICAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRHcm91cC5pZCA9PT0gY3VycmVudEdyb3VwSWQpIHsgLy8gaWYgdGhlIHNpdHVhdGlvbiBjaGFuZ2VzIGFzeW5jaHJvbm91c2x5LCBkbyBub3QgdXBkYXRlXG4gICAgICAgICAgICB1cGRhdGVDdXJyZW50RW1vamlzKG5ld0Vtb2ppcyk7XG4gICAgICAgICAgICB1cGRhdGVTZWFyY2hNb2RlKGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBubyBhd2FpdCAqLyB1cGRhdGVFbW9qaXMoKTtcbiAgfSk7XG5cbiAgY29uc3QgcmVzZXRTY3JvbGxUb3BJblJhZiA9ICgpID0+IHtcbiAgICByQUYoKCkgPT4gcmVzZXRTY3JvbGxUb3BJZlBvc3NpYmxlKHJlZnMudGFicGFuZWxFbGVtZW50KSk7XG4gIH07XG5cbiAgLy8gU29tZSBlbW9qaXMgaGF2ZSB0aGVpciBsaWdhdHVyZXMgcmVuZGVyZWQgYXMgdHdvIG9yIG1vcmUgY29uc2VjdXRpdmUgZW1vamlzXG4gIC8vIFdlIHdhbnQgdG8gdHJlYXQgdGhlc2UgdGhlIHNhbWUgYXMgdW5zdXBwb3J0ZWQgZW1vamlzLCBzbyB3ZSBjb21wYXJlIHRoZWlyXG4gIC8vIHdpZHRocyBhZ2FpbnN0IHRoZSBiYXNlbGluZSB3aWR0aHMgYW5kIHJlbW92ZSB0aGVtIGFzIG5lY2Vzc2FyeVxuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VycmVudEVtb2ppcywgZW1vamlWZXJzaW9uIH0gPSBzdGF0ZTtcbiAgICBjb25zdCB6d2pFbW9qaXNUb0NoZWNrID0gY3VycmVudEVtb2ppc1xuICAgICAgLmZpbHRlcihlbW9qaSA9PiBlbW9qaS51bmljb2RlKSAvLyBmaWx0ZXIgY3VzdG9tIGVtb2ppXG4gICAgICAuZmlsdGVyKGVtb2ppID0+IGhhc1p3aihlbW9qaSkgJiYgIXN1cHBvcnRlZFp3akVtb2ppcy5oYXMoZW1vamkudW5pY29kZSkpO1xuICAgIGlmICghZW1vamlWZXJzaW9uICYmIHp3akVtb2ppc1RvQ2hlY2subGVuZ3RoKSB7XG4gICAgICAvLyByZW5kZXIgbm93LCBjaGVjayB0aGVpciBsZW5ndGggbGF0ZXJcbiAgICAgIHVwZGF0ZUN1cnJlbnRFbW9qaXMoY3VycmVudEVtb2ppcyk7XG4gICAgICByQUYoKCkgPT4gY2hlY2tad2pTdXBwb3J0QW5kVXBkYXRlKHp3akVtb2ppc1RvQ2hlY2spKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmV3RW1vamlzID0gZW1vamlWZXJzaW9uID8gY3VycmVudEVtb2ppcyA6IGN1cnJlbnRFbW9qaXMuZmlsdGVyKGlzWndqU3VwcG9ydGVkKTtcbiAgICAgIHVwZGF0ZUN1cnJlbnRFbW9qaXMobmV3RW1vamlzKTtcbiAgICAgIC8vIFJlc2V0IHNjcm9sbCB0b3AgdG8gMCB3aGVuIGVtb2ppcyBjaGFuZ2VcbiAgICAgIHJlc2V0U2Nyb2xsVG9wSW5SYWYoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNoZWNrWndqU3VwcG9ydEFuZFVwZGF0ZSAoendqRW1vamlzVG9DaGVjaykge1xuICAgIGNvbnN0IGFsbFN1cHBvcnRlZCA9IGNoZWNrWndqU3VwcG9ydCh6d2pFbW9qaXNUb0NoZWNrLCByZWZzLmJhc2VsaW5lRW1vamksIGVtb2ppVG9Eb21Ob2RlKTtcbiAgICBpZiAoYWxsU3VwcG9ydGVkKSB7XG4gICAgICAvLyBFdmVuIGlmIGFsbCBlbW9qaSBhcmUgc3VwcG9ydGVkLCB3ZSBzdGlsbCBuZWVkIHRvIHJlc2V0IHRoZSBzY3JvbGwgdG9wIHRvIDAgd2hlbiBlbW9qaXMgY2hhbmdlXG4gICAgICByZXNldFNjcm9sbFRvcEluUmFmKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZvcmNlIHVwZGF0ZS4gV2Ugb25seSBkbyB0aGlzIGlmIHRoZXJlIGFyZSBhbnkgdW5zdXBwb3J0ZWQgWldKIGNoYXJhY3RlcnMgc2luY2Ugb3RoZXJ3aXNlLFxuICAgICAgLy8gZm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBhbGwgZW1vamksIGl0IHdvdWxkIGJlIGFuIHVubmVjZXNzYXJ5IGV4dHJhIHJlLXJlbmRlci5cbiAgICAgIHN0YXRlLmN1cnJlbnRFbW9qaXMgPSBbLi4uc3RhdGUuY3VycmVudEVtb2ppc107XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNad2pTdXBwb3J0ZWQgKGVtb2ppKSB7XG4gICAgcmV0dXJuICFlbW9qaS51bmljb2RlIHx8ICFoYXNad2ooZW1vamkpIHx8IHN1cHBvcnRlZFp3akVtb2ppcy5nZXQoZW1vamkudW5pY29kZSlcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGZpbHRlckVtb2ppc0J5VmVyc2lvbiAoZW1vamlzKSB7XG4gICAgY29uc3QgZW1vamlTdXBwb3J0TGV2ZWwgPSBzdGF0ZS5lbW9qaVZlcnNpb24gfHwgYXdhaXQgZGV0ZWN0RW1vamlTdXBwb3J0TGV2ZWwoKTtcbiAgICAvLyAhdmVyc2lvbiBjb3JyZXNwb25kcyB0byBjdXN0b20gZW1vamlcbiAgICByZXR1cm4gZW1vamlzLmZpbHRlcigoeyB2ZXJzaW9uIH0pID0+ICF2ZXJzaW9uIHx8IHZlcnNpb24gPD0gZW1vamlTdXBwb3J0TGV2ZWwpXG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBzdW1tYXJpemVFbW9qaXMgKGVtb2ppcykge1xuICAgIHJldHVybiBzdW1tYXJpemVFbW9qaXNGb3JVSShlbW9qaXMsIHN0YXRlLmVtb2ppVmVyc2lvbiB8fCBhd2FpdCBkZXRlY3RFbW9qaVN1cHBvcnRMZXZlbCgpKVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gZ2V0RW1vamlzQnlHcm91cCAoZ3JvdXApIHtcbiAgICAvLyAtMSBpcyBjdXN0b20gZW1vamlcbiAgICBjb25zdCBlbW9qaSA9IGdyb3VwID09PSAtMSA/IHN0YXRlLmN1c3RvbUVtb2ppIDogYXdhaXQgc3RhdGUuZGF0YWJhc2UuZ2V0RW1vamlCeUdyb3VwKGdyb3VwKTtcbiAgICByZXR1cm4gc3VtbWFyaXplRW1vamlzKGF3YWl0IGZpbHRlckVtb2ppc0J5VmVyc2lvbihlbW9qaSkpXG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBnZXRFbW9qaXNCeVNlYXJjaFF1ZXJ5IChxdWVyeSkge1xuICAgIHJldHVybiBzdW1tYXJpemVFbW9qaXMoYXdhaXQgZmlsdGVyRW1vamlzQnlWZXJzaW9uKGF3YWl0IHN0YXRlLmRhdGFiYXNlLmdldEVtb2ppQnlTZWFyY2hRdWVyeShxdWVyeSkpKVxuICB9XG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgfSk7XG5cbiAgLy9cbiAgLy8gRGVyaXZlIGN1cnJlbnRFbW9qaXNXaXRoQ2F0ZWdvcmllcyBmcm9tIGN1cnJlbnRFbW9qaXMuIFRoaXMgaXMgYWx3YXlzIGRvbmUgZXZlbiBpZiB0aGVyZVxuICAvLyBhcmUgbm8gY2F0ZWdvcmllcywgYmVjYXVzZSBpdCdzIGp1c3QgZWFzaWVyIHRvIGNvZGUgdGhlIEhUTUwgdGhpcyB3YXkuXG4gIC8vXG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVDdXJyZW50RW1vamlzV2l0aENhdGVnb3JpZXMgKCkge1xuICAgICAgY29uc3QgeyBzZWFyY2hNb2RlLCBjdXJyZW50RW1vamlzIH0gPSBzdGF0ZTtcbiAgICAgIGlmIChzZWFyY2hNb2RlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICcnLFxuICAgICAgICAgICAgZW1vamlzOiBjdXJyZW50RW1vamlzXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgICBjb25zdCBjYXRlZ29yaWVzVG9FbW9qaSA9IG5ldyBNYXAoKTtcbiAgICAgIGZvciAoY29uc3QgZW1vamkgb2YgY3VycmVudEVtb2ppcykge1xuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IGVtb2ppLmNhdGVnb3J5IHx8ICcnO1xuICAgICAgICBsZXQgZW1vamlzID0gY2F0ZWdvcmllc1RvRW1vamkuZ2V0KGNhdGVnb3J5KTtcbiAgICAgICAgaWYgKCFlbW9qaXMpIHtcbiAgICAgICAgICBlbW9qaXMgPSBbXTtcbiAgICAgICAgICBjYXRlZ29yaWVzVG9FbW9qaS5zZXQoY2F0ZWdvcnksIGVtb2ppcyk7XG4gICAgICAgIH1cbiAgICAgICAgZW1vamlzLnB1c2goZW1vamkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFsuLi5jYXRlZ29yaWVzVG9FbW9qaS5lbnRyaWVzKCldXG4gICAgICAgIC5tYXAoKFtjYXRlZ29yeSwgZW1vamlzXSkgPT4gKHsgY2F0ZWdvcnksIGVtb2ppcyB9KSlcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IHN0YXRlLmN1c3RvbUNhdGVnb3J5U29ydGluZyhhLmNhdGVnb3J5LCBiLmNhdGVnb3J5KSlcbiAgICB9XG5cbiAgICBjb25zdCBuZXdFbW9qaXNXaXRoQ2F0ZWdvcmllcyA9IGNhbGN1bGF0ZUN1cnJlbnRFbW9qaXNXaXRoQ2F0ZWdvcmllcygpO1xuICAgIHVwZGF0ZUN1cnJlbnRFbW9qaXNXaXRoQ2F0ZWdvcmllcyhuZXdFbW9qaXNXaXRoQ2F0ZWdvcmllcyk7XG4gIH0pO1xuXG4gIC8vXG4gIC8vIEhhbmRsZSBhY3RpdmUgc2VhcmNoIGl0ZW0gKGkuZS4gcHJlc3NpbmcgdXAgb3IgZG93biB3aGlsZSBzZWFyY2hpbmcpXG4gIC8vXG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0ZS5hY3RpdmVTZWFyY2hJdGVtSWQgPSBzdGF0ZS5hY3RpdmVTZWFyY2hJdGVtICE9PSAtMSAmJiBzdGF0ZS5jdXJyZW50RW1vamlzW3N0YXRlLmFjdGl2ZVNlYXJjaEl0ZW1dLmlkO1xuICB9KTtcblxuICAvL1xuICAvLyBIYW5kbGUgdXNlciBpbnB1dCBvbiB0aGUgc2VhcmNoIGlucHV0XG4gIC8vXG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB7IHJhd1NlYXJjaFRleHQgfSA9IHN0YXRlO1xuICAgIHJJQygoKSA9PiB7XG4gICAgICBzdGF0ZS5zZWFyY2hUZXh0ID0gKHJhd1NlYXJjaFRleHQgfHwgJycpLnRyaW0oKTsgLy8gZGVmZXIgdG8gYXZvaWQgaW5wdXQgZGVsYXlzLCBwbHVzIHdlIGNhbiB0cmltIGhlcmVcbiAgICAgIHN0YXRlLmFjdGl2ZVNlYXJjaEl0ZW0gPSAtMTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gb25TZWFyY2hLZXlkb3duIChldmVudCkge1xuICAgIGlmICghc3RhdGUuc2VhcmNoTW9kZSB8fCAhc3RhdGUuY3VycmVudEVtb2ppcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGdvVG9OZXh0T3JQcmV2aW91cyA9IChwcmV2aW91cykgPT4ge1xuICAgICAgaGFsdChldmVudCk7XG4gICAgICBzdGF0ZS5hY3RpdmVTZWFyY2hJdGVtID0gaW5jcmVtZW50T3JEZWNyZW1lbnQocHJldmlvdXMsIHN0YXRlLmFjdGl2ZVNlYXJjaEl0ZW0sIHN0YXRlLmN1cnJlbnRFbW9qaXMpO1xuICAgIH07XG5cbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgcmV0dXJuIGdvVG9OZXh0T3JQcmV2aW91cyhmYWxzZSlcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICByZXR1cm4gZ29Ub05leHRPclByZXZpb3VzKHRydWUpXG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgIGlmIChzdGF0ZS5hY3RpdmVTZWFyY2hJdGVtID09PSAtMSkge1xuICAgICAgICAgIC8vIGZvY3VzIHRoZSBmaXJzdCBvcHRpb24gaW4gdGhlIGxpc3Qgc2luY2UgdGhlIGxpc3QgbXVzdCBiZSBub24tZW1wdHkgYXQgdGhpcyBwb2ludCAoaXQncyB2ZXJpZmllZCBhYm92ZSlcbiAgICAgICAgICBzdGF0ZS5hY3RpdmVTZWFyY2hJdGVtID0gMDtcbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlcmUgaXMgYWxyZWFkeSBhbiBhY3RpdmUgc2VhcmNoIGl0ZW1cbiAgICAgICAgICBoYWx0KGV2ZW50KTtcbiAgICAgICAgICByZXR1cm4gY2xpY2tFbW9qaShzdGF0ZS5jdXJyZW50RW1vamlzW3N0YXRlLmFjdGl2ZVNlYXJjaEl0ZW1dLmlkKVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gSGFuZGxlIHVzZXIgaW5wdXQgb24gbmF2XG4gIC8vXG5cbiAgZnVuY3Rpb24gb25OYXZDbGljayAoZXZlbnQpIHtcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XG4gICAgY29uc3QgY2xvc2VzdFRhcmdldCA9IHRhcmdldC5jbG9zZXN0KCcubmF2LWJ1dHRvbicpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2xvc2VzdFRhcmdldCkge1xuICAgICAgcmV0dXJuIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgYnV0IG1ha2VzIG1lIG5lcnZvdXMgbm90IHRvIGhhdmUgaXRcbiAgICB9XG4gICAgY29uc3QgZ3JvdXBJZCA9IHBhcnNlSW50KGNsb3Nlc3RUYXJnZXQuZGF0YXNldC5ncm91cElkLCAxMCk7XG4gICAgcmVmcy5zZWFyY2hFbGVtZW50LnZhbHVlID0gJyc7IC8vIGNsZWFyIHNlYXJjaCBib3ggaW5wdXRcbiAgICBzdGF0ZS5yYXdTZWFyY2hUZXh0ID0gJyc7XG4gICAgc3RhdGUuc2VhcmNoVGV4dCA9ICcnO1xuICAgIHN0YXRlLmFjdGl2ZVNlYXJjaEl0ZW0gPSAtMTtcbiAgICBzdGF0ZS5jdXJyZW50R3JvdXBJbmRleCA9IHN0YXRlLmdyb3Vwcy5maW5kSW5kZXgoXyA9PiBfLmlkID09PSBncm91cElkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTmF2S2V5ZG93biAoZXZlbnQpIHtcbiAgICBjb25zdCB7IHRhcmdldCwga2V5IH0gPSBldmVudDtcblxuICAgIGNvbnN0IGRvRm9jdXMgPSBlbCA9PiB7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgaGFsdChldmVudCk7XG4gICAgICAgIGVsLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICByZXR1cm4gZG9Gb2N1cyh0YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZylcbiAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICByZXR1cm4gZG9Gb2N1cyh0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nKVxuICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgIHJldHVybiBkb0ZvY3VzKHRhcmdldC5wYXJlbnRFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKVxuICAgICAgY2FzZSAnRW5kJzpcbiAgICAgICAgcmV0dXJuIGRvRm9jdXModGFyZ2V0LnBhcmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZClcbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBIYW5kbGUgdXNlciBpbnB1dCBvbiBhbiBlbW9qaVxuICAvL1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGNsaWNrRW1vamkgKHVuaWNvZGVPck5hbWUpIHtcbiAgICBjb25zdCBlbW9qaSA9IGF3YWl0IHN0YXRlLmRhdGFiYXNlLmdldEVtb2ppQnlVbmljb2RlT3JOYW1lKHVuaWNvZGVPck5hbWUpO1xuICAgIGNvbnN0IGVtb2ppU3VtbWFyeSA9IFsuLi5zdGF0ZS5jdXJyZW50RW1vamlzLCAuLi5zdGF0ZS5jdXJyZW50RmF2b3JpdGVzXVxuICAgICAgLmZpbmQoXyA9PiAoXy5pZCA9PT0gdW5pY29kZU9yTmFtZSkpO1xuICAgIGNvbnN0IHNraW5Ub25lZFVuaWNvZGUgPSBlbW9qaVN1bW1hcnkudW5pY29kZSAmJiB1bmljb2RlV2l0aFNraW4oZW1vamlTdW1tYXJ5LCBzdGF0ZS5jdXJyZW50U2tpblRvbmUpO1xuICAgIGF3YWl0IHN0YXRlLmRhdGFiYXNlLmluY3JlbWVudEZhdm9yaXRlRW1vamlDb3VudCh1bmljb2RlT3JOYW1lKTtcbiAgICBmaXJlRXZlbnQoJ2Vtb2ppLWNsaWNrJywge1xuICAgICAgZW1vamksXG4gICAgICBza2luVG9uZTogc3RhdGUuY3VycmVudFNraW5Ub25lLFxuICAgICAgLi4uKHNraW5Ub25lZFVuaWNvZGUgJiYgeyB1bmljb2RlOiBza2luVG9uZWRVbmljb2RlIH0pLFxuICAgICAgLi4uKGVtb2ppU3VtbWFyeS5uYW1lICYmIHsgbmFtZTogZW1vamlTdW1tYXJ5Lm5hbWUgfSlcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIG9uRW1vamlDbGljayAoZXZlbnQpIHtcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdlbW9qaScpKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIGJ1dCBtYWtlcyBtZSBuZXJ2b3VzIG5vdCB0byBoYXZlIGl0XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaGFsdChldmVudCk7XG4gICAgY29uc3QgaWQgPSB0YXJnZXQuaWQuc3Vic3RyaW5nKDQpOyAvLyByZXBsYWNlICdlbW8tJyBvciAnZmF2LScgcHJlZml4XG5cbiAgICAvKiBubyBhd2FpdCAqLyBjbGlja0Vtb2ppKGlkKTtcbiAgfVxuXG4gIC8vXG4gIC8vIEhhbmRsZSB1c2VyIGlucHV0IG9uIHRoZSBza2ludG9uZSBwaWNrZXJcbiAgLy9cblxuICBmdW5jdGlvbiBjaGFuZ2VTa2luVG9uZSAoc2tpblRvbmUpIHtcbiAgICBzdGF0ZS5jdXJyZW50U2tpblRvbmUgPSBza2luVG9uZTtcbiAgICBzdGF0ZS5za2luVG9uZVBpY2tlckV4cGFuZGVkID0gZmFsc2U7XG4gICAgZm9jdXMoJ3NraW50b25lLWJ1dHRvbicpO1xuICAgIGZpcmVFdmVudCgnc2tpbi10b25lLWNoYW5nZScsIHsgc2tpblRvbmUgfSk7XG4gICAgLyogbm8gYXdhaXQgKi8gc3RhdGUuZGF0YWJhc2Uuc2V0UHJlZmVycmVkU2tpblRvbmUoc2tpblRvbmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ta2luVG9uZU9wdGlvbnNDbGljayAoZXZlbnQpIHtcbiAgICBjb25zdCB7IHRhcmdldDogeyBpZCB9IH0gPSBldmVudDtcbiAgICBjb25zdCBtYXRjaCA9IGlkICYmIGlkLm1hdGNoKC9ec2tpbnRvbmUtKFxcZCkvKTsgLy8gc2tpbnRvbmUgb3B0aW9uIGZvcm1hdFxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghbWF0Y2gpIHsgLy8gbm90IGEgc2tpbnRvbmUgb3B0aW9uXG4gICAgICByZXR1cm4gLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCBidXQgbWFrZXMgbWUgbmVydm91cyBub3QgdG8gaGF2ZSBpdFxuICAgIH1cbiAgICBoYWx0KGV2ZW50KTtcbiAgICBjb25zdCBza2luVG9uZSA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7IC8vIHJlbW92ZSAnc2tpbnRvbmUtJyBwcmVmaXhcbiAgICBjaGFuZ2VTa2luVG9uZShza2luVG9uZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrU2tpblRvbmVCdXR0b24gKGV2ZW50KSB7XG4gICAgc3RhdGUuc2tpblRvbmVQaWNrZXJFeHBhbmRlZCA9ICFzdGF0ZS5za2luVG9uZVBpY2tlckV4cGFuZGVkO1xuICAgIHN0YXRlLmFjdGl2ZVNraW5Ub25lID0gc3RhdGUuY3VycmVudFNraW5Ub25lO1xuICAgIC8vIHRoaXMgc2hvdWxkIGFsd2F5cyBiZSB0cnVlLCBzaW5jZSB0aGUgYnV0dG9uIGlzIG9ic2N1cmVkIGJ5IHRoZSBsaXN0Ym94LCBzbyB0aGlzIGBpZmAgaXMganVzdCB0byBiZSBzdXJlXG4gICAgaWYgKHN0YXRlLnNraW5Ub25lUGlja2VyRXhwYW5kZWQpIHtcbiAgICAgIGhhbHQoZXZlbnQpO1xuICAgICAgckFGKCgpID0+IGZvY3VzKCdza2ludG9uZS1saXN0JykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRvIG1ha2UgdGhlIGFuaW1hdGlvbiBuaWNlciwgY2hhbmdlIHRoZSB6LWluZGV4IG9mIHRoZSBza2ludG9uZSBwaWNrZXIgYnV0dG9uXG4gIC8vICphZnRlciogdGhlIGFuaW1hdGlvbiBoYXMgcGxheWVkLiBUaGlzIG1ha2VzIGl0IGFwcGVhciB0aGF0IHRoZSBwaWNrZXIgYm94XG4gIC8vIGlzIGV4cGFuZGluZyBcImJlbG93XCIgdGhlIGJ1dHRvblxuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0ZS5za2luVG9uZVBpY2tlckV4cGFuZGVkKSB7XG4gICAgICByZWZzLnNraW5Ub25lRHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsICgpID0+IHtcbiAgICAgICAgc3RhdGUuc2tpblRvbmVQaWNrZXJFeHBhbmRlZEFmdGVyQW5pbWF0aW9uID0gdHJ1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5za2luVG9uZVBpY2tlckV4cGFuZGVkQWZ0ZXJBbmltYXRpb24gPSBmYWxzZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gb25Ta2luVG9uZU9wdGlvbnNLZXlkb3duIChldmVudCkge1xuICAgIC8vIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgYnV0IG1ha2VzIG1lIG5lcnZvdXMgbm90IHRvIGhhdmUgaXRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXN0YXRlLnNraW5Ub25lUGlja2VyRXhwYW5kZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VBY3RpdmVTa2luVG9uZSA9IGFzeW5jIG5leHRTa2luVG9uZSA9PiB7XG4gICAgICBoYWx0KGV2ZW50KTtcbiAgICAgIHN0YXRlLmFjdGl2ZVNraW5Ub25lID0gbmV4dFNraW5Ub25lO1xuICAgIH07XG5cbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgIHJldHVybiBjaGFuZ2VBY3RpdmVTa2luVG9uZShpbmNyZW1lbnRPckRlY3JlbWVudCh0cnVlLCBzdGF0ZS5hY3RpdmVTa2luVG9uZSwgc3RhdGUuc2tpblRvbmVzKSlcbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgIHJldHVybiBjaGFuZ2VBY3RpdmVTa2luVG9uZShpbmNyZW1lbnRPckRlY3JlbWVudChmYWxzZSwgc3RhdGUuYWN0aXZlU2tpblRvbmUsIHN0YXRlLnNraW5Ub25lcykpXG4gICAgICBjYXNlICdIb21lJzpcbiAgICAgICAgcmV0dXJuIGNoYW5nZUFjdGl2ZVNraW5Ub25lKDApXG4gICAgICBjYXNlICdFbmQnOlxuICAgICAgICByZXR1cm4gY2hhbmdlQWN0aXZlU2tpblRvbmUoc3RhdGUuc2tpblRvbmVzLmxlbmd0aCAtIDEpXG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgIC8vIGVudGVyIG9uIGtleWRvd24sIHNwYWNlIG9uIGtleXVwLiB0aGlzIGlzIGp1c3QgaG93IGJyb3dzZXJzIHdvcmsgZm9yIGJ1dHRvbnNcbiAgICAgICAgLy8gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3czYy13YWktaWcvMjAxOUphbk1hci8wMDg2Lmh0bWxcbiAgICAgICAgaGFsdChldmVudCk7XG4gICAgICAgIHJldHVybiBjaGFuZ2VTa2luVG9uZShzdGF0ZS5hY3RpdmVTa2luVG9uZSlcbiAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgIGhhbHQoZXZlbnQpO1xuICAgICAgICBzdGF0ZS5za2luVG9uZVBpY2tlckV4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmb2N1cygnc2tpbnRvbmUtYnV0dG9uJylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblNraW5Ub25lT3B0aW9uc0tleXVwIChldmVudCkge1xuICAgIC8vIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgYnV0IG1ha2VzIG1lIG5lcnZvdXMgbm90IHRvIGhhdmUgaXRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXN0YXRlLnNraW5Ub25lUGlja2VyRXhwYW5kZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSAnICc6XG4gICAgICAgIC8vIGVudGVyIG9uIGtleWRvd24sIHNwYWNlIG9uIGtleXVwLiB0aGlzIGlzIGp1c3QgaG93IGJyb3dzZXJzIHdvcmsgZm9yIGJ1dHRvbnNcbiAgICAgICAgLy8gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3czYy13YWktaWcvMjAxOUphbk1hci8wMDg2Lmh0bWxcbiAgICAgICAgaGFsdChldmVudCk7XG4gICAgICAgIHJldHVybiBjaGFuZ2VTa2luVG9uZShzdGF0ZS5hY3RpdmVTa2luVG9uZSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBvblNraW5Ub25lT3B0aW9uc0ZvY3VzT3V0IChldmVudCkge1xuICAgIC8vIE9uIGJsdXIgb3V0c2lkZSBvZiB0aGUgc2tpbnRvbmUgbGlzdGJveCwgY29sbGFwc2UgdGhlIHNraW50b25lIHBpY2tlci5cbiAgICBjb25zdCB7IHJlbGF0ZWRUYXJnZXQgfSA9IGV2ZW50O1xuICAgIC8vIFRoZSBgZWxzZWAgc2hvdWxkIG5ldmVyIGhhcHBlbiwgYnV0IG1ha2VzIG1lIG5lcnZvdXMgbm90IHRvIGhhdmUgaXRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICghcmVsYXRlZFRhcmdldCB8fCByZWxhdGVkVGFyZ2V0LmlkICE9PSAnc2tpbnRvbmUtbGlzdCcpIHtcbiAgICAgIHN0YXRlLnNraW5Ub25lUGlja2VyRXhwYW5kZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblNlYXJjaElucHV0IChldmVudCkge1xuICAgIHN0YXRlLnJhd1NlYXJjaFRleHQgPSBldmVudC50YXJnZXQudmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgICRzZXQgKG5ld1N0YXRlKSB7XG4gICAgICBhc3NpZ24oc3RhdGUsIG5ld1N0YXRlKTtcbiAgICB9LFxuICAgICRkZXN0cm95ICgpIHtcbiAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBERUZBVUxUX0RBVEFfU09VUkNFID0gJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vZW1vamktcGlja2VyLWVsZW1lbnQtZGF0YUBeMS9lbi9lbW9qaWJhc2UvZGF0YS5qc29uJztcbmNvbnN0IERFRkFVTFRfTE9DQUxFID0gJ2VuJztcblxudmFyIGVuSTE4biA9IHtcbiAgY2F0ZWdvcmllc0xhYmVsOiAnQ2F0ZWdvcmllcycsXG4gIGVtb2ppVW5zdXBwb3J0ZWRNZXNzYWdlOiAnWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY29sb3IgZW1vamkuJyxcbiAgZmF2b3JpdGVzTGFiZWw6ICdGYXZvcml0ZXMnLFxuICBsb2FkaW5nTWVzc2FnZTogJ0xvYWRpbmfigKYnLFxuICBuZXR3b3JrRXJyb3JNZXNzYWdlOiAnQ291bGQgbm90IGxvYWQgZW1vamkuJyxcbiAgcmVnaW9uTGFiZWw6ICdFbW9qaSBwaWNrZXInLFxuICBzZWFyY2hEZXNjcmlwdGlvbjogJ1doZW4gc2VhcmNoIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgcHJlc3MgdXAgb3IgZG93biB0byBzZWxlY3QgYW5kIGVudGVyIHRvIGNob29zZS4nLFxuICBzZWFyY2hMYWJlbDogJ1NlYXJjaCcsXG4gIHNlYXJjaFJlc3VsdHNMYWJlbDogJ1NlYXJjaCByZXN1bHRzJyxcbiAgc2tpblRvbmVEZXNjcmlwdGlvbjogJ1doZW4gZXhwYW5kZWQsIHByZXNzIHVwIG9yIGRvd24gdG8gc2VsZWN0IGFuZCBlbnRlciB0byBjaG9vc2UuJyxcbiAgc2tpblRvbmVMYWJlbDogJ0Nob29zZSBhIHNraW4gdG9uZSAoY3VycmVudGx5IHtza2luVG9uZX0pJyxcbiAgc2tpblRvbmVzTGFiZWw6ICdTa2luIHRvbmVzJyxcbiAgc2tpblRvbmVzOiBbXG4gICAgJ0RlZmF1bHQnLFxuICAgICdMaWdodCcsXG4gICAgJ01lZGl1bS1MaWdodCcsXG4gICAgJ01lZGl1bScsXG4gICAgJ01lZGl1bS1EYXJrJyxcbiAgICAnRGFyaydcbiAgXSxcbiAgY2F0ZWdvcmllczoge1xuICAgIGN1c3RvbTogJ0N1c3RvbScsXG4gICAgJ3NtaWxleXMtZW1vdGlvbic6ICdTbWlsZXlzIGFuZCBlbW90aWNvbnMnLFxuICAgICdwZW9wbGUtYm9keSc6ICdQZW9wbGUgYW5kIGJvZHknLFxuICAgICdhbmltYWxzLW5hdHVyZSc6ICdBbmltYWxzIGFuZCBuYXR1cmUnLFxuICAgICdmb29kLWRyaW5rJzogJ0Zvb2QgYW5kIGRyaW5rJyxcbiAgICAndHJhdmVsLXBsYWNlcyc6ICdUcmF2ZWwgYW5kIHBsYWNlcycsXG4gICAgYWN0aXZpdGllczogJ0FjdGl2aXRpZXMnLFxuICAgIG9iamVjdHM6ICdPYmplY3RzJyxcbiAgICBzeW1ib2xzOiAnU3ltYm9scycsXG4gICAgZmxhZ3M6ICdGbGFncydcbiAgfVxufTtcblxudmFyIGJhc2VTdHlsZXMgPSBcIjpob3N0ey0tZW1vamktc2l6ZToxLjM3NXJlbTstLWVtb2ppLXBhZGRpbmc6MC41cmVtOy0tY2F0ZWdvcnktZW1vamktc2l6ZTp2YXIoLS1lbW9qaS1zaXplKTstLWNhdGVnb3J5LWVtb2ppLXBhZGRpbmc6dmFyKC0tZW1vamktcGFkZGluZyk7LS1pbmRpY2F0b3ItaGVpZ2h0OjNweDstLWlucHV0LWJvcmRlci1yYWRpdXM6MC41cmVtOy0taW5wdXQtYm9yZGVyLXNpemU6MXB4Oy0taW5wdXQtZm9udC1zaXplOjFyZW07LS1pbnB1dC1saW5lLWhlaWdodDoxLjU7LS1pbnB1dC1wYWRkaW5nOjAuMjVyZW07LS1udW0tY29sdW1uczo4Oy0tb3V0bGluZS1zaXplOjJweDstLWJvcmRlci1zaXplOjFweDstLWJvcmRlci1yYWRpdXM6MDstLXNraW50b25lLWJvcmRlci1yYWRpdXM6MXJlbTstLWNhdGVnb3J5LWZvbnQtc2l6ZToxcmVtO2Rpc3BsYXk6ZmxleDt3aWR0aDptaW4tY29udGVudDtoZWlnaHQ6NDAwcHh9Omhvc3QsOmhvc3QoLmxpZ2h0KXtjb2xvci1zY2hlbWU6bGlnaHQ7LS1iYWNrZ3JvdW5kOiNmZmY7LS1ib3JkZXItY29sb3I6I2UwZTBlMDstLWluZGljYXRvci1jb2xvcjojMzg1YWMxOy0taW5wdXQtYm9yZGVyLWNvbG9yOiM5OTk7LS1pbnB1dC1mb250LWNvbG9yOiMxMTE7LS1pbnB1dC1wbGFjZWhvbGRlci1jb2xvcjojOTk5Oy0tb3V0bGluZS1jb2xvcjojOTk5Oy0tY2F0ZWdvcnktZm9udC1jb2xvcjojMTExOy0tYnV0dG9uLWFjdGl2ZS1iYWNrZ3JvdW5kOiNlNmU2ZTY7LS1idXR0b24taG92ZXItYmFja2dyb3VuZDojZDlkOWQ5fTpob3N0KC5kYXJrKXtjb2xvci1zY2hlbWU6ZGFyazstLWJhY2tncm91bmQ6IzIyMjstLWJvcmRlci1jb2xvcjojNDQ0Oy0taW5kaWNhdG9yLWNvbG9yOiM1MzczZWM7LS1pbnB1dC1ib3JkZXItY29sb3I6I2NjYzstLWlucHV0LWZvbnQtY29sb3I6I2VmZWZlZjstLWlucHV0LXBsYWNlaG9sZGVyLWNvbG9yOiNjY2M7LS1vdXRsaW5lLWNvbG9yOiNmZmY7LS1jYXRlZ29yeS1mb250LWNvbG9yOiNlZmVmZWY7LS1idXR0b24tYWN0aXZlLWJhY2tncm91bmQ6IzU1NTU1NTstLWJ1dHRvbi1ob3Zlci1iYWNrZ3JvdW5kOiM0ODQ4NDh9QG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTpkYXJrKXs6aG9zdHtjb2xvci1zY2hlbWU6ZGFyazstLWJhY2tncm91bmQ6IzIyMjstLWJvcmRlci1jb2xvcjojNDQ0Oy0taW5kaWNhdG9yLWNvbG9yOiM1MzczZWM7LS1pbnB1dC1ib3JkZXItY29sb3I6I2NjYzstLWlucHV0LWZvbnQtY29sb3I6I2VmZWZlZjstLWlucHV0LXBsYWNlaG9sZGVyLWNvbG9yOiNjY2M7LS1vdXRsaW5lLWNvbG9yOiNmZmY7LS1jYXRlZ29yeS1mb250LWNvbG9yOiNlZmVmZWY7LS1idXR0b24tYWN0aXZlLWJhY2tncm91bmQ6IzU1NTU1NTstLWJ1dHRvbi1ob3Zlci1iYWNrZ3JvdW5kOiM0ODQ4NDh9fTpob3N0KFtoaWRkZW5dKXtkaXNwbGF5Om5vbmV9YnV0dG9ue21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtiYWNrZ3JvdW5kOjAgMDtib3gtc2hhZG93Om5vbmU7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50fWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MH1pbnB1dHtwYWRkaW5nOjA7bWFyZ2luOjA7bGluZS1oZWlnaHQ6MS4xNTtmb250LWZhbWlseTppbmhlcml0fWlucHV0W3R5cGU9c2VhcmNoXXstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX06Zm9jdXN7b3V0bGluZTp2YXIoLS1vdXRsaW5lLWNvbG9yKSBzb2xpZCB2YXIoLS1vdXRsaW5lLXNpemUpO291dGxpbmUtb2Zmc2V0OmNhbGMoLTEqdmFyKC0tb3V0bGluZS1zaXplKSl9Omhvc3QoW2RhdGEtanMtZm9jdXMtdmlzaWJsZV0pIDpmb2N1czpub3QoW2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZF0pe291dGxpbmU6MH06Zm9jdXM6bm90KDpmb2N1cy12aXNpYmxlKXtvdXRsaW5lOjB9LmhpZGUtZm9jdXN7b3V0bGluZTowfSp7Ym94LXNpemluZzpib3JkZXItYm94fS5waWNrZXJ7Y29udGFpbjpjb250ZW50O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtib3JkZXI6dmFyKC0tYm9yZGVyLXNpemUpIHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcik7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO292ZXJmbG93OmhpZGRlbjstLXRvdGFsLWVtb2ppLXNpemU6Y2FsYyh2YXIoLS1lbW9qaS1zaXplKSArICgyICogdmFyKC0tZW1vamktcGFkZGluZykpKTstLXRvdGFsLWNhdGVnb3J5LWVtb2ppLXNpemU6Y2FsYyh2YXIoLS1jYXRlZ29yeS1lbW9qaS1zaXplKSArICgyICogdmFyKC0tY2F0ZWdvcnktZW1vamktcGFkZGluZykpKX0uc3Itb25seXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxcHg7aGVpZ2h0OjFweDtwYWRkaW5nOjA7bWFyZ2luOi0xcHg7b3ZlcmZsb3c6aGlkZGVuO2NsaXA6cmVjdCgwLDAsMCwwKTtib3JkZXI6MH0uaGlkZGVue29wYWNpdHk6MDtwb2ludGVyLWV2ZW50czpub25lfS5hYnMtcG9ze3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MH0uZ29uZXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS5za2ludG9uZS1idXR0b24td3JhcHBlciwuc2tpbnRvbmUtbGlzdHtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO3otaW5kZXg6M30uc2tpbnRvbmUtYnV0dG9uLXdyYXBwZXIuZXhwYW5kZWR7ei1pbmRleDoxfS5za2ludG9uZS1saXN0e3Bvc2l0aW9uOmFic29sdXRlO2luc2V0LWlubGluZS1lbmQ6MDt0b3A6MDt6LWluZGV4OjI7b3ZlcmZsb3c6dmlzaWJsZTtib3JkZXItYm90dG9tOnZhcigtLWJvcmRlci1zaXplKSBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpO2JvcmRlci1yYWRpdXM6MCAwIHZhcigtLXNraW50b25lLWJvcmRlci1yYWRpdXMpIHZhcigtLXNraW50b25lLWJvcmRlci1yYWRpdXMpO3dpbGwtY2hhbmdlOnRyYW5zZm9ybTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgMH1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuc2tpbnRvbmUtbGlzdHt0cmFuc2l0aW9uLWR1cmF0aW9uOi4wMDFzfX1Ac3VwcG9ydHMgbm90IChpbnNldC1pbmxpbmUtZW5kOjApey5za2ludG9uZS1saXN0e3JpZ2h0OjB9fS5za2ludG9uZS1saXN0Lm5vLWFuaW1hdGV7dHJhbnNpdGlvbjpub25lfS50YWJwYW5lbHtvdmVyZmxvdy15OmF1dG87c2Nyb2xsYmFyLWd1dHRlcjpzdGFibGU7LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6dG91Y2g7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtO21pbi1oZWlnaHQ6MDtmbGV4OjE7Y29udGFpbjpjb250ZW50fS5lbW9qaS1tZW51e2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KHZhcigtLW51bS1jb2x1bW5zKSx2YXIoLS10b3RhbC1lbW9qaS1zaXplKSk7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O3dpZHRoOjEwMCV9LmVtb2ppLW1lbnUudmlzaWJpbGl0eS1hdXRve2NvbnRlbnQtdmlzaWJpbGl0eTphdXRvO2NvbnRhaW4taW50cmluc2ljLXNpemU6Y2FsYyh2YXIoLS1udW0tY29sdW1ucykqdmFyKC0tdG90YWwtZW1vamktc2l6ZSkpIGNhbGModmFyKC0tbnVtLXJvd3MpKnZhcigtLXRvdGFsLWVtb2ppLXNpemUpKX0uY2F0ZWdvcnl7cGFkZGluZzp2YXIoLS1lbW9qaS1wYWRkaW5nKTtmb250LXNpemU6dmFyKC0tY2F0ZWdvcnktZm9udC1zaXplKTtjb2xvcjp2YXIoLS1jYXRlZ29yeS1mb250LWNvbG9yKX0uZW1vamksYnV0dG9uLmVtb2ppe2ZvbnQtc2l6ZTp2YXIoLS1lbW9qaS1zaXplKTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7Ym9yZGVyLXJhZGl1czoxMDAlO2hlaWdodDp2YXIoLS10b3RhbC1lbW9qaS1zaXplKTt3aWR0aDp2YXIoLS10b3RhbC1lbW9qaS1zaXplKTtsaW5lLWhlaWdodDoxO292ZXJmbG93OmhpZGRlbjtmb250LWZhbWlseTp2YXIoLS1lbW9qaS1mb250LWZhbWlseSk7Y3Vyc29yOnBvaW50ZXJ9QG1lZGlhIChob3Zlcjpob3ZlcikgYW5kIChwb2ludGVyOmZpbmUpey5lbW9qaTpob3ZlcixidXR0b24uZW1vamk6aG92ZXJ7YmFja2dyb3VuZDp2YXIoLS1idXR0b24taG92ZXItYmFja2dyb3VuZCl9fS5lbW9qaS5hY3RpdmUsLmVtb2ppOmFjdGl2ZSxidXR0b24uZW1vamkuYWN0aXZlLGJ1dHRvbi5lbW9qaTphY3RpdmV7YmFja2dyb3VuZDp2YXIoLS1idXR0b24tYWN0aXZlLWJhY2tncm91bmQpfS5vbnNjcmVlbiAuY3VzdG9tLWVtb2ppOjphZnRlcntjb250ZW50OlxcXCJcXFwiO3dpZHRoOnZhcigtLWVtb2ppLXNpemUpO2hlaWdodDp2YXIoLS1lbW9qaS1zaXplKTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtaW1hZ2U6dmFyKC0tY3VzdG9tLWVtb2ppLWJhY2tncm91bmQpfS5uYXYsLm5hdi1idXR0b257YWxpZ24taXRlbXM6Y2VudGVyfS5uYXZ7ZGlzcGxheTpncmlkO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2NvbnRhaW46Y29udGVudH0ubmF2LWJ1dHRvbntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcn0ubmF2LWVtb2ppe2ZvbnQtc2l6ZTp2YXIoLS1jYXRlZ29yeS1lbW9qaS1zaXplKTt3aWR0aDp2YXIoLS10b3RhbC1jYXRlZ29yeS1lbW9qaS1zaXplKTtoZWlnaHQ6dmFyKC0tdG90YWwtY2F0ZWdvcnktZW1vamktc2l6ZSl9LmluZGljYXRvci13cmFwcGVye2Rpc3BsYXk6ZmxleDtib3JkZXItYm90dG9tOjFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpfS5pbmRpY2F0b3J7d2lkdGg6Y2FsYygxMDAlL3ZhcigtLW51bS1ncm91cHMpKTtoZWlnaHQ6dmFyKC0taW5kaWNhdG9yLWhlaWdodCk7b3BhY2l0eTp2YXIoLS1pbmRpY2F0b3Itb3BhY2l0eSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1pbmRpY2F0b3ItY29sb3IpO3dpbGwtY2hhbmdlOnRyYW5zZm9ybSxvcGFjaXR5O3RyYW5zaXRpb246b3BhY2l0eSAuMXMgbGluZWFyLHRyYW5zZm9ybSAuMjVzIGVhc2UtaW4tb3V0fUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjpyZWR1Y2Upey5pbmRpY2F0b3J7d2lsbC1jaGFuZ2U6b3BhY2l0eTt0cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGxpbmVhcn19LnBhZC10b3AsaW5wdXQuc2VhcmNoe2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7d2lkdGg6MTAwJX0ucGFkLXRvcHtoZWlnaHQ6dmFyKC0tZW1vamktcGFkZGluZyk7ei1pbmRleDozfS5zZWFyY2gtcm93e2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0tZW1vamktcGFkZGluZyk7cGFkZGluZy1ib3R0b206dmFyKC0tZW1vamktcGFkZGluZyl9LnNlYXJjaC13cmFwcGVye2ZsZXg6MTttaW4td2lkdGg6MH1pbnB1dC5zZWFyY2h7cGFkZGluZzp2YXIoLS1pbnB1dC1wYWRkaW5nKTtib3JkZXItcmFkaXVzOnZhcigtLWlucHV0LWJvcmRlci1yYWRpdXMpO2JvcmRlcjp2YXIoLS1pbnB1dC1ib3JkZXItc2l6ZSkgc29saWQgdmFyKC0taW5wdXQtYm9yZGVyLWNvbG9yKTtjb2xvcjp2YXIoLS1pbnB1dC1mb250LWNvbG9yKTtmb250LXNpemU6dmFyKC0taW5wdXQtZm9udC1zaXplKTtsaW5lLWhlaWdodDp2YXIoLS1pbnB1dC1saW5lLWhlaWdodCl9aW5wdXQuc2VhcmNoOjpwbGFjZWhvbGRlcntjb2xvcjp2YXIoLS1pbnB1dC1wbGFjZWhvbGRlci1jb2xvcil9LmZhdm9yaXRlc3tvdmVyZmxvdy15OmF1dG87c2Nyb2xsYmFyLWd1dHRlcjpzdGFibGU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztib3JkZXItdG9wOnZhcigtLWJvcmRlci1zaXplKSBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpO2NvbnRhaW46Y29udGVudH0ubWVzc2FnZXtwYWRkaW5nOnZhcigtLWVtb2ppLXBhZGRpbmcpfVwiO1xuXG5jb25zdCBQUk9QUyA9IFtcbiAgJ2N1c3RvbUVtb2ppJyxcbiAgJ2N1c3RvbUNhdGVnb3J5U29ydGluZycsXG4gICdkYXRhYmFzZScsXG4gICdkYXRhU291cmNlJyxcbiAgJ2kxOG4nLFxuICAnbG9jYWxlJyxcbiAgJ3NraW5Ub25lRW1vamknLFxuICAnZW1vamlWZXJzaW9uJ1xuXTtcblxuLy8gU3R5bGVzIGluamVjdGVkIG91cnNlbHZlcywgc28gd2UgY2FuIGRlY2xhcmUgdGhlIEZPTlRfRkFNSUxZIHZhcmlhYmxlIGluIG9uZSBwbGFjZVxuY29uc3QgRVhUUkFfU1RZTEVTID0gYDpob3N0ey0tZW1vamktZm9udC1mYW1pbHk6JHtGT05UX0ZBTUlMWX19YDtcblxuY2xhc3MgUGlja2VyRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSBiYXNlU3R5bGVzICsgRVhUUkFfU1RZTEVTO1xuICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgdGhpcy5fY3R4ID0ge1xuICAgICAgLy8gU2V0IGRlZmF1bHRzXG4gICAgICBsb2NhbGU6IERFRkFVTFRfTE9DQUxFLFxuICAgICAgZGF0YVNvdXJjZTogREVGQVVMVF9EQVRBX1NPVVJDRSxcbiAgICAgIHNraW5Ub25lRW1vamk6IERFRkFVTFRfU0tJTl9UT05FX0VNT0pJLFxuICAgICAgY3VzdG9tQ2F0ZWdvcnlTb3J0aW5nOiBERUZBVUxUX0NBVEVHT1JZX1NPUlRJTkcsXG4gICAgICBjdXN0b21FbW9qaTogbnVsbCxcbiAgICAgIGkxOG46IGVuSTE4bixcbiAgICAgIGVtb2ppVmVyc2lvbjogbnVsbCxcbiAgICAgIC4uLnByb3BzXG4gICAgfTtcbiAgICAvLyBIYW5kbGUgcHJvcGVydGllcyBzZXQgYmVmb3JlIHRoZSBlbGVtZW50IHdhcyB1cGdyYWRlZFxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBQUk9QUykge1xuICAgICAgaWYgKHByb3AgIT09ICdkYXRhYmFzZScgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIHByb3ApKSB7XG4gICAgICAgIHRoaXMuX2N0eFtwcm9wXSA9IHRoaXNbcHJvcF07XG4gICAgICAgIGRlbGV0ZSB0aGlzW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9kYkZsdXNoKCk7IC8vIHdhaXQgZm9yIGEgZmx1c2ggYmVmb3JlIGNyZWF0aW5nIHRoZSBkYiwgaW4gY2FzZSB0aGUgdXNlciBjYWxscyBlLmcuIGEgc2V0dGVyIG9yIHNldEF0dHJpYnV0ZVxuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIC8vIFRoZSBfY21wIG1heSBiZSBkZWZpbmVkIGlmIHRoZSBjb21wb25lbnQgd2FzIGltbWVkaWF0ZWx5IGRpc2Nvbm5lY3RlZCBhbmQgdGhlbiByZWNvbm5lY3RlZC4gSW4gdGhhdCBjYXNlLFxuICAgIC8vIGRvIG5vdGhpbmcgKHByZXNlcnZlIHRoZSBzdGF0ZSlcbiAgICBpZiAoIXRoaXMuX2NtcCkge1xuICAgICAgdGhpcy5fY21wID0gY3JlYXRlUm9vdCh0aGlzLnNoYWRvd1Jvb3QsIHRoaXMuX2N0eCk7XG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIC8vIENoZWNrIGluIGEgbWljcm90YXNrIGlmIHRoZSBlbGVtZW50IGlzIHN0aWxsIGNvbm5lY3RlZC4gSWYgc28sIHRyZWF0IHRoaXMgYXMgYSBcIm1vdmVcIiByYXRoZXIgdGhhbiBhIGRpc2Nvbm5lY3RcbiAgICAvLyBJbnNwaXJlZCBieSBWdWU6IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2V4dHJhcy93ZWItY29tcG9uZW50cy5odG1sI2J1aWxkaW5nLWN1c3RvbS1lbGVtZW50cy13aXRoLXZ1ZVxuICAgIHFNKCgpID0+IHtcbiAgICAgIC8vIHRoaXMuX2NtcCBtYXkgYmUgZGVmaW5lZCBpZiBjb25uZWN0LWRpc2Nvbm5lY3QtY29ubmVjdC1kaXNjb25uZWN0IG9jY3VycyBzeW5jaHJvbm91c2x5XG4gICAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQgJiYgdGhpcy5fY21wKSB7XG4gICAgICAgIHRoaXMuX2NtcC4kZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9jbXAgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhYmFzZSB9ID0gdGhpcy5fY3R4O1xuICAgICAgICBkYXRhYmFzZS5jbG9zZSgpXG4gICAgICAgICAgLy8gb25seSBoYXBwZW5zIGlmIHRoZSBkYXRhYmFzZSBmYWlsZWQgdG8gbG9hZCBpbiB0aGUgZmlyc3QgcGxhY2UsIHNvIHdlIGRvbid0IGNhcmVcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcyAoKSB7XG4gICAgcmV0dXJuIFsnbG9jYWxlJywgJ2RhdGEtc291cmNlJywgJ3NraW4tdG9uZS1lbW9qaScsICdlbW9qaS12ZXJzaW9uJ10gLy8gY29tcGxleCBvYmplY3RzIGFyZW4ndCBzdXBwb3J0ZWQsIGFsc28gdXNlIGtlYmFiLWNhc2VcbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayAoYXR0ck5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIHRoaXMuX3NldChcbiAgICAgIC8vIGNvbnZlcnQgZnJvbSBrZWJhYi1jYXNlIHRvIGNhbWVsY2FzZVxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzM4NTIjaXNzdWVjb21tZW50LTY2NTAzNzAxNVxuICAgICAgYXR0ck5hbWUucmVwbGFjZSgvLShbYS16XSkvZywgKF8sIHVwKSA9PiB1cC50b1VwcGVyQ2FzZSgpKSxcbiAgICAgIC8vIGNvbnZlcnQgc3RyaW5nIGF0dHJpYnV0ZSB0byBmbG9hdCBpZiBuZWNlc3NhcnlcbiAgICAgIGF0dHJOYW1lID09PSAnZW1vamktdmVyc2lvbicgPyBwYXJzZUZsb2F0KG5ld1ZhbHVlKSA6IG5ld1ZhbHVlXG4gICAgKTtcbiAgfVxuXG4gIF9zZXQgKHByb3AsIG5ld1ZhbHVlKSB7XG4gICAgdGhpcy5fY3R4W3Byb3BdID0gbmV3VmFsdWU7XG4gICAgaWYgKHRoaXMuX2NtcCkge1xuICAgICAgdGhpcy5fY21wLiRzZXQoeyBbcHJvcF06IG5ld1ZhbHVlIH0pO1xuICAgIH1cbiAgICBpZiAoWydsb2NhbGUnLCAnZGF0YVNvdXJjZSddLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICB0aGlzLl9kYkZsdXNoKCk7XG4gICAgfVxuICB9XG5cbiAgX2RiQ3JlYXRlICgpIHtcbiAgICBjb25zdCB7IGxvY2FsZSwgZGF0YVNvdXJjZSwgZGF0YWJhc2UgfSA9IHRoaXMuX2N0eDtcbiAgICAvLyBvbmx5IGNyZWF0ZSBhIG5ldyBkYXRhYmFzZSBpZiB3ZSByZWFsbHkgbmVlZCB0b1xuICAgIGlmICghZGF0YWJhc2UgfHwgZGF0YWJhc2UubG9jYWxlICE9PSBsb2NhbGUgfHwgZGF0YWJhc2UuZGF0YVNvdXJjZSAhPT0gZGF0YVNvdXJjZSkge1xuICAgICAgdGhpcy5fc2V0KCdkYXRhYmFzZScsIG5ldyBEYXRhYmFzZSh7IGxvY2FsZSwgZGF0YVNvdXJjZSB9KSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBEYXRhYmFzZSBpbiBvbmUgbWljcm90YXNrIGlmIHRoZSBsb2NhbGUvZGF0YVNvdXJjZSBjaGFuZ2UuIFdlIGRvIG9uZSBtaWNyb3Rhc2tcbiAgLy8gc28gd2UgZG9uJ3QgY3JlYXRlIHR3byBEYXRhYmFzZXMgaWYgZS5nLiBib3RoIHRoZSBsb2NhbGUgYW5kIHRoZSBkYXRhU291cmNlIGNoYW5nZVxuICBfZGJGbHVzaCAoKSB7XG4gICAgcU0oKCkgPT4gKFxuICAgICAgdGhpcy5fZGJDcmVhdGUoKVxuICAgICkpO1xuICB9XG59XG5cbmNvbnN0IGRlZmluaXRpb25zID0ge307XG5cbmZvciAoY29uc3QgcHJvcCBvZiBQUk9QUykge1xuICBkZWZpbml0aW9uc1twcm9wXSA9IHtcbiAgICBnZXQgKCkge1xuICAgICAgaWYgKHByb3AgPT09ICdkYXRhYmFzZScpIHtcbiAgICAgICAgLy8gaW4gcmFyZSBjYXNlcywgdGhlIG1pY3JvdGFzayBtYXkgbm90IGJlIGZsdXNoZWQgeWV0LCBzbyB3ZSBuZWVkIHRvIGluc3RhbnRpYXRlIHRoZSBEQlxuICAgICAgICAvLyBub3cgaWYgdGhlIHVzZXIgaXMgYXNraW5nIGZvciBpdFxuICAgICAgICB0aGlzLl9kYkNyZWF0ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2N0eFtwcm9wXVxuICAgIH0sXG4gICAgc2V0ICh2YWwpIHtcbiAgICAgIGlmIChwcm9wID09PSAnZGF0YWJhc2UnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YWJhc2UgaXMgcmVhZC1vbmx5JylcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NldChwcm9wLCB2YWwpO1xuICAgIH1cbiAgfTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUGlja2VyRWxlbWVudC5wcm90b3R5cGUsIGRlZmluaXRpb25zKTtcblxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdlbW9qaS1waWNrZXInKSkgeyAvLyBpZiBhbHJlYWR5IGRlZmluZWQsIGRvIG5vdGhpbmcgKGUuZy4gc2FtZSBzY3JpcHQgaW1wb3J0ZWQgdHdpY2UpXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZW1vamktcGlja2VyJywgUGlja2VyRWxlbWVudCk7XG59XG5cbmV4cG9ydCB7IFBpY2tlckVsZW1lbnQgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/emoji-picker-element/picker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;